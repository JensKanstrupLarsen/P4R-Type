// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

/** @param indexTypeName
  *   unset if index is not user-defined type
  */
@SerialVersionUID(0L)
final case class Register(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None,
    typeSpec: _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec] = _root_.scala.None,
    size: _root_.scala.Int = 0,
    indexTypeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Register] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (preamble.isDefined) {
        val __value = preamble.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.isDefined) {
        val __value = typeSpec.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = size
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      if (indexTypeName.isDefined) {
        val __value = indexTypeName.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      preamble.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = size
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      indexTypeName.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getPreamble: p4.config.v1.p4info.Preamble = preamble.getOrElse(p4.config.v1.p4info.Preamble.defaultInstance)
    def clearPreamble: Register = copy(preamble = _root_.scala.None)
    def withPreamble(__v: p4.config.v1.p4info.Preamble): Register = copy(preamble = Option(__v))
    def getTypeSpec: p4.config.v1.p4types.P4DataTypeSpec = typeSpec.getOrElse(p4.config.v1.p4types.P4DataTypeSpec.defaultInstance)
    def clearTypeSpec: Register = copy(typeSpec = _root_.scala.None)
    def withTypeSpec(__v: p4.config.v1.p4types.P4DataTypeSpec): Register = copy(typeSpec = Option(__v))
    def withSize(__v: _root_.scala.Int): Register = copy(size = __v)
    def getIndexTypeName: p4.config.v1.p4types.P4NamedType = indexTypeName.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def clearIndexTypeName: Register = copy(indexTypeName = _root_.scala.None)
    def withIndexTypeName(__v: p4.config.v1.p4types.P4NamedType): Register = copy(indexTypeName = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => preamble.orNull
        case 2 => typeSpec.orNull
        case 3 => {
          val __t = size
          if (__t != 0) __t else null
        }
        case 4 => indexTypeName.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => preamble.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => typeSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PInt(size)
        case 4 => indexTypeName.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.Register.type = p4.config.v1.p4info.Register
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.Register])
}

object Register extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.Register] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.Register] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.Register = {
    var __preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None
    var __typeSpec: _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec] = _root_.scala.None
    var __size: _root_.scala.Int = 0
    var __indexTypeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __preamble = Option(__preamble.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Preamble](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __typeSpec = Option(__typeSpec.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4DataTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __size = _input__.readInt32()
        case 34 =>
          __indexTypeName = Option(__indexTypeName.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.Register(
        preamble = __preamble,
        typeSpec = __typeSpec,
        size = __size,
        indexTypeName = __indexTypeName,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.Register] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.Register(
        preamble = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4info.Preamble]]),
        typeSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec]]),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        indexTypeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4info.Preamble
      case 2 => __out = p4.config.v1.p4types.P4DataTypeSpec
      case 4 => __out = p4.config.v1.p4types.P4NamedType
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4info.Register(
    preamble = _root_.scala.None,
    typeSpec = _root_.scala.None,
    size = 0,
    indexTypeName = _root_.scala.None
  )
  implicit class RegisterLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.Register]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.Register](_l) {
    def preamble: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.Preamble] = field(_.getPreamble)((c_, f_) => c_.copy(preamble = Option(f_)))
    def optionalPreamble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4info.Preamble]] = field(_.preamble)((c_, f_) => c_.copy(preamble = f_))
    def typeSpec: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4DataTypeSpec] = field(_.getTypeSpec)((c_, f_) => c_.copy(typeSpec = Option(f_)))
    def optionalTypeSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec]] = field(_.typeSpec)((c_, f_) => c_.copy(typeSpec = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def indexTypeName: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getIndexTypeName)((c_, f_) => c_.copy(indexTypeName = Option(f_)))
    def optionalIndexTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4NamedType]] = field(_.indexTypeName)((c_, f_) => c_.copy(indexTypeName = f_))
  }
  final val PREAMBLE_FIELD_NUMBER = 1
  final val TYPE_SPEC_FIELD_NUMBER = 2
  final val SIZE_FIELD_NUMBER = 3
  final val INDEX_TYPE_NAME_FIELD_NUMBER = 4
  def of(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble],
    typeSpec: _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec],
    size: _root_.scala.Int,
    indexTypeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType]
  ): _root_.p4.config.v1.p4info.Register = _root_.p4.config.v1.p4info.Register(
    preamble,
    typeSpec,
    size,
    indexTypeName
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.Register])
}
