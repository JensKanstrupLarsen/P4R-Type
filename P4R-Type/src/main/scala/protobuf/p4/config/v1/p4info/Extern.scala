// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

/** used to group all extern instances of the same type in one message
  *
  * @param externTypeId
  *   the extern_type_id is unique for a given architecture and must be in the
  *   range [0x81, 0xfe].
  */
@SerialVersionUID(0L)
final case class Extern(
    externTypeId: _root_.scala.Int = 0,
    externTypeName: _root_.scala.Predef.String = "",
    instances: _root_.scala.Seq[p4.config.v1.p4info.ExternInstance] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Extern] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = externTypeId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = externTypeName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      instances.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = externTypeId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = externTypeName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      instances.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withExternTypeId(__v: _root_.scala.Int): Extern = copy(externTypeId = __v)
    def withExternTypeName(__v: _root_.scala.Predef.String): Extern = copy(externTypeName = __v)
    def clearInstances = copy(instances = _root_.scala.Seq.empty)
    def addInstances(__vs: p4.config.v1.p4info.ExternInstance *): Extern = addAllInstances(__vs)
    def addAllInstances(__vs: Iterable[p4.config.v1.p4info.ExternInstance]): Extern = copy(instances = instances ++ __vs)
    def withInstances(__v: _root_.scala.Seq[p4.config.v1.p4info.ExternInstance]): Extern = copy(instances = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = externTypeId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = externTypeName
          if (__t != "") __t else null
        }
        case 3 => instances
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(externTypeId)
        case 2 => _root_.scalapb.descriptors.PString(externTypeName)
        case 3 => _root_.scalapb.descriptors.PRepeated(instances.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.Extern.type = p4.config.v1.p4info.Extern
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.Extern])
}

object Extern extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.Extern] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.Extern] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.Extern = {
    var __externTypeId: _root_.scala.Int = 0
    var __externTypeName: _root_.scala.Predef.String = ""
    val __instances: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ExternInstance] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ExternInstance]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __externTypeId = _input__.readUInt32()
        case 18 =>
          __externTypeName = _input__.readStringRequireUtf8()
        case 26 =>
          __instances += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.ExternInstance](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.Extern(
        externTypeId = __externTypeId,
        externTypeName = __externTypeName,
        instances = __instances.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.Extern] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.Extern(
        externTypeId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        externTypeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        instances = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.ExternInstance]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = p4.config.v1.p4info.ExternInstance
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4info.Extern(
    externTypeId = 0,
    externTypeName = "",
    instances = _root_.scala.Seq.empty
  )
  implicit class ExternLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.Extern]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.Extern](_l) {
    def externTypeId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.externTypeId)((c_, f_) => c_.copy(externTypeId = f_))
    def externTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.externTypeName)((c_, f_) => c_.copy(externTypeName = f_))
    def instances: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.ExternInstance]] = field(_.instances)((c_, f_) => c_.copy(instances = f_))
  }
  final val EXTERN_TYPE_ID_FIELD_NUMBER = 1
  final val EXTERN_TYPE_NAME_FIELD_NUMBER = 2
  final val INSTANCES_FIELD_NUMBER = 3
  def of(
    externTypeId: _root_.scala.Int,
    externTypeName: _root_.scala.Predef.String,
    instances: _root_.scala.Seq[p4.config.v1.p4info.ExternInstance]
  ): _root_.p4.config.v1.p4info.Extern = _root_.p4.config.v1.p4info.Extern(
    externTypeId,
    externTypeName,
    instances
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.Extern])
}
