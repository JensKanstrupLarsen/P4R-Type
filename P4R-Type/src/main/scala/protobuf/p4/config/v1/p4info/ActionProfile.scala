// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

/** @param tableIds
  *   the ids of the tables sharing this action profile
  * @param withSelector
  *   true iff the action profile used dynamic selection
  * @param size
  *   max number of member entries across all groups if the action profile does
  *   not have a selector. Otherwise, semantics as specified by
  *   `selector_size_semantics` below.
  * @param maxGroupSize
  *   0 if the action profile does not have a selector. Otherwise, semantics as
  *   specified by `selector_size_semantics` below.
  * @param selectorSizeSemantics
  *   specifies the semantics of `size` and `max_group_size` above
  */
@SerialVersionUID(0L)
final case class ActionProfile(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None,
    tableIds: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty,
    withSelector: _root_.scala.Boolean = false,
    size: _root_.scala.Long = 0L,
    maxGroupSize: _root_.scala.Int = 0,
    selectorSizeSemantics: p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.SUM_OF_WEIGHTS,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ActionProfile] {
    private[this] def tableIdsSerializedSize = {
      if (__tableIdsSerializedSizeField == 0) __tableIdsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        tableIds.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__i))
        __s
      }
      __tableIdsSerializedSizeField
    }
    @transient private[this] var __tableIdsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (preamble.isDefined) {
        val __value = preamble.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (tableIds.nonEmpty) {
        val __localsize = tableIdsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      
      {
        val __value = withSelector
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = size
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
        }
      };
      
      {
        val __value = maxGroupSize
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, __value)
        }
      };
      
      {
        val __value = selectorSizeSemantics.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      preamble.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      if (tableIds.nonEmpty) {
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(tableIdsSerializedSize)
        tableIds.foreach(_output__.writeUInt32NoTag)
      };
      {
        val __v = withSelector
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = size
        if (__v != 0L) {
          _output__.writeInt64(4, __v)
        }
      };
      {
        val __v = maxGroupSize
        if (__v != 0) {
          _output__.writeInt32(5, __v)
        }
      };
      {
        val __v = selectorSizeSemantics.value
        if (__v != 0) {
          _output__.writeEnum(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getPreamble: p4.config.v1.p4info.Preamble = preamble.getOrElse(p4.config.v1.p4info.Preamble.defaultInstance)
    def clearPreamble: ActionProfile = copy(preamble = _root_.scala.None)
    def withPreamble(__v: p4.config.v1.p4info.Preamble): ActionProfile = copy(preamble = Option(__v))
    def clearTableIds = copy(tableIds = _root_.scala.Seq.empty)
    def addTableIds(__vs: _root_.scala.Int *): ActionProfile = addAllTableIds(__vs)
    def addAllTableIds(__vs: Iterable[_root_.scala.Int]): ActionProfile = copy(tableIds = tableIds ++ __vs)
    def withTableIds(__v: _root_.scala.Seq[_root_.scala.Int]): ActionProfile = copy(tableIds = __v)
    def withWithSelector(__v: _root_.scala.Boolean): ActionProfile = copy(withSelector = __v)
    def withSize(__v: _root_.scala.Long): ActionProfile = copy(size = __v)
    def withMaxGroupSize(__v: _root_.scala.Int): ActionProfile = copy(maxGroupSize = __v)
    def withSelectorSizeSemantics(__v: p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics): ActionProfile = copy(selectorSizeSemantics = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => preamble.orNull
        case 2 => tableIds
        case 3 => {
          val __t = withSelector
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = size
          if (__t != 0L) __t else null
        }
        case 5 => {
          val __t = maxGroupSize
          if (__t != 0) __t else null
        }
        case 6 => {
          val __t = selectorSizeSemantics.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => preamble.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(tableIds.iterator.map(_root_.scalapb.descriptors.PInt(_)).toVector)
        case 3 => _root_.scalapb.descriptors.PBoolean(withSelector)
        case 4 => _root_.scalapb.descriptors.PLong(size)
        case 5 => _root_.scalapb.descriptors.PInt(maxGroupSize)
        case 6 => _root_.scalapb.descriptors.PEnum(selectorSizeSemantics.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.ActionProfile.type = p4.config.v1.p4info.ActionProfile
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.ActionProfile])
}

object ActionProfile extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ActionProfile] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ActionProfile] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.ActionProfile = {
    var __preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None
    val __tableIds: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Int]
    var __withSelector: _root_.scala.Boolean = false
    var __size: _root_.scala.Long = 0L
    var __maxGroupSize: _root_.scala.Int = 0
    var __selectorSizeSemantics: p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.SUM_OF_WEIGHTS
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __preamble = Option(__preamble.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Preamble](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __tableIds += _input__.readUInt32()
        case 18 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __tableIds += _input__.readUInt32()
          }
          _input__.popLimit(oldLimit)
        }
        case 24 =>
          __withSelector = _input__.readBool()
        case 32 =>
          __size = _input__.readInt64()
        case 40 =>
          __maxGroupSize = _input__.readInt32()
        case 48 =>
          __selectorSizeSemantics = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.ActionProfile(
        preamble = __preamble,
        tableIds = __tableIds.result(),
        withSelector = __withSelector,
        size = __size,
        maxGroupSize = __maxGroupSize,
        selectorSizeSemantics = __selectorSizeSemantics,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.ActionProfile] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.ActionProfile(
        preamble = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4info.Preamble]]),
        tableIds = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty),
        withSelector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        maxGroupSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        selectorSizeSemantics = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.SUM_OF_WEIGHTS.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4info.Preamble
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics
    }
  }
  lazy val defaultInstance = p4.config.v1.p4info.ActionProfile(
    preamble = _root_.scala.None,
    tableIds = _root_.scala.Seq.empty,
    withSelector = false,
    size = 0L,
    maxGroupSize = 0,
    selectorSizeSemantics = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.SUM_OF_WEIGHTS
  )
  sealed abstract class SelectorSizeSemantics(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = SelectorSizeSemantics
    def isSumOfWeights: _root_.scala.Boolean = false
    def isSumOfMembers: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[SelectorSizeSemantics] = p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics
    final def asRecognized: _root_.scala.Option[p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics.Recognized])
  }
  
  object SelectorSizeSemantics extends _root_.scalapb.GeneratedEnumCompanion[SelectorSizeSemantics] {
    sealed trait Recognized extends SelectorSizeSemantics
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SelectorSizeSemantics] = this
    
    /** indicates that `size` and `max_group_size` represent the maximum sum of
      * weights that can be present across all selector groups and within a
      * single selector group respectively.
      */
    @SerialVersionUID(0L)
    case object SUM_OF_WEIGHTS extends SelectorSizeSemantics(0) with SelectorSizeSemantics.Recognized {
      val index = 0
      val name = "SUM_OF_WEIGHTS"
      override def isSumOfWeights: _root_.scala.Boolean = true
    }
    
    /** indicates that `size` and `max_group_size` represent the maximum number
      * of members that can be present across all selector groups and within a
      * single selector group respectively.
      */
    @SerialVersionUID(0L)
    case object SUM_OF_MEMBERS extends SelectorSizeSemantics(1) with SelectorSizeSemantics.Recognized {
      val index = 1
      val name = "SUM_OF_MEMBERS"
      override def isSumOfMembers: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SelectorSizeSemantics(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(SUM_OF_WEIGHTS, SUM_OF_MEMBERS)
    def fromValue(__value: _root_.scala.Int): SelectorSizeSemantics = __value match {
      case 0 => SUM_OF_WEIGHTS
      case 1 => SUM_OF_MEMBERS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = p4.config.v1.p4info.ActionProfile.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = p4.config.v1.p4info.ActionProfile.scalaDescriptor.enums(0)
  }
  implicit class ActionProfileLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ActionProfile]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.ActionProfile](_l) {
    def preamble: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.Preamble] = field(_.getPreamble)((c_, f_) => c_.copy(preamble = Option(f_)))
    def optionalPreamble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4info.Preamble]] = field(_.preamble)((c_, f_) => c_.copy(preamble = f_))
    def tableIds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.tableIds)((c_, f_) => c_.copy(tableIds = f_))
    def withSelector: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.withSelector)((c_, f_) => c_.copy(withSelector = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def maxGroupSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxGroupSize)((c_, f_) => c_.copy(maxGroupSize = f_))
    def selectorSizeSemantics: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics] = field(_.selectorSizeSemantics)((c_, f_) => c_.copy(selectorSizeSemantics = f_))
  }
  final val PREAMBLE_FIELD_NUMBER = 1
  final val TABLE_IDS_FIELD_NUMBER = 2
  final val WITH_SELECTOR_FIELD_NUMBER = 3
  final val SIZE_FIELD_NUMBER = 4
  final val MAX_GROUP_SIZE_FIELD_NUMBER = 5
  final val SELECTOR_SIZE_SEMANTICS_FIELD_NUMBER = 6
  def of(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble],
    tableIds: _root_.scala.Seq[_root_.scala.Int],
    withSelector: _root_.scala.Boolean,
    size: _root_.scala.Long,
    maxGroupSize: _root_.scala.Int,
    selectorSizeSemantics: p4.config.v1.p4info.ActionProfile.SelectorSizeSemantics
  ): _root_.p4.config.v1.p4info.ActionProfile = _root_.p4.config.v1.p4info.ActionProfile(
    preamble,
    tableIds,
    withSelector,
    size,
    maxGroupSize,
    selectorSizeSemantics
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.ActionProfile])
}
