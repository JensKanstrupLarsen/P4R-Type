// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

/** Any metadata associated with controller Packet-IO (Packet-In or Packet-Out)
  * is modeled as P4 headers carrying special annotations
  * &#64;controller_header("packet_out") and &#64;controller_header("packet_in")
  * respectively. There can be at most one header each with these annotations.
  * This message captures the info contained within these special headers,
  * and used in p4runtime.proto to supply the metadata.
  *
  * @param preamble
  *   preamble.name and preamble.id will specify header type ("packet_out" or
  *   "packet_in" for now).
  * @param metadata
  *   Ordered based on header layout.
  *   This is a constraint on the generator of this P4Info.
  */
@SerialVersionUID(0L)
final case class ControllerPacketMetadata(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None,
    metadata: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata.Metadata] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ControllerPacketMetadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (preamble.isDefined) {
        val __value = preamble.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      metadata.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      preamble.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      metadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getPreamble: p4.config.v1.p4info.Preamble = preamble.getOrElse(p4.config.v1.p4info.Preamble.defaultInstance)
    def clearPreamble: ControllerPacketMetadata = copy(preamble = _root_.scala.None)
    def withPreamble(__v: p4.config.v1.p4info.Preamble): ControllerPacketMetadata = copy(preamble = Option(__v))
    def clearMetadata = copy(metadata = _root_.scala.Seq.empty)
    def addMetadata(__vs: p4.config.v1.p4info.ControllerPacketMetadata.Metadata *): ControllerPacketMetadata = addAllMetadata(__vs)
    def addAllMetadata(__vs: Iterable[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]): ControllerPacketMetadata = copy(metadata = metadata ++ __vs)
    def withMetadata(__v: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]): ControllerPacketMetadata = copy(metadata = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => preamble.orNull
        case 2 => metadata
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => preamble.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(metadata.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.ControllerPacketMetadata.type = p4.config.v1.p4info.ControllerPacketMetadata
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.ControllerPacketMetadata])
}

object ControllerPacketMetadata extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ControllerPacketMetadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ControllerPacketMetadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.ControllerPacketMetadata = {
    var __preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble] = _root_.scala.None
    val __metadata: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ControllerPacketMetadata.Metadata] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __preamble = Option(__preamble.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Preamble](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __metadata += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.ControllerPacketMetadata.Metadata](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.ControllerPacketMetadata(
        preamble = __preamble,
        metadata = __metadata.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.ControllerPacketMetadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.ControllerPacketMetadata(
        preamble = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4info.Preamble]]),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4info.Preamble
      case 2 => __out = p4.config.v1.p4info.ControllerPacketMetadata.Metadata
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.p4.config.v1.p4info.ControllerPacketMetadata.Metadata
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4info.ControllerPacketMetadata(
    preamble = _root_.scala.None,
    metadata = _root_.scala.Seq.empty
  )
  /** @param name
    *   This is the name of the header field (not fully-qualified), similar
    *   to e.g. Action.Param.name.
    * @param annotationLocations
    *   Optional. If present, the location of `annotations[i]` is given by
    *   `annotation_locations[i]`.
    * @param typeName
    *   unset if not user-defined type
    */
  @SerialVersionUID(0L)
  final case class Metadata(
      id: _root_.scala.Int = 0,
      name: _root_.scala.Predef.String = "",
      annotations: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation] = _root_.scala.Seq.empty,
      bitwidth: _root_.scala.Int = 0,
      typeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None,
      structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Metadata] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = id
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
          }
        };
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        annotations.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
        annotationLocations.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = bitwidth
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
          }
        };
        if (typeName.isDefined) {
          val __value = typeName.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        structuredAnnotations.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = id
          if (__v != 0) {
            _output__.writeUInt32(1, __v)
          }
        };
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        annotations.foreach { __v =>
          val __m = __v
          _output__.writeString(3, __m)
        };
        {
          val __v = bitwidth
          if (__v != 0) {
            _output__.writeInt32(4, __v)
          }
        };
        typeName.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        structuredAnnotations.foreach { __v =>
          val __m = __v
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        annotationLocations.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withId(__v: _root_.scala.Int): Metadata = copy(id = __v)
      def withName(__v: _root_.scala.Predef.String): Metadata = copy(name = __v)
      def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
      def addAnnotations(__vs: _root_.scala.Predef.String *): Metadata = addAllAnnotations(__vs)
      def addAllAnnotations(__vs: Iterable[_root_.scala.Predef.String]): Metadata = copy(annotations = annotations ++ __vs)
      def withAnnotations(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Metadata = copy(annotations = __v)
      def clearAnnotationLocations = copy(annotationLocations = _root_.scala.Seq.empty)
      def addAnnotationLocations(__vs: p4.config.v1.p4types.SourceLocation *): Metadata = addAllAnnotationLocations(__vs)
      def addAllAnnotationLocations(__vs: Iterable[p4.config.v1.p4types.SourceLocation]): Metadata = copy(annotationLocations = annotationLocations ++ __vs)
      def withAnnotationLocations(__v: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]): Metadata = copy(annotationLocations = __v)
      def withBitwidth(__v: _root_.scala.Int): Metadata = copy(bitwidth = __v)
      def getTypeName: p4.config.v1.p4types.P4NamedType = typeName.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
      def clearTypeName: Metadata = copy(typeName = _root_.scala.None)
      def withTypeName(__v: p4.config.v1.p4types.P4NamedType): Metadata = copy(typeName = Option(__v))
      def clearStructuredAnnotations = copy(structuredAnnotations = _root_.scala.Seq.empty)
      def addStructuredAnnotations(__vs: p4.config.v1.p4types.StructuredAnnotation *): Metadata = addAllStructuredAnnotations(__vs)
      def addAllStructuredAnnotations(__vs: Iterable[p4.config.v1.p4types.StructuredAnnotation]): Metadata = copy(structuredAnnotations = structuredAnnotations ++ __vs)
      def withStructuredAnnotations(__v: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]): Metadata = copy(structuredAnnotations = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = id
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 3 => annotations
          case 7 => annotationLocations
          case 4 => {
            val __t = bitwidth
            if (__t != 0) __t else null
          }
          case 5 => typeName.orNull
          case 6 => structuredAnnotations
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(id)
          case 2 => _root_.scalapb.descriptors.PString(name)
          case 3 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 7 => _root_.scalapb.descriptors.PRepeated(annotationLocations.iterator.map(_.toPMessage).toVector)
          case 4 => _root_.scalapb.descriptors.PInt(bitwidth)
          case 5 => typeName.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => _root_.scalapb.descriptors.PRepeated(structuredAnnotations.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4info.ControllerPacketMetadata.Metadata.type = p4.config.v1.p4info.ControllerPacketMetadata.Metadata
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.ControllerPacketMetadata.Metadata])
  }
  
  object Metadata extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ControllerPacketMetadata.Metadata] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ControllerPacketMetadata.Metadata] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.ControllerPacketMetadata.Metadata = {
      var __id: _root_.scala.Int = 0
      var __name: _root_.scala.Predef.String = ""
      val __annotations: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __annotationLocations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation]
      var __bitwidth: _root_.scala.Int = 0
      var __typeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
      val __structuredAnnotations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id = _input__.readUInt32()
          case 18 =>
            __name = _input__.readStringRequireUtf8()
          case 26 =>
            __annotations += _input__.readStringRequireUtf8()
          case 58 =>
            __annotationLocations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.SourceLocation](_input__)
          case 32 =>
            __bitwidth = _input__.readInt32()
          case 42 =>
            __typeName = Option(__typeName.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 50 =>
            __structuredAnnotations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.StructuredAnnotation](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4info.ControllerPacketMetadata.Metadata(
          id = __id,
          name = __name,
          annotations = __annotations.result(),
          annotationLocations = __annotationLocations.result(),
          bitwidth = __bitwidth,
          typeName = __typeName,
          structuredAnnotations = __structuredAnnotations.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.ControllerPacketMetadata.Metadata] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4info.ControllerPacketMetadata.Metadata(
          id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          annotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          annotationLocations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.SourceLocation]]).getOrElse(_root_.scala.Seq.empty),
          bitwidth = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          typeName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]),
          structuredAnnotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4info.ControllerPacketMetadata.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4info.ControllerPacketMetadata.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 7 => __out = p4.config.v1.p4types.SourceLocation
        case 5 => __out = p4.config.v1.p4types.P4NamedType
        case 6 => __out = p4.config.v1.p4types.StructuredAnnotation
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4info.ControllerPacketMetadata.Metadata(
      id = 0,
      name = "",
      annotations = _root_.scala.Seq.empty,
      annotationLocations = _root_.scala.Seq.empty,
      bitwidth = 0,
      typeName = _root_.scala.None,
      structuredAnnotations = _root_.scala.Seq.empty
    )
    implicit class MetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ControllerPacketMetadata.Metadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.ControllerPacketMetadata.Metadata](_l) {
      def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
      def annotationLocations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]] = field(_.annotationLocations)((c_, f_) => c_.copy(annotationLocations = f_))
      def bitwidth: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.bitwidth)((c_, f_) => c_.copy(bitwidth = f_))
      def typeName: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getTypeName)((c_, f_) => c_.copy(typeName = Option(f_)))
      def optionalTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4NamedType]] = field(_.typeName)((c_, f_) => c_.copy(typeName = f_))
      def structuredAnnotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]] = field(_.structuredAnnotations)((c_, f_) => c_.copy(structuredAnnotations = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val NAME_FIELD_NUMBER = 2
    final val ANNOTATIONS_FIELD_NUMBER = 3
    final val ANNOTATION_LOCATIONS_FIELD_NUMBER = 7
    final val BITWIDTH_FIELD_NUMBER = 4
    final val TYPE_NAME_FIELD_NUMBER = 5
    final val STRUCTURED_ANNOTATIONS_FIELD_NUMBER = 6
    def of(
      id: _root_.scala.Int,
      name: _root_.scala.Predef.String,
      annotations: _root_.scala.Seq[_root_.scala.Predef.String],
      annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation],
      bitwidth: _root_.scala.Int,
      typeName: _root_.scala.Option[p4.config.v1.p4types.P4NamedType],
      structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]
    ): _root_.p4.config.v1.p4info.ControllerPacketMetadata.Metadata = _root_.p4.config.v1.p4info.ControllerPacketMetadata.Metadata(
      id,
      name,
      annotations,
      annotationLocations,
      bitwidth,
      typeName,
      structuredAnnotations
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.ControllerPacketMetadata.Metadata])
  }
  
  implicit class ControllerPacketMetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ControllerPacketMetadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.ControllerPacketMetadata](_l) {
    def preamble: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.Preamble] = field(_.getPreamble)((c_, f_) => c_.copy(preamble = Option(f_)))
    def optionalPreamble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4info.Preamble]] = field(_.preamble)((c_, f_) => c_.copy(preamble = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
  }
  final val PREAMBLE_FIELD_NUMBER = 1
  final val METADATA_FIELD_NUMBER = 2
  def of(
    preamble: _root_.scala.Option[p4.config.v1.p4info.Preamble],
    metadata: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata.Metadata]
  ): _root_.p4.config.v1.p4info.ControllerPacketMetadata = _root_.p4.config.v1.p4info.ControllerPacketMetadata(
    preamble,
    metadata
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.ControllerPacketMetadata])
}
