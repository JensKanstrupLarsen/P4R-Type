// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

/** used to list all possible actions in a Table
  *
  * @param annotationLocations
  *   Optional. If present, the location of `annotations[i]` is given by
  *   `annotation_locations[i]`.
  */
@SerialVersionUID(0L)
final case class ActionRef(
    id: _root_.scala.Int = 0,
    scope: p4.config.v1.p4info.ActionRef.Scope = p4.config.v1.p4info.ActionRef.Scope.TABLE_AND_DEFAULT,
    annotations: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation] = _root_.scala.Seq.empty,
    structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ActionRef] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = scope.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      annotations.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      annotationLocations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      structuredAnnotations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      annotations.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      {
        val __v = scope.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      structuredAnnotations.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      annotationLocations.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Int): ActionRef = copy(id = __v)
    def withScope(__v: p4.config.v1.p4info.ActionRef.Scope): ActionRef = copy(scope = __v)
    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
    def addAnnotations(__vs: _root_.scala.Predef.String *): ActionRef = addAllAnnotations(__vs)
    def addAllAnnotations(__vs: Iterable[_root_.scala.Predef.String]): ActionRef = copy(annotations = annotations ++ __vs)
    def withAnnotations(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ActionRef = copy(annotations = __v)
    def clearAnnotationLocations = copy(annotationLocations = _root_.scala.Seq.empty)
    def addAnnotationLocations(__vs: p4.config.v1.p4types.SourceLocation *): ActionRef = addAllAnnotationLocations(__vs)
    def addAllAnnotationLocations(__vs: Iterable[p4.config.v1.p4types.SourceLocation]): ActionRef = copy(annotationLocations = annotationLocations ++ __vs)
    def withAnnotationLocations(__v: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]): ActionRef = copy(annotationLocations = __v)
    def clearStructuredAnnotations = copy(structuredAnnotations = _root_.scala.Seq.empty)
    def addStructuredAnnotations(__vs: p4.config.v1.p4types.StructuredAnnotation *): ActionRef = addAllStructuredAnnotations(__vs)
    def addAllStructuredAnnotations(__vs: Iterable[p4.config.v1.p4types.StructuredAnnotation]): ActionRef = copy(structuredAnnotations = structuredAnnotations ++ __vs)
    def withStructuredAnnotations(__v: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]): ActionRef = copy(structuredAnnotations = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = scope.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => annotations
        case 5 => annotationLocations
        case 4 => structuredAnnotations
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(id)
        case 3 => _root_.scalapb.descriptors.PEnum(scope.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(annotationLocations.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(structuredAnnotations.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.ActionRef.type = p4.config.v1.p4info.ActionRef
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.ActionRef])
}

object ActionRef extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ActionRef] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.ActionRef] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.ActionRef = {
    var __id: _root_.scala.Int = 0
    var __scope: p4.config.v1.p4info.ActionRef.Scope = p4.config.v1.p4info.ActionRef.Scope.TABLE_AND_DEFAULT
    val __annotations: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __annotationLocations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation]
    val __structuredAnnotations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __id = _input__.readUInt32()
        case 24 =>
          __scope = p4.config.v1.p4info.ActionRef.Scope.fromValue(_input__.readEnum())
        case 18 =>
          __annotations += _input__.readStringRequireUtf8()
        case 42 =>
          __annotationLocations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.SourceLocation](_input__)
        case 34 =>
          __structuredAnnotations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.StructuredAnnotation](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.ActionRef(
        id = __id,
        scope = __scope,
        annotations = __annotations.result(),
        annotationLocations = __annotationLocations.result(),
        structuredAnnotations = __structuredAnnotations.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.ActionRef] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.ActionRef(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        scope = p4.config.v1.p4info.ActionRef.Scope.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(p4.config.v1.p4info.ActionRef.Scope.TABLE_AND_DEFAULT.scalaValueDescriptor).number),
        annotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        annotationLocations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.SourceLocation]]).getOrElse(_root_.scala.Seq.empty),
        structuredAnnotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = p4.config.v1.p4types.SourceLocation
      case 4 => __out = p4.config.v1.p4types.StructuredAnnotation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => p4.config.v1.p4info.ActionRef.Scope
    }
  }
  lazy val defaultInstance = p4.config.v1.p4info.ActionRef(
    id = 0,
    scope = p4.config.v1.p4info.ActionRef.Scope.TABLE_AND_DEFAULT,
    annotations = _root_.scala.Seq.empty,
    annotationLocations = _root_.scala.Seq.empty,
    structuredAnnotations = _root_.scala.Seq.empty
  )
  sealed abstract class Scope(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Scope
    def isTableAndDefault: _root_.scala.Boolean = false
    def isTableOnly: _root_.scala.Boolean = false
    def isDefaultOnly: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Scope] = p4.config.v1.p4info.ActionRef.Scope
    final def asRecognized: _root_.scala.Option[p4.config.v1.p4info.ActionRef.Scope.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[p4.config.v1.p4info.ActionRef.Scope.Recognized])
  }
  
  object Scope extends _root_.scalapb.GeneratedEnumCompanion[Scope] {
    sealed trait Recognized extends Scope
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Scope] = this
    
    @SerialVersionUID(0L)
    case object TABLE_AND_DEFAULT extends Scope(0) with Scope.Recognized {
      val index = 0
      val name = "TABLE_AND_DEFAULT"
      override def isTableAndDefault: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TABLE_ONLY extends Scope(1) with Scope.Recognized {
      val index = 1
      val name = "TABLE_ONLY"
      override def isTableOnly: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DEFAULT_ONLY extends Scope(2) with Scope.Recognized {
      val index = 2
      val name = "DEFAULT_ONLY"
      override def isDefaultOnly: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Scope(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(TABLE_AND_DEFAULT, TABLE_ONLY, DEFAULT_ONLY)
    def fromValue(__value: _root_.scala.Int): Scope = __value match {
      case 0 => TABLE_AND_DEFAULT
      case 1 => TABLE_ONLY
      case 2 => DEFAULT_ONLY
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = p4.config.v1.p4info.ActionRef.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = p4.config.v1.p4info.ActionRef.scalaDescriptor.enums(0)
  }
  implicit class ActionRefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ActionRef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.ActionRef](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def scope: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.ActionRef.Scope] = field(_.scope)((c_, f_) => c_.copy(scope = f_))
    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
    def annotationLocations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]] = field(_.annotationLocations)((c_, f_) => c_.copy(annotationLocations = f_))
    def structuredAnnotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]] = field(_.structuredAnnotations)((c_, f_) => c_.copy(structuredAnnotations = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val SCOPE_FIELD_NUMBER = 3
  final val ANNOTATIONS_FIELD_NUMBER = 2
  final val ANNOTATION_LOCATIONS_FIELD_NUMBER = 5
  final val STRUCTURED_ANNOTATIONS_FIELD_NUMBER = 4
  def of(
    id: _root_.scala.Int,
    scope: p4.config.v1.p4info.ActionRef.Scope,
    annotations: _root_.scala.Seq[_root_.scala.Predef.String],
    annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation],
    structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]
  ): _root_.p4.config.v1.p4info.ActionRef = _root_.p4.config.v1.p4info.ActionRef(
    id,
    scope,
    annotations,
    annotationLocations,
    structuredAnnotations
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.ActionRef])
}
