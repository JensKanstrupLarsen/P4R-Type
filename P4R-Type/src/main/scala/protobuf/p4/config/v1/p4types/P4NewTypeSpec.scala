// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

/** New types introduced with the "type" keyword
  *
  * @param annotations
  *   for other annotations (not &#64;p4runtime_translation)
  * @param annotationLocations
  *   Optional. If present, the location of `annotations[i]` is given by
  *   `annotation_locations[i]`.
  */
@SerialVersionUID(0L)
final case class P4NewTypeSpec(
    representation: p4.config.v1.p4types.P4NewTypeSpec.Representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.Empty,
    annotations: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation] = _root_.scala.Seq.empty,
    structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[P4NewTypeSpec] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (representation.originalType.isDefined) {
        val __value = representation.originalType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (representation.translatedType.isDefined) {
        val __value = representation.translatedType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      annotations.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      annotationLocations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      structuredAnnotations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      representation.originalType.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      representation.translatedType.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      annotations.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      structuredAnnotations.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      annotationLocations.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getOriginalType: p4.config.v1.p4types.P4DataTypeSpec = representation.originalType.getOrElse(p4.config.v1.p4types.P4DataTypeSpec.defaultInstance)
    def withOriginalType(__v: p4.config.v1.p4types.P4DataTypeSpec): P4NewTypeSpec = copy(representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.OriginalType(__v))
    def getTranslatedType: p4.config.v1.p4types.P4NewTypeTranslation = representation.translatedType.getOrElse(p4.config.v1.p4types.P4NewTypeTranslation.defaultInstance)
    def withTranslatedType(__v: p4.config.v1.p4types.P4NewTypeTranslation): P4NewTypeSpec = copy(representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.TranslatedType(__v))
    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
    def addAnnotations(__vs: _root_.scala.Predef.String *): P4NewTypeSpec = addAllAnnotations(__vs)
    def addAllAnnotations(__vs: Iterable[_root_.scala.Predef.String]): P4NewTypeSpec = copy(annotations = annotations ++ __vs)
    def withAnnotations(__v: _root_.scala.Seq[_root_.scala.Predef.String]): P4NewTypeSpec = copy(annotations = __v)
    def clearAnnotationLocations = copy(annotationLocations = _root_.scala.Seq.empty)
    def addAnnotationLocations(__vs: p4.config.v1.p4types.SourceLocation *): P4NewTypeSpec = addAllAnnotationLocations(__vs)
    def addAllAnnotationLocations(__vs: Iterable[p4.config.v1.p4types.SourceLocation]): P4NewTypeSpec = copy(annotationLocations = annotationLocations ++ __vs)
    def withAnnotationLocations(__v: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]): P4NewTypeSpec = copy(annotationLocations = __v)
    def clearStructuredAnnotations = copy(structuredAnnotations = _root_.scala.Seq.empty)
    def addStructuredAnnotations(__vs: p4.config.v1.p4types.StructuredAnnotation *): P4NewTypeSpec = addAllStructuredAnnotations(__vs)
    def addAllStructuredAnnotations(__vs: Iterable[p4.config.v1.p4types.StructuredAnnotation]): P4NewTypeSpec = copy(structuredAnnotations = structuredAnnotations ++ __vs)
    def withStructuredAnnotations(__v: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]): P4NewTypeSpec = copy(structuredAnnotations = __v)
    def clearRepresentation: P4NewTypeSpec = copy(representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.Empty)
    def withRepresentation(__v: p4.config.v1.p4types.P4NewTypeSpec.Representation): P4NewTypeSpec = copy(representation = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => representation.originalType.orNull
        case 2 => representation.translatedType.orNull
        case 3 => annotations
        case 5 => annotationLocations
        case 4 => structuredAnnotations
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => representation.originalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => representation.translatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(annotationLocations.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(structuredAnnotations.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4types.P4NewTypeSpec.type = p4.config.v1.p4types.P4NewTypeSpec
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4NewTypeSpec])
}

object P4NewTypeSpec extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4NewTypeSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4NewTypeSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4NewTypeSpec = {
    val __annotations: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __annotationLocations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.SourceLocation]
    val __structuredAnnotations: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4types.StructuredAnnotation]
    var __representation: p4.config.v1.p4types.P4NewTypeSpec.Representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.OriginalType(__representation.originalType.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4DataTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.TranslatedType(__representation.translatedType.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NewTypeTranslation](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __annotations += _input__.readStringRequireUtf8()
        case 42 =>
          __annotationLocations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.SourceLocation](_input__)
        case 34 =>
          __structuredAnnotations += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.StructuredAnnotation](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4types.P4NewTypeSpec(
        annotations = __annotations.result(),
        annotationLocations = __annotationLocations.result(),
        structuredAnnotations = __structuredAnnotations.result(),
        representation = __representation,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4NewTypeSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4types.P4NewTypeSpec(
        annotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        annotationLocations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.SourceLocation]]).getOrElse(_root_.scala.Seq.empty),
        structuredAnnotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]]).getOrElse(_root_.scala.Seq.empty),
        representation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec]]).map(p4.config.v1.p4types.P4NewTypeSpec.Representation.OriginalType(_))
            .orElse[p4.config.v1.p4types.P4NewTypeSpec.Representation](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NewTypeTranslation]]).map(p4.config.v1.p4types.P4NewTypeSpec.Representation.TranslatedType(_)))
            .getOrElse(p4.config.v1.p4types.P4NewTypeSpec.Representation.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4TypesProto.javaDescriptor.getMessageTypes().get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4TypesProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4types.P4DataTypeSpec
      case 2 => __out = p4.config.v1.p4types.P4NewTypeTranslation
      case 5 => __out = p4.config.v1.p4types.SourceLocation
      case 4 => __out = p4.config.v1.p4types.StructuredAnnotation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4types.P4NewTypeSpec(
    annotations = _root_.scala.Seq.empty,
    annotationLocations = _root_.scala.Seq.empty,
    structuredAnnotations = _root_.scala.Seq.empty,
    representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.Empty
  )
  sealed trait Representation extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isOriginalType: _root_.scala.Boolean = false
    def isTranslatedType: _root_.scala.Boolean = false
    def originalType: _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec] = _root_.scala.None
    def translatedType: _root_.scala.Option[p4.config.v1.p4types.P4NewTypeTranslation] = _root_.scala.None
  }
  object Representation {
    @SerialVersionUID(0L)
    case object Empty extends p4.config.v1.p4types.P4NewTypeSpec.Representation {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class OriginalType(value: p4.config.v1.p4types.P4DataTypeSpec) extends p4.config.v1.p4types.P4NewTypeSpec.Representation {
      type ValueType = p4.config.v1.p4types.P4DataTypeSpec
      override def isOriginalType: _root_.scala.Boolean = true
      override def originalType: _root_.scala.Option[p4.config.v1.p4types.P4DataTypeSpec] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class TranslatedType(value: p4.config.v1.p4types.P4NewTypeTranslation) extends p4.config.v1.p4types.P4NewTypeSpec.Representation {
      type ValueType = p4.config.v1.p4types.P4NewTypeTranslation
      override def isTranslatedType: _root_.scala.Boolean = true
      override def translatedType: _root_.scala.Option[p4.config.v1.p4types.P4NewTypeTranslation] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class P4NewTypeSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NewTypeSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4NewTypeSpec](_l) {
    def originalType: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4DataTypeSpec] = field(_.getOriginalType)((c_, f_) => c_.copy(representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.OriginalType(f_)))
    def translatedType: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NewTypeTranslation] = field(_.getTranslatedType)((c_, f_) => c_.copy(representation = p4.config.v1.p4types.P4NewTypeSpec.Representation.TranslatedType(f_)))
    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
    def annotationLocations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.SourceLocation]] = field(_.annotationLocations)((c_, f_) => c_.copy(annotationLocations = f_))
    def structuredAnnotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]] = field(_.structuredAnnotations)((c_, f_) => c_.copy(structuredAnnotations = f_))
    def representation: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NewTypeSpec.Representation] = field(_.representation)((c_, f_) => c_.copy(representation = f_))
  }
  final val ORIGINAL_TYPE_FIELD_NUMBER = 1
  final val TRANSLATED_TYPE_FIELD_NUMBER = 2
  final val ANNOTATIONS_FIELD_NUMBER = 3
  final val ANNOTATION_LOCATIONS_FIELD_NUMBER = 5
  final val STRUCTURED_ANNOTATIONS_FIELD_NUMBER = 4
  def of(
    representation: p4.config.v1.p4types.P4NewTypeSpec.Representation,
    annotations: _root_.scala.Seq[_root_.scala.Predef.String],
    annotationLocations: _root_.scala.Seq[p4.config.v1.p4types.SourceLocation],
    structuredAnnotations: _root_.scala.Seq[p4.config.v1.p4types.StructuredAnnotation]
  ): _root_.p4.config.v1.p4types.P4NewTypeSpec = _root_.p4.config.v1.p4types.P4NewTypeSpec(
    representation,
    annotations,
    annotationLocations,
    structuredAnnotations
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4NewTypeSpec])
}
