// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

@SerialVersionUID(0L)
final case class P4HeaderStackTypeSpec(
    header: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None,
    size: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[P4HeaderStackTypeSpec] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (header.isDefined) {
        val __value = header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = size
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      header.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = size
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getHeader: p4.config.v1.p4types.P4NamedType = header.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def clearHeader: P4HeaderStackTypeSpec = copy(header = _root_.scala.None)
    def withHeader(__v: p4.config.v1.p4types.P4NamedType): P4HeaderStackTypeSpec = copy(header = Option(__v))
    def withSize(__v: _root_.scala.Int): P4HeaderStackTypeSpec = copy(size = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => header.orNull
        case 2 => {
          val __t = size
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PInt(size)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4types.P4HeaderStackTypeSpec.type = p4.config.v1.p4types.P4HeaderStackTypeSpec
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4HeaderStackTypeSpec])
}

object P4HeaderStackTypeSpec extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4HeaderStackTypeSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4HeaderStackTypeSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4HeaderStackTypeSpec = {
    var __header: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    var __size: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __header = Option(__header.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __size = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4types.P4HeaderStackTypeSpec(
        header = __header,
        size = __size,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4HeaderStackTypeSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4types.P4HeaderStackTypeSpec(
        header = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4TypesProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4TypesProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4types.P4NamedType
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4types.P4HeaderStackTypeSpec(
    header = _root_.scala.None,
    size = 0
  )
  implicit class P4HeaderStackTypeSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4HeaderStackTypeSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4HeaderStackTypeSpec](_l) {
    def header: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getHeader)((c_, f_) => c_.copy(header = Option(f_)))
    def optionalHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4NamedType]] = field(_.header)((c_, f_) => c_.copy(header = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.size)((c_, f_) => c_.copy(size = f_))
  }
  final val HEADER_FIELD_NUMBER = 1
  final val SIZE_FIELD_NUMBER = 2
  def of(
    header: _root_.scala.Option[p4.config.v1.p4types.P4NamedType],
    size: _root_.scala.Int
  ): _root_.p4.config.v1.p4types.P4HeaderStackTypeSpec = _root_.p4.config.v1.p4types.P4HeaderStackTypeSpec(
    header,
    size
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4HeaderStackTypeSpec])
}
