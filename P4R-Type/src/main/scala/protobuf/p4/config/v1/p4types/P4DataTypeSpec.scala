// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

/** Describes a P4_16 type.
  */
@SerialVersionUID(0L)
final case class P4DataTypeSpec(
    typeSpec: p4.config.v1.p4types.P4DataTypeSpec.TypeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[P4DataTypeSpec] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (typeSpec.bitstring.isDefined) {
        val __value = typeSpec.bitstring.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.bool.isDefined) {
        val __value = typeSpec.bool.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.tuple.isDefined) {
        val __value = typeSpec.tuple.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.struct.isDefined) {
        val __value = typeSpec.struct.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.header.isDefined) {
        val __value = typeSpec.header.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.headerUnion.isDefined) {
        val __value = typeSpec.headerUnion.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.headerStack.isDefined) {
        val __value = typeSpec.headerStack.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.headerUnionStack.isDefined) {
        val __value = typeSpec.headerUnionStack.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.`enum`.isDefined) {
        val __value = typeSpec.`enum`.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.error.isDefined) {
        val __value = typeSpec.error.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.serializableEnum.isDefined) {
        val __value = typeSpec.serializableEnum.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (typeSpec.newType.isDefined) {
        val __value = typeSpec.newType.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      typeSpec.bitstring.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.bool.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.tuple.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.struct.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.header.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.headerUnion.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.headerStack.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.headerUnionStack.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.`enum`.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.error.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.serializableEnum.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeSpec.newType.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getBitstring: p4.config.v1.p4types.P4BitstringLikeTypeSpec = typeSpec.bitstring.getOrElse(p4.config.v1.p4types.P4BitstringLikeTypeSpec.defaultInstance)
    def withBitstring(__v: p4.config.v1.p4types.P4BitstringLikeTypeSpec): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bitstring(__v))
    def getBool: p4.config.v1.p4types.P4BoolType = typeSpec.bool.getOrElse(p4.config.v1.p4types.P4BoolType.defaultInstance)
    def withBool(__v: p4.config.v1.p4types.P4BoolType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bool(__v))
    def getTuple: p4.config.v1.p4types.P4TupleTypeSpec = typeSpec.tuple.getOrElse(p4.config.v1.p4types.P4TupleTypeSpec.defaultInstance)
    def withTuple(__v: p4.config.v1.p4types.P4TupleTypeSpec): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Tuple(__v))
    def getStruct: p4.config.v1.p4types.P4NamedType = typeSpec.struct.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withStruct(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Struct(__v))
    def getHeader: p4.config.v1.p4types.P4NamedType = typeSpec.header.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withHeader(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Header(__v))
    def getHeaderUnion: p4.config.v1.p4types.P4NamedType = typeSpec.headerUnion.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withHeaderUnion(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnion(__v))
    def getHeaderStack: p4.config.v1.p4types.P4HeaderStackTypeSpec = typeSpec.headerStack.getOrElse(p4.config.v1.p4types.P4HeaderStackTypeSpec.defaultInstance)
    def withHeaderStack(__v: p4.config.v1.p4types.P4HeaderStackTypeSpec): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderStack(__v))
    def getHeaderUnionStack: p4.config.v1.p4types.P4HeaderUnionStackTypeSpec = typeSpec.headerUnionStack.getOrElse(p4.config.v1.p4types.P4HeaderUnionStackTypeSpec.defaultInstance)
    def withHeaderUnionStack(__v: p4.config.v1.p4types.P4HeaderUnionStackTypeSpec): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnionStack(__v))
    def getEnum: p4.config.v1.p4types.P4NamedType = typeSpec.`enum`.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withEnum(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Enum(__v))
    def getError: p4.config.v1.p4types.P4ErrorType = typeSpec.error.getOrElse(p4.config.v1.p4types.P4ErrorType.defaultInstance)
    def withError(__v: p4.config.v1.p4types.P4ErrorType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Error(__v))
    def getSerializableEnum: p4.config.v1.p4types.P4NamedType = typeSpec.serializableEnum.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withSerializableEnum(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.SerializableEnum(__v))
    def getNewType: p4.config.v1.p4types.P4NamedType = typeSpec.newType.getOrElse(p4.config.v1.p4types.P4NamedType.defaultInstance)
    def withNewType(__v: p4.config.v1.p4types.P4NamedType): P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.NewType(__v))
    def clearTypeSpec: P4DataTypeSpec = copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Empty)
    def withTypeSpec(__v: p4.config.v1.p4types.P4DataTypeSpec.TypeSpec): P4DataTypeSpec = copy(typeSpec = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typeSpec.bitstring.orNull
        case 2 => typeSpec.bool.orNull
        case 3 => typeSpec.tuple.orNull
        case 4 => typeSpec.struct.orNull
        case 5 => typeSpec.header.orNull
        case 6 => typeSpec.headerUnion.orNull
        case 7 => typeSpec.headerStack.orNull
        case 8 => typeSpec.headerUnionStack.orNull
        case 9 => typeSpec.`enum`.orNull
        case 10 => typeSpec.error.orNull
        case 11 => typeSpec.serializableEnum.orNull
        case 12 => typeSpec.newType.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => typeSpec.bitstring.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => typeSpec.bool.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => typeSpec.tuple.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => typeSpec.struct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => typeSpec.header.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => typeSpec.headerUnion.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => typeSpec.headerStack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => typeSpec.headerUnionStack.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => typeSpec.`enum`.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => typeSpec.error.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => typeSpec.serializableEnum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => typeSpec.newType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4types.P4DataTypeSpec.type = p4.config.v1.p4types.P4DataTypeSpec
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4DataTypeSpec])
}

object P4DataTypeSpec extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4DataTypeSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4DataTypeSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4DataTypeSpec = {
    var __typeSpec: p4.config.v1.p4types.P4DataTypeSpec.TypeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bitstring(__typeSpec.bitstring.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4BitstringLikeTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bool(__typeSpec.bool.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4BoolType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Tuple(__typeSpec.tuple.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TupleTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Struct(__typeSpec.struct.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Header(__typeSpec.header.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnion(__typeSpec.headerUnion.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderStack(__typeSpec.headerStack.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4HeaderStackTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnionStack(__typeSpec.headerUnionStack.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4HeaderUnionStackTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Enum(__typeSpec.`enum`.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Error(__typeSpec.error.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4ErrorType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.SerializableEnum(__typeSpec.serializableEnum.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.NewType(__typeSpec.newType.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NamedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4types.P4DataTypeSpec(
        typeSpec = __typeSpec,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4DataTypeSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4types.P4DataTypeSpec(
        typeSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4BitstringLikeTypeSpec]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bitstring(_))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4BoolType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bool(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4TupleTypeSpec]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Tuple(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Struct(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Header(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnion(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4HeaderStackTypeSpec]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderStack(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionStackTypeSpec]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnionStack(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Enum(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4ErrorType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Error(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.SerializableEnum(_)))
            .orElse[p4.config.v1.p4types.P4DataTypeSpec.TypeSpec](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NamedType]]).map(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.NewType(_)))
            .getOrElse(p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4TypesProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4TypesProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4types.P4BitstringLikeTypeSpec
      case 2 => __out = p4.config.v1.p4types.P4BoolType
      case 3 => __out = p4.config.v1.p4types.P4TupleTypeSpec
      case 4 => __out = p4.config.v1.p4types.P4NamedType
      case 5 => __out = p4.config.v1.p4types.P4NamedType
      case 6 => __out = p4.config.v1.p4types.P4NamedType
      case 7 => __out = p4.config.v1.p4types.P4HeaderStackTypeSpec
      case 8 => __out = p4.config.v1.p4types.P4HeaderUnionStackTypeSpec
      case 9 => __out = p4.config.v1.p4types.P4NamedType
      case 10 => __out = p4.config.v1.p4types.P4ErrorType
      case 11 => __out = p4.config.v1.p4types.P4NamedType
      case 12 => __out = p4.config.v1.p4types.P4NamedType
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4types.P4DataTypeSpec(
    typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Empty
  )
  sealed trait TypeSpec extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isBitstring: _root_.scala.Boolean = false
    def isBool: _root_.scala.Boolean = false
    def isTuple: _root_.scala.Boolean = false
    def isStruct: _root_.scala.Boolean = false
    def isHeader: _root_.scala.Boolean = false
    def isHeaderUnion: _root_.scala.Boolean = false
    def isHeaderStack: _root_.scala.Boolean = false
    def isHeaderUnionStack: _root_.scala.Boolean = false
    def isEnum: _root_.scala.Boolean = false
    def isError: _root_.scala.Boolean = false
    def isSerializableEnum: _root_.scala.Boolean = false
    def isNewType: _root_.scala.Boolean = false
    def bitstring: _root_.scala.Option[p4.config.v1.p4types.P4BitstringLikeTypeSpec] = _root_.scala.None
    def bool: _root_.scala.Option[p4.config.v1.p4types.P4BoolType] = _root_.scala.None
    def tuple: _root_.scala.Option[p4.config.v1.p4types.P4TupleTypeSpec] = _root_.scala.None
    def struct: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    def header: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    def headerUnion: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    def headerStack: _root_.scala.Option[p4.config.v1.p4types.P4HeaderStackTypeSpec] = _root_.scala.None
    def headerUnionStack: _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionStackTypeSpec] = _root_.scala.None
    def `enum`: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    def error: _root_.scala.Option[p4.config.v1.p4types.P4ErrorType] = _root_.scala.None
    def serializableEnum: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
    def newType: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = _root_.scala.None
  }
  object TypeSpec {
    @SerialVersionUID(0L)
    case object Empty extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Bitstring(value: p4.config.v1.p4types.P4BitstringLikeTypeSpec) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4BitstringLikeTypeSpec
      override def isBitstring: _root_.scala.Boolean = true
      override def bitstring: _root_.scala.Option[p4.config.v1.p4types.P4BitstringLikeTypeSpec] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Bool(value: p4.config.v1.p4types.P4BoolType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4BoolType
      override def isBool: _root_.scala.Boolean = true
      override def bool: _root_.scala.Option[p4.config.v1.p4types.P4BoolType] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Tuple(value: p4.config.v1.p4types.P4TupleTypeSpec) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4TupleTypeSpec
      override def isTuple: _root_.scala.Boolean = true
      override def tuple: _root_.scala.Option[p4.config.v1.p4types.P4TupleTypeSpec] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Struct(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isStruct: _root_.scala.Boolean = true
      override def struct: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Header(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isHeader: _root_.scala.Boolean = true
      override def header: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class HeaderUnion(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isHeaderUnion: _root_.scala.Boolean = true
      override def headerUnion: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class HeaderStack(value: p4.config.v1.p4types.P4HeaderStackTypeSpec) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4HeaderStackTypeSpec
      override def isHeaderStack: _root_.scala.Boolean = true
      override def headerStack: _root_.scala.Option[p4.config.v1.p4types.P4HeaderStackTypeSpec] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class HeaderUnionStack(value: p4.config.v1.p4types.P4HeaderUnionStackTypeSpec) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4HeaderUnionStackTypeSpec
      override def isHeaderUnionStack: _root_.scala.Boolean = true
      override def headerUnionStack: _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionStackTypeSpec] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Enum(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isEnum: _root_.scala.Boolean = true
      override def `enum`: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class Error(value: p4.config.v1.p4types.P4ErrorType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4ErrorType
      override def isError: _root_.scala.Boolean = true
      override def error: _root_.scala.Option[p4.config.v1.p4types.P4ErrorType] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class SerializableEnum(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isSerializableEnum: _root_.scala.Boolean = true
      override def serializableEnum: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 11
    }
    @SerialVersionUID(0L)
    final case class NewType(value: p4.config.v1.p4types.P4NamedType) extends p4.config.v1.p4types.P4DataTypeSpec.TypeSpec {
      type ValueType = p4.config.v1.p4types.P4NamedType
      override def isNewType: _root_.scala.Boolean = true
      override def newType: _root_.scala.Option[p4.config.v1.p4types.P4NamedType] = Some(value)
      override def number: _root_.scala.Int = 12
    }
  }
  implicit class P4DataTypeSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4DataTypeSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4DataTypeSpec](_l) {
    def bitstring: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4BitstringLikeTypeSpec] = field(_.getBitstring)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bitstring(f_)))
    def bool: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4BoolType] = field(_.getBool)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Bool(f_)))
    def tuple: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TupleTypeSpec] = field(_.getTuple)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Tuple(f_)))
    def struct: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getStruct)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Struct(f_)))
    def header: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getHeader)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Header(f_)))
    def headerUnion: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getHeaderUnion)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnion(f_)))
    def headerStack: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4HeaderStackTypeSpec] = field(_.getHeaderStack)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderStack(f_)))
    def headerUnionStack: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4HeaderUnionStackTypeSpec] = field(_.getHeaderUnionStack)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.HeaderUnionStack(f_)))
    def `enum`: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getEnum)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Enum(f_)))
    def error: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4ErrorType] = field(_.getError)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.Error(f_)))
    def serializableEnum: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getSerializableEnum)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.SerializableEnum(f_)))
    def newType: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NamedType] = field(_.getNewType)((c_, f_) => c_.copy(typeSpec = p4.config.v1.p4types.P4DataTypeSpec.TypeSpec.NewType(f_)))
    def typeSpec: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4DataTypeSpec.TypeSpec] = field(_.typeSpec)((c_, f_) => c_.copy(typeSpec = f_))
  }
  final val BITSTRING_FIELD_NUMBER = 1
  final val BOOL_FIELD_NUMBER = 2
  final val TUPLE_FIELD_NUMBER = 3
  final val STRUCT_FIELD_NUMBER = 4
  final val HEADER_FIELD_NUMBER = 5
  final val HEADER_UNION_FIELD_NUMBER = 6
  final val HEADER_STACK_FIELD_NUMBER = 7
  final val HEADER_UNION_STACK_FIELD_NUMBER = 8
  final val ENUM_FIELD_NUMBER = 9
  final val ERROR_FIELD_NUMBER = 10
  final val SERIALIZABLE_ENUM_FIELD_NUMBER = 11
  final val NEW_TYPE_FIELD_NUMBER = 12
  def of(
    typeSpec: p4.config.v1.p4types.P4DataTypeSpec.TypeSpec
  ): _root_.p4.config.v1.p4types.P4DataTypeSpec = _root_.p4.config.v1.p4types.P4DataTypeSpec(
    typeSpec
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4DataTypeSpec])
}
