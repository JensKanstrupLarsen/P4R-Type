// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

@SerialVersionUID(0L)
final case class Expression(
    value: p4.config.v1.p4types.Expression.Value = p4.config.v1.p4types.Expression.Value.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Expression] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (value.stringValue.isDefined) {
        val __value = value.stringValue.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (value.int64Value.isDefined) {
        val __value = value.int64Value.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (value.boolValue.isDefined) {
        val __value = value.boolValue.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      value.stringValue.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      value.int64Value.foreach { __v =>
        val __m = __v
        _output__.writeInt64(2, __m)
      };
      value.boolValue.foreach { __v =>
        val __m = __v
        _output__.writeBool(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getStringValue: _root_.scala.Predef.String = value.stringValue.getOrElse("")
    def withStringValue(__v: _root_.scala.Predef.String): Expression = copy(value = p4.config.v1.p4types.Expression.Value.StringValue(__v))
    def getInt64Value: _root_.scala.Long = value.int64Value.getOrElse(0L)
    def withInt64Value(__v: _root_.scala.Long): Expression = copy(value = p4.config.v1.p4types.Expression.Value.Int64Value(__v))
    def getBoolValue: _root_.scala.Boolean = value.boolValue.getOrElse(false)
    def withBoolValue(__v: _root_.scala.Boolean): Expression = copy(value = p4.config.v1.p4types.Expression.Value.BoolValue(__v))
    def clearValue: Expression = copy(value = p4.config.v1.p4types.Expression.Value.Empty)
    def withValue(__v: p4.config.v1.p4types.Expression.Value): Expression = copy(value = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.stringValue.orNull
        case 2 => value.int64Value.orNull
        case 3 => value.boolValue.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.stringValue.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.int64Value.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => value.boolValue.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4types.Expression.type = p4.config.v1.p4types.Expression
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.Expression])
}

object Expression extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.Expression] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.Expression] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.Expression = {
    var __value: p4.config.v1.p4types.Expression.Value = p4.config.v1.p4types.Expression.Value.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __value = p4.config.v1.p4types.Expression.Value.StringValue(_input__.readStringRequireUtf8())
        case 16 =>
          __value = p4.config.v1.p4types.Expression.Value.Int64Value(_input__.readInt64())
        case 24 =>
          __value = p4.config.v1.p4types.Expression.Value.BoolValue(_input__.readBool())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4types.Expression(
        value = __value,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.Expression] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4types.Expression(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(p4.config.v1.p4types.Expression.Value.StringValue(_))
            .orElse[p4.config.v1.p4types.Expression.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(p4.config.v1.p4types.Expression.Value.Int64Value(_)))
            .orElse[p4.config.v1.p4types.Expression.Value](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]).map(p4.config.v1.p4types.Expression.Value.BoolValue(_)))
            .getOrElse(p4.config.v1.p4types.Expression.Value.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4TypesProto.javaDescriptor.getMessageTypes().get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4TypesProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4types.Expression(
    value = p4.config.v1.p4types.Expression.Value.Empty
  )
  sealed trait Value extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isStringValue: _root_.scala.Boolean = false
    def isInt64Value: _root_.scala.Boolean = false
    def isBoolValue: _root_.scala.Boolean = false
    def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def int64Value: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    def boolValue: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
  }
  object Value {
    @SerialVersionUID(0L)
    case object Empty extends p4.config.v1.p4types.Expression.Value {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class StringValue(value: _root_.scala.Predef.String) extends p4.config.v1.p4types.Expression.Value {
      type ValueType = _root_.scala.Predef.String
      override def isStringValue: _root_.scala.Boolean = true
      override def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Int64Value(value: _root_.scala.Long) extends p4.config.v1.p4types.Expression.Value {
      type ValueType = _root_.scala.Long
      override def isInt64Value: _root_.scala.Boolean = true
      override def int64Value: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class BoolValue(value: _root_.scala.Boolean) extends p4.config.v1.p4types.Expression.Value {
      type ValueType = _root_.scala.Boolean
      override def isBoolValue: _root_.scala.Boolean = true
      override def boolValue: _root_.scala.Option[_root_.scala.Boolean] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class ExpressionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.Expression]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.Expression](_l) {
    def stringValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStringValue)((c_, f_) => c_.copy(value = p4.config.v1.p4types.Expression.Value.StringValue(f_)))
    def int64Value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getInt64Value)((c_, f_) => c_.copy(value = p4.config.v1.p4types.Expression.Value.Int64Value(f_)))
    def boolValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getBoolValue)((c_, f_) => c_.copy(value = p4.config.v1.p4types.Expression.Value.BoolValue(f_)))
    def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.Expression.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val STRING_VALUE_FIELD_NUMBER = 1
  final val INT64_VALUE_FIELD_NUMBER = 2
  final val BOOL_VALUE_FIELD_NUMBER = 3
  def of(
    value: p4.config.v1.p4types.Expression.Value
  ): _root_.p4.config.v1.p4types.Expression = _root_.p4.config.v1.p4types.Expression(
    value
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.Expression])
}
