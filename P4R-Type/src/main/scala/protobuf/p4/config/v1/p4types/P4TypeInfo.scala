// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

/** These P4 types (struct, header_type, header_union and enum) are guaranteed to
  * have a fully-qualified name (e.g. you cannot use an anonymous struct to
  * declare a variable like in C). Instead of duplicating the type spec for these
  * every time the type is used, we include the type spec once in this P4TypeInfo
  * message and refer to the types by name in the P4DataTypeSpec message. We also
  * support annotations for these type specs which can be useful, e.g. to
  * identify well-known headers (such as ipv4).
  */
@SerialVersionUID(0L)
final case class P4TypeInfo(
    structs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    headers: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    headerUnions: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    enums: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    error: _root_.scala.Option[p4.config.v1.p4types.P4ErrorTypeSpec] = _root_.scala.None,
    serializableEnums: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    newTypes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[P4TypeInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      structs.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      headers.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      headerUnions.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      enums.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (error.isDefined) {
        val __value = error.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      serializableEnums.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      newTypes.foreach { __item =>
        val __value = p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      structs.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toBase(__v)
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      headers.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toBase(__v)
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      headerUnions.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toBase(__v)
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      enums.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toBase(__v)
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      error.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      serializableEnums.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toBase(__v)
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      newTypes.foreach { __v =>
        val __m = p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toBase(__v)
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearStructs = copy(structs = _root_.scala.collection.immutable.Map.empty)
    def addStructs(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec) *): P4TypeInfo = addAllStructs(__vs)
    def addAllStructs(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec)]): P4TypeInfo = copy(structs = structs ++ __vs)
    def withStructs(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec]): P4TypeInfo = copy(structs = __v)
    def clearHeaders = copy(headers = _root_.scala.collection.immutable.Map.empty)
    def addHeaders(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec) *): P4TypeInfo = addAllHeaders(__vs)
    def addAllHeaders(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec)]): P4TypeInfo = copy(headers = headers ++ __vs)
    def withHeaders(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec]): P4TypeInfo = copy(headers = __v)
    def clearHeaderUnions = copy(headerUnions = _root_.scala.collection.immutable.Map.empty)
    def addHeaderUnions(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec) *): P4TypeInfo = addAllHeaderUnions(__vs)
    def addAllHeaderUnions(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec)]): P4TypeInfo = copy(headerUnions = headerUnions ++ __vs)
    def withHeaderUnions(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec]): P4TypeInfo = copy(headerUnions = __v)
    def clearEnums = copy(enums = _root_.scala.collection.immutable.Map.empty)
    def addEnums(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec) *): P4TypeInfo = addAllEnums(__vs)
    def addAllEnums(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec)]): P4TypeInfo = copy(enums = enums ++ __vs)
    def withEnums(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec]): P4TypeInfo = copy(enums = __v)
    def getError: p4.config.v1.p4types.P4ErrorTypeSpec = error.getOrElse(p4.config.v1.p4types.P4ErrorTypeSpec.defaultInstance)
    def clearError: P4TypeInfo = copy(error = _root_.scala.None)
    def withError(__v: p4.config.v1.p4types.P4ErrorTypeSpec): P4TypeInfo = copy(error = Option(__v))
    def clearSerializableEnums = copy(serializableEnums = _root_.scala.collection.immutable.Map.empty)
    def addSerializableEnums(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec) *): P4TypeInfo = addAllSerializableEnums(__vs)
    def addAllSerializableEnums(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec)]): P4TypeInfo = copy(serializableEnums = serializableEnums ++ __vs)
    def withSerializableEnums(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec]): P4TypeInfo = copy(serializableEnums = __v)
    def clearNewTypes = copy(newTypes = _root_.scala.collection.immutable.Map.empty)
    def addNewTypes(__vs: (_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec) *): P4TypeInfo = addAllNewTypes(__vs)
    def addAllNewTypes(__vs: Iterable[(_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec)]): P4TypeInfo = copy(newTypes = newTypes ++ __vs)
    def withNewTypes(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec]): P4TypeInfo = copy(newTypes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => structs.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toBase(_)).toSeq
        case 2 => headers.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toBase(_)).toSeq
        case 3 => headerUnions.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toBase(_)).toSeq
        case 4 => enums.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toBase(_)).toSeq
        case 5 => error.orNull
        case 6 => serializableEnums.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toBase(_)).toSeq
        case 7 => newTypes.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(structs.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toBase(_).toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(headers.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toBase(_).toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(headerUnions.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toBase(_).toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(enums.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toBase(_).toPMessage).toVector)
        case 5 => error.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PRepeated(serializableEnums.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toBase(_).toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(newTypes.iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4types.P4TypeInfo.type = p4.config.v1.p4types.P4TypeInfo
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo])
}

object P4TypeInfo extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo = {
    val __structs: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec]
    val __headers: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec]
    val __headerUnions: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec]
    val __enums: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec]
    var __error: _root_.scala.Option[p4.config.v1.p4types.P4ErrorTypeSpec] = _root_.scala.None
    val __serializableEnums: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec]
    val __newTypes: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __structs += p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.StructsEntry](_input__))
        case 18 =>
          __headers += p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.HeadersEntry](_input__))
        case 26 =>
          __headerUnions += p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry](_input__))
        case 34 =>
          __enums += p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.EnumsEntry](_input__))
        case 42 =>
          __error = Option(__error.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4ErrorTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __serializableEnums += p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry](_input__))
        case 58 =>
          __newTypes += p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toCustom(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4types.P4TypeInfo(
        structs = __structs.result(),
        headers = __headers.result(),
        headerUnions = __headerUnions.result(),
        enums = __enums.result(),
        error = __error,
        serializableEnums = __serializableEnums.result(),
        newTypes = __newTypes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4types.P4TypeInfo(
        structs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.StructsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_structs.toCustom(_)).toMap,
        headers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.HeadersEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headers.toCustom(_)).toMap,
        headerUnions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_headerUnions.toCustom(_)).toMap,
        enums = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.EnumsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_enums.toCustom(_)).toMap,
        error = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4ErrorTypeSpec]]),
        serializableEnums = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_serializableEnums.toCustom(_)).toMap,
        newTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(p4.config.v1.p4types.P4TypeInfo._typemapper_newTypes.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4TypesProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4TypesProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4types.P4TypeInfo.StructsEntry
      case 2 => __out = p4.config.v1.p4types.P4TypeInfo.HeadersEntry
      case 3 => __out = p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry
      case 4 => __out = p4.config.v1.p4types.P4TypeInfo.EnumsEntry
      case 5 => __out = p4.config.v1.p4types.P4ErrorTypeSpec
      case 6 => __out = p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry
      case 7 => __out = p4.config.v1.p4types.P4TypeInfo.NewTypesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.p4.config.v1.p4types.P4TypeInfo.StructsEntry,
      _root_.p4.config.v1.p4types.P4TypeInfo.HeadersEntry,
      _root_.p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry,
      _root_.p4.config.v1.p4types.P4TypeInfo.EnumsEntry,
      _root_.p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry,
      _root_.p4.config.v1.p4types.P4TypeInfo.NewTypesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo(
    structs = _root_.scala.collection.immutable.Map.empty,
    headers = _root_.scala.collection.immutable.Map.empty,
    headerUnions = _root_.scala.collection.immutable.Map.empty,
    enums = _root_.scala.collection.immutable.Map.empty,
    error = _root_.scala.None,
    serializableEnums = _root_.scala.collection.immutable.Map.empty,
    newTypes = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class StructsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4StructTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StructsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): StructsEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4StructTypeSpec = value.getOrElse(p4.config.v1.p4types.P4StructTypeSpec.defaultInstance)
      def clearValue: StructsEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4StructTypeSpec): StructsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.StructsEntry.type = p4.config.v1.p4types.P4TypeInfo.StructsEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.StructsEntry])
  }
  
  object StructsEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.StructsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.StructsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.StructsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4StructTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4StructTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.StructsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.StructsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.StructsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4StructTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4StructTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.StructsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class StructsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.StructsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.StructsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4StructTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4StructTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.StructsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.StructsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.StructsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4StructTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.StructsEntry = _root_.p4.config.v1.p4types.P4TypeInfo.StructsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.StructsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class HeadersEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HeadersEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): HeadersEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4HeaderTypeSpec = value.getOrElse(p4.config.v1.p4types.P4HeaderTypeSpec.defaultInstance)
      def clearValue: HeadersEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4HeaderTypeSpec): HeadersEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.HeadersEntry.type = p4.config.v1.p4types.P4TypeInfo.HeadersEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.HeadersEntry])
  }
  
  object HeadersEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.HeadersEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.HeadersEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.HeadersEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4HeaderTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.HeadersEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.HeadersEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.HeadersEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4HeaderTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4HeaderTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.HeadersEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class HeadersEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.HeadersEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.HeadersEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4HeaderTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4HeaderTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeadersEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeadersEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.HeadersEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.HeadersEntry = _root_.p4.config.v1.p4types.P4TypeInfo.HeadersEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.HeadersEntry])
  }
  
  @SerialVersionUID(0L)
  final case class HeaderUnionsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HeaderUnionsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): HeaderUnionsEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4HeaderUnionTypeSpec = value.getOrElse(p4.config.v1.p4types.P4HeaderUnionTypeSpec.defaultInstance)
      def clearValue: HeaderUnionsEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4HeaderUnionTypeSpec): HeaderUnionsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry.type = p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.HeaderUnionsEntry])
  }
  
  object HeaderUnionsEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4HeaderUnionTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4HeaderUnionTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class HeaderUnionsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4HeaderUnionTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4HeaderUnionTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry = _root_.p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.HeaderUnionsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class EnumsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4EnumTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EnumsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): EnumsEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4EnumTypeSpec = value.getOrElse(p4.config.v1.p4types.P4EnumTypeSpec.defaultInstance)
      def clearValue: EnumsEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4EnumTypeSpec): EnumsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.EnumsEntry.type = p4.config.v1.p4types.P4TypeInfo.EnumsEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.EnumsEntry])
  }
  
  object EnumsEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.EnumsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.EnumsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.EnumsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4EnumTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4EnumTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.EnumsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.EnumsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.EnumsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4EnumTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4EnumTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.EnumsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class EnumsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.EnumsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.EnumsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4EnumTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4EnumTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.EnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.EnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.EnumsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4EnumTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.EnumsEntry = _root_.p4.config.v1.p4types.P4TypeInfo.EnumsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.EnumsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class SerializableEnumsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4SerializableEnumTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SerializableEnumsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): SerializableEnumsEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4SerializableEnumTypeSpec = value.getOrElse(p4.config.v1.p4types.P4SerializableEnumTypeSpec.defaultInstance)
      def clearValue: SerializableEnumsEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4SerializableEnumTypeSpec): SerializableEnumsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry.type = p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.SerializableEnumsEntry])
  }
  
  object SerializableEnumsEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4SerializableEnumTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4SerializableEnumTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4SerializableEnumTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4SerializableEnumTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class SerializableEnumsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4SerializableEnumTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4SerializableEnumTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4SerializableEnumTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry = _root_.p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.SerializableEnumsEntry])
  }
  
  @SerialVersionUID(0L)
  final case class NewTypesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[p4.config.v1.p4types.P4NewTypeSpec] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[NewTypesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): NewTypesEntry = copy(key = __v)
      def getValue: p4.config.v1.p4types.P4NewTypeSpec = value.getOrElse(p4.config.v1.p4types.P4NewTypeSpec.defaultInstance)
      def clearValue: NewTypesEntry = copy(value = _root_.scala.None)
      def withValue(__v: p4.config.v1.p4types.P4NewTypeSpec): NewTypesEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.config.v1.p4types.P4TypeInfo.NewTypesEntry.type = p4.config.v1.p4types.P4TypeInfo.NewTypesEntry
      // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4TypeInfo.NewTypesEntry])
  }
  
  object NewTypesEntry extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4types.P4TypeInfo.NewTypesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[p4.config.v1.p4types.P4NewTypeSpec] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4NewTypeSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.config.v1.p4types.P4TypeInfo.NewTypesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.config.v1.p4types.P4TypeInfo.NewTypesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4NewTypeSpec]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.config.v1.p4types.P4TypeInfo.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = p4.config.v1.p4types.P4NewTypeSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.config.v1.p4types.P4TypeInfo.NewTypesEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class NewTypesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo.NewTypesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo.NewTypesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4NewTypeSpec] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4NewTypeSpec]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec)] =
      _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec)](__m => (__m.key, __m.getValue))(__p => p4.config.v1.p4types.P4TypeInfo.NewTypesEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[p4.config.v1.p4types.P4NewTypeSpec]
    ): _root_.p4.config.v1.p4types.P4TypeInfo.NewTypesEntry = _root_.p4.config.v1.p4types.P4TypeInfo.NewTypesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo.NewTypesEntry])
  }
  
  implicit class P4TypeInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4types.P4TypeInfo](_l) {
    def structs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec]] = field(_.structs)((c_, f_) => c_.copy(structs = f_))
    def headers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec]] = field(_.headers)((c_, f_) => c_.copy(headers = f_))
    def headerUnions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec]] = field(_.headerUnions)((c_, f_) => c_.copy(headerUnions = f_))
    def enums: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec]] = field(_.enums)((c_, f_) => c_.copy(enums = f_))
    def error: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4ErrorTypeSpec] = field(_.getError)((c_, f_) => c_.copy(error = Option(f_)))
    def optionalError: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4ErrorTypeSpec]] = field(_.error)((c_, f_) => c_.copy(error = f_))
    def serializableEnums: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec]] = field(_.serializableEnums)((c_, f_) => c_.copy(serializableEnums = f_))
    def newTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec]] = field(_.newTypes)((c_, f_) => c_.copy(newTypes = f_))
  }
  final val STRUCTS_FIELD_NUMBER = 1
  final val HEADERS_FIELD_NUMBER = 2
  final val HEADER_UNIONS_FIELD_NUMBER = 3
  final val ENUMS_FIELD_NUMBER = 4
  final val ERROR_FIELD_NUMBER = 5
  final val SERIALIZABLE_ENUMS_FIELD_NUMBER = 6
  final val NEW_TYPES_FIELD_NUMBER = 7
  @transient
  private[p4types] val _typemapper_structs: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.StructsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.StructsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec)]]
  @transient
  private[p4types] val _typemapper_headers: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeadersEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeadersEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec)]]
  @transient
  private[p4types] val _typemapper_headerUnions: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.HeaderUnionsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec)]]
  @transient
  private[p4types] val _typemapper_enums: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.EnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.EnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec)]]
  @transient
  private[p4types] val _typemapper_serializableEnums: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.SerializableEnumsEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec)]]
  @transient
  private[p4types] val _typemapper_newTypes: _root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec)] = implicitly[_root_.scalapb.TypeMapper[p4.config.v1.p4types.P4TypeInfo.NewTypesEntry, (_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec)]]
  def of(
    structs: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4StructTypeSpec],
    headers: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderTypeSpec],
    headerUnions: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4HeaderUnionTypeSpec],
    enums: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4EnumTypeSpec],
    error: _root_.scala.Option[p4.config.v1.p4types.P4ErrorTypeSpec],
    serializableEnums: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4SerializableEnumTypeSpec],
    newTypes: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, p4.config.v1.p4types.P4NewTypeSpec]
  ): _root_.p4.config.v1.p4types.P4TypeInfo = _root_.p4.config.v1.p4types.P4TypeInfo(
    structs,
    headers,
    headerUnions,
    enums,
    error,
    serializableEnums,
    newTypes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4TypeInfo])
}
