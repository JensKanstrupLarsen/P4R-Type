// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

@SerialVersionUID(0L)
final case class P4Info(
    pkgInfo: _root_.scala.Option[p4.config.v1.p4info.PkgInfo] = _root_.scala.None,
    tables: _root_.scala.Seq[p4.config.v1.p4info.Table] = _root_.scala.Seq.empty,
    actions: _root_.scala.Seq[p4.config.v1.p4info.Action] = _root_.scala.Seq.empty,
    actionProfiles: _root_.scala.Seq[p4.config.v1.p4info.ActionProfile] = _root_.scala.Seq.empty,
    counters: _root_.scala.Seq[p4.config.v1.p4info.Counter] = _root_.scala.Seq.empty,
    directCounters: _root_.scala.Seq[p4.config.v1.p4info.DirectCounter] = _root_.scala.Seq.empty,
    meters: _root_.scala.Seq[p4.config.v1.p4info.Meter] = _root_.scala.Seq.empty,
    directMeters: _root_.scala.Seq[p4.config.v1.p4info.DirectMeter] = _root_.scala.Seq.empty,
    controllerPacketMetadata: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata] = _root_.scala.Seq.empty,
    valueSets: _root_.scala.Seq[p4.config.v1.p4info.ValueSet] = _root_.scala.Seq.empty,
    registers: _root_.scala.Seq[p4.config.v1.p4info.Register] = _root_.scala.Seq.empty,
    digests: _root_.scala.Seq[p4.config.v1.p4info.Digest] = _root_.scala.Seq.empty,
    externs: _root_.scala.Seq[p4.config.v1.p4info.Extern] = _root_.scala.Seq.empty,
    typeInfo: _root_.scala.Option[p4.config.v1.p4types.P4TypeInfo] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[P4Info] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (pkgInfo.isDefined) {
        val __value = pkgInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      tables.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      actions.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      actionProfiles.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      counters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      directCounters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      meters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      directMeters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      controllerPacketMetadata.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      valueSets.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      registers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      digests.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      externs.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (typeInfo.isDefined) {
        val __value = typeInfo.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      pkgInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tables.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      actions.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      actionProfiles.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      counters.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      directCounters.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      meters.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      directMeters.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      controllerPacketMetadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      valueSets.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      registers.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      digests.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      externs.foreach { __v =>
        val __m = __v
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      typeInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(200, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getPkgInfo: p4.config.v1.p4info.PkgInfo = pkgInfo.getOrElse(p4.config.v1.p4info.PkgInfo.defaultInstance)
    def clearPkgInfo: P4Info = copy(pkgInfo = _root_.scala.None)
    def withPkgInfo(__v: p4.config.v1.p4info.PkgInfo): P4Info = copy(pkgInfo = Option(__v))
    def clearTables = copy(tables = _root_.scala.Seq.empty)
    def addTables(__vs: p4.config.v1.p4info.Table *): P4Info = addAllTables(__vs)
    def addAllTables(__vs: Iterable[p4.config.v1.p4info.Table]): P4Info = copy(tables = tables ++ __vs)
    def withTables(__v: _root_.scala.Seq[p4.config.v1.p4info.Table]): P4Info = copy(tables = __v)
    def clearActions = copy(actions = _root_.scala.Seq.empty)
    def addActions(__vs: p4.config.v1.p4info.Action *): P4Info = addAllActions(__vs)
    def addAllActions(__vs: Iterable[p4.config.v1.p4info.Action]): P4Info = copy(actions = actions ++ __vs)
    def withActions(__v: _root_.scala.Seq[p4.config.v1.p4info.Action]): P4Info = copy(actions = __v)
    def clearActionProfiles = copy(actionProfiles = _root_.scala.Seq.empty)
    def addActionProfiles(__vs: p4.config.v1.p4info.ActionProfile *): P4Info = addAllActionProfiles(__vs)
    def addAllActionProfiles(__vs: Iterable[p4.config.v1.p4info.ActionProfile]): P4Info = copy(actionProfiles = actionProfiles ++ __vs)
    def withActionProfiles(__v: _root_.scala.Seq[p4.config.v1.p4info.ActionProfile]): P4Info = copy(actionProfiles = __v)
    def clearCounters = copy(counters = _root_.scala.Seq.empty)
    def addCounters(__vs: p4.config.v1.p4info.Counter *): P4Info = addAllCounters(__vs)
    def addAllCounters(__vs: Iterable[p4.config.v1.p4info.Counter]): P4Info = copy(counters = counters ++ __vs)
    def withCounters(__v: _root_.scala.Seq[p4.config.v1.p4info.Counter]): P4Info = copy(counters = __v)
    def clearDirectCounters = copy(directCounters = _root_.scala.Seq.empty)
    def addDirectCounters(__vs: p4.config.v1.p4info.DirectCounter *): P4Info = addAllDirectCounters(__vs)
    def addAllDirectCounters(__vs: Iterable[p4.config.v1.p4info.DirectCounter]): P4Info = copy(directCounters = directCounters ++ __vs)
    def withDirectCounters(__v: _root_.scala.Seq[p4.config.v1.p4info.DirectCounter]): P4Info = copy(directCounters = __v)
    def clearMeters = copy(meters = _root_.scala.Seq.empty)
    def addMeters(__vs: p4.config.v1.p4info.Meter *): P4Info = addAllMeters(__vs)
    def addAllMeters(__vs: Iterable[p4.config.v1.p4info.Meter]): P4Info = copy(meters = meters ++ __vs)
    def withMeters(__v: _root_.scala.Seq[p4.config.v1.p4info.Meter]): P4Info = copy(meters = __v)
    def clearDirectMeters = copy(directMeters = _root_.scala.Seq.empty)
    def addDirectMeters(__vs: p4.config.v1.p4info.DirectMeter *): P4Info = addAllDirectMeters(__vs)
    def addAllDirectMeters(__vs: Iterable[p4.config.v1.p4info.DirectMeter]): P4Info = copy(directMeters = directMeters ++ __vs)
    def withDirectMeters(__v: _root_.scala.Seq[p4.config.v1.p4info.DirectMeter]): P4Info = copy(directMeters = __v)
    def clearControllerPacketMetadata = copy(controllerPacketMetadata = _root_.scala.Seq.empty)
    def addControllerPacketMetadata(__vs: p4.config.v1.p4info.ControllerPacketMetadata *): P4Info = addAllControllerPacketMetadata(__vs)
    def addAllControllerPacketMetadata(__vs: Iterable[p4.config.v1.p4info.ControllerPacketMetadata]): P4Info = copy(controllerPacketMetadata = controllerPacketMetadata ++ __vs)
    def withControllerPacketMetadata(__v: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata]): P4Info = copy(controllerPacketMetadata = __v)
    def clearValueSets = copy(valueSets = _root_.scala.Seq.empty)
    def addValueSets(__vs: p4.config.v1.p4info.ValueSet *): P4Info = addAllValueSets(__vs)
    def addAllValueSets(__vs: Iterable[p4.config.v1.p4info.ValueSet]): P4Info = copy(valueSets = valueSets ++ __vs)
    def withValueSets(__v: _root_.scala.Seq[p4.config.v1.p4info.ValueSet]): P4Info = copy(valueSets = __v)
    def clearRegisters = copy(registers = _root_.scala.Seq.empty)
    def addRegisters(__vs: p4.config.v1.p4info.Register *): P4Info = addAllRegisters(__vs)
    def addAllRegisters(__vs: Iterable[p4.config.v1.p4info.Register]): P4Info = copy(registers = registers ++ __vs)
    def withRegisters(__v: _root_.scala.Seq[p4.config.v1.p4info.Register]): P4Info = copy(registers = __v)
    def clearDigests = copy(digests = _root_.scala.Seq.empty)
    def addDigests(__vs: p4.config.v1.p4info.Digest *): P4Info = addAllDigests(__vs)
    def addAllDigests(__vs: Iterable[p4.config.v1.p4info.Digest]): P4Info = copy(digests = digests ++ __vs)
    def withDigests(__v: _root_.scala.Seq[p4.config.v1.p4info.Digest]): P4Info = copy(digests = __v)
    def clearExterns = copy(externs = _root_.scala.Seq.empty)
    def addExterns(__vs: p4.config.v1.p4info.Extern *): P4Info = addAllExterns(__vs)
    def addAllExterns(__vs: Iterable[p4.config.v1.p4info.Extern]): P4Info = copy(externs = externs ++ __vs)
    def withExterns(__v: _root_.scala.Seq[p4.config.v1.p4info.Extern]): P4Info = copy(externs = __v)
    def getTypeInfo: p4.config.v1.p4types.P4TypeInfo = typeInfo.getOrElse(p4.config.v1.p4types.P4TypeInfo.defaultInstance)
    def clearTypeInfo: P4Info = copy(typeInfo = _root_.scala.None)
    def withTypeInfo(__v: p4.config.v1.p4types.P4TypeInfo): P4Info = copy(typeInfo = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => pkgInfo.orNull
        case 2 => tables
        case 3 => actions
        case 4 => actionProfiles
        case 5 => counters
        case 6 => directCounters
        case 7 => meters
        case 8 => directMeters
        case 9 => controllerPacketMetadata
        case 10 => valueSets
        case 11 => registers
        case 12 => digests
        case 100 => externs
        case 200 => typeInfo.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => pkgInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(tables.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(actions.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(actionProfiles.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(counters.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(directCounters.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(meters.iterator.map(_.toPMessage).toVector)
        case 8 => _root_.scalapb.descriptors.PRepeated(directMeters.iterator.map(_.toPMessage).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(controllerPacketMetadata.iterator.map(_.toPMessage).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(valueSets.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(registers.iterator.map(_.toPMessage).toVector)
        case 12 => _root_.scalapb.descriptors.PRepeated(digests.iterator.map(_.toPMessage).toVector)
        case 100 => _root_.scalapb.descriptors.PRepeated(externs.iterator.map(_.toPMessage).toVector)
        case 200 => typeInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.P4Info.type = p4.config.v1.p4info.P4Info
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.P4Info])
}

object P4Info extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.P4Info] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.P4Info] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.P4Info = {
    var __pkgInfo: _root_.scala.Option[p4.config.v1.p4info.PkgInfo] = _root_.scala.None
    val __tables: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Table] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Table]
    val __actions: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Action] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Action]
    val __actionProfiles: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ActionProfile] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ActionProfile]
    val __counters: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Counter] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Counter]
    val __directCounters: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.DirectCounter] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.DirectCounter]
    val __meters: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Meter] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Meter]
    val __directMeters: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.DirectMeter] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.DirectMeter]
    val __controllerPacketMetadata: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ControllerPacketMetadata] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ControllerPacketMetadata]
    val __valueSets: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ValueSet] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.ValueSet]
    val __registers: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Register] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Register]
    val __digests: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Digest] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Digest]
    val __externs: _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Extern] = new _root_.scala.collection.immutable.VectorBuilder[p4.config.v1.p4info.Extern]
    var __typeInfo: _root_.scala.Option[p4.config.v1.p4types.P4TypeInfo] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __pkgInfo = Option(__pkgInfo.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.PkgInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __tables += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Table](_input__)
        case 26 =>
          __actions += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Action](_input__)
        case 34 =>
          __actionProfiles += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.ActionProfile](_input__)
        case 42 =>
          __counters += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Counter](_input__)
        case 50 =>
          __directCounters += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.DirectCounter](_input__)
        case 58 =>
          __meters += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Meter](_input__)
        case 66 =>
          __directMeters += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.DirectMeter](_input__)
        case 74 =>
          __controllerPacketMetadata += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.ControllerPacketMetadata](_input__)
        case 82 =>
          __valueSets += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.ValueSet](_input__)
        case 90 =>
          __registers += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Register](_input__)
        case 98 =>
          __digests += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Digest](_input__)
        case 802 =>
          __externs += _root_.scalapb.LiteParser.readMessage[p4.config.v1.p4info.Extern](_input__)
        case 1602 =>
          __typeInfo = Option(__typeInfo.fold(_root_.scalapb.LiteParser.readMessage[p4.config.v1.p4types.P4TypeInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.P4Info(
        pkgInfo = __pkgInfo,
        tables = __tables.result(),
        actions = __actions.result(),
        actionProfiles = __actionProfiles.result(),
        counters = __counters.result(),
        directCounters = __directCounters.result(),
        meters = __meters.result(),
        directMeters = __directMeters.result(),
        controllerPacketMetadata = __controllerPacketMetadata.result(),
        valueSets = __valueSets.result(),
        registers = __registers.result(),
        digests = __digests.result(),
        externs = __externs.result(),
        typeInfo = __typeInfo,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.P4Info] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.P4Info(
        pkgInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4info.PkgInfo]]),
        tables = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Table]]).getOrElse(_root_.scala.Seq.empty),
        actions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Action]]).getOrElse(_root_.scala.Seq.empty),
        actionProfiles = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.ActionProfile]]).getOrElse(_root_.scala.Seq.empty),
        counters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Counter]]).getOrElse(_root_.scala.Seq.empty),
        directCounters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.DirectCounter]]).getOrElse(_root_.scala.Seq.empty),
        meters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Meter]]).getOrElse(_root_.scala.Seq.empty),
        directMeters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.DirectMeter]]).getOrElse(_root_.scala.Seq.empty),
        controllerPacketMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata]]).getOrElse(_root_.scala.Seq.empty),
        valueSets = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.ValueSet]]).getOrElse(_root_.scala.Seq.empty),
        registers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Register]]).getOrElse(_root_.scala.Seq.empty),
        digests = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Digest]]).getOrElse(_root_.scala.Seq.empty),
        externs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).map(_.as[_root_.scala.Seq[p4.config.v1.p4info.Extern]]).getOrElse(_root_.scala.Seq.empty),
        typeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(200).get).flatMap(_.as[_root_.scala.Option[p4.config.v1.p4types.P4TypeInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.config.v1.p4info.PkgInfo
      case 2 => __out = p4.config.v1.p4info.Table
      case 3 => __out = p4.config.v1.p4info.Action
      case 4 => __out = p4.config.v1.p4info.ActionProfile
      case 5 => __out = p4.config.v1.p4info.Counter
      case 6 => __out = p4.config.v1.p4info.DirectCounter
      case 7 => __out = p4.config.v1.p4info.Meter
      case 8 => __out = p4.config.v1.p4info.DirectMeter
      case 9 => __out = p4.config.v1.p4info.ControllerPacketMetadata
      case 10 => __out = p4.config.v1.p4info.ValueSet
      case 11 => __out = p4.config.v1.p4info.Register
      case 12 => __out = p4.config.v1.p4info.Digest
      case 100 => __out = p4.config.v1.p4info.Extern
      case 200 => __out = p4.config.v1.p4types.P4TypeInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.config.v1.p4info.P4Info(
    pkgInfo = _root_.scala.None,
    tables = _root_.scala.Seq.empty,
    actions = _root_.scala.Seq.empty,
    actionProfiles = _root_.scala.Seq.empty,
    counters = _root_.scala.Seq.empty,
    directCounters = _root_.scala.Seq.empty,
    meters = _root_.scala.Seq.empty,
    directMeters = _root_.scala.Seq.empty,
    controllerPacketMetadata = _root_.scala.Seq.empty,
    valueSets = _root_.scala.Seq.empty,
    registers = _root_.scala.Seq.empty,
    digests = _root_.scala.Seq.empty,
    externs = _root_.scala.Seq.empty,
    typeInfo = _root_.scala.None
  )
  implicit class P4InfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.P4Info]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.P4Info](_l) {
    def pkgInfo: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.PkgInfo] = field(_.getPkgInfo)((c_, f_) => c_.copy(pkgInfo = Option(f_)))
    def optionalPkgInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4info.PkgInfo]] = field(_.pkgInfo)((c_, f_) => c_.copy(pkgInfo = f_))
    def tables: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Table]] = field(_.tables)((c_, f_) => c_.copy(tables = f_))
    def actions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Action]] = field(_.actions)((c_, f_) => c_.copy(actions = f_))
    def actionProfiles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.ActionProfile]] = field(_.actionProfiles)((c_, f_) => c_.copy(actionProfiles = f_))
    def counters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Counter]] = field(_.counters)((c_, f_) => c_.copy(counters = f_))
    def directCounters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.DirectCounter]] = field(_.directCounters)((c_, f_) => c_.copy(directCounters = f_))
    def meters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Meter]] = field(_.meters)((c_, f_) => c_.copy(meters = f_))
    def directMeters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.DirectMeter]] = field(_.directMeters)((c_, f_) => c_.copy(directMeters = f_))
    def controllerPacketMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata]] = field(_.controllerPacketMetadata)((c_, f_) => c_.copy(controllerPacketMetadata = f_))
    def valueSets: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.ValueSet]] = field(_.valueSets)((c_, f_) => c_.copy(valueSets = f_))
    def registers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Register]] = field(_.registers)((c_, f_) => c_.copy(registers = f_))
    def digests: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Digest]] = field(_.digests)((c_, f_) => c_.copy(digests = f_))
    def externs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.config.v1.p4info.Extern]] = field(_.externs)((c_, f_) => c_.copy(externs = f_))
    def typeInfo: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4types.P4TypeInfo] = field(_.getTypeInfo)((c_, f_) => c_.copy(typeInfo = Option(f_)))
    def optionalTypeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.config.v1.p4types.P4TypeInfo]] = field(_.typeInfo)((c_, f_) => c_.copy(typeInfo = f_))
  }
  final val PKG_INFO_FIELD_NUMBER = 1
  final val TABLES_FIELD_NUMBER = 2
  final val ACTIONS_FIELD_NUMBER = 3
  final val ACTION_PROFILES_FIELD_NUMBER = 4
  final val COUNTERS_FIELD_NUMBER = 5
  final val DIRECT_COUNTERS_FIELD_NUMBER = 6
  final val METERS_FIELD_NUMBER = 7
  final val DIRECT_METERS_FIELD_NUMBER = 8
  final val CONTROLLER_PACKET_METADATA_FIELD_NUMBER = 9
  final val VALUE_SETS_FIELD_NUMBER = 10
  final val REGISTERS_FIELD_NUMBER = 11
  final val DIGESTS_FIELD_NUMBER = 12
  final val EXTERNS_FIELD_NUMBER = 100
  final val TYPE_INFO_FIELD_NUMBER = 200
  def of(
    pkgInfo: _root_.scala.Option[p4.config.v1.p4info.PkgInfo],
    tables: _root_.scala.Seq[p4.config.v1.p4info.Table],
    actions: _root_.scala.Seq[p4.config.v1.p4info.Action],
    actionProfiles: _root_.scala.Seq[p4.config.v1.p4info.ActionProfile],
    counters: _root_.scala.Seq[p4.config.v1.p4info.Counter],
    directCounters: _root_.scala.Seq[p4.config.v1.p4info.DirectCounter],
    meters: _root_.scala.Seq[p4.config.v1.p4info.Meter],
    directMeters: _root_.scala.Seq[p4.config.v1.p4info.DirectMeter],
    controllerPacketMetadata: _root_.scala.Seq[p4.config.v1.p4info.ControllerPacketMetadata],
    valueSets: _root_.scala.Seq[p4.config.v1.p4info.ValueSet],
    registers: _root_.scala.Seq[p4.config.v1.p4info.Register],
    digests: _root_.scala.Seq[p4.config.v1.p4info.Digest],
    externs: _root_.scala.Seq[p4.config.v1.p4info.Extern],
    typeInfo: _root_.scala.Option[p4.config.v1.p4types.P4TypeInfo]
  ): _root_.p4.config.v1.p4info.P4Info = _root_.p4.config.v1.p4info.P4Info(
    pkgInfo,
    tables,
    actions,
    actionProfiles,
    counters,
    directCounters,
    meters,
    directMeters,
    controllerPacketMetadata,
    valueSets,
    registers,
    digests,
    externs,
    typeInfo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.P4Info])
}
