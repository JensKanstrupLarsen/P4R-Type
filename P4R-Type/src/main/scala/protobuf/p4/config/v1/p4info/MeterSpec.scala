// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4info

@SerialVersionUID(0L)
final case class MeterSpec(
    unit: p4.config.v1.p4info.MeterSpec.Unit = p4.config.v1.p4info.MeterSpec.Unit.UNSPECIFIED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MeterSpec] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = unit.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = unit.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withUnit(__v: p4.config.v1.p4info.MeterSpec.Unit): MeterSpec = copy(unit = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = unit.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(unit.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.config.v1.p4info.MeterSpec.type = p4.config.v1.p4info.MeterSpec
    // @@protoc_insertion_point(GeneratedMessage[p4.config.v1.MeterSpec])
}

object MeterSpec extends scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.MeterSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.config.v1.p4info.MeterSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.config.v1.p4info.MeterSpec = {
    var __unit: p4.config.v1.p4info.MeterSpec.Unit = p4.config.v1.p4info.MeterSpec.Unit.UNSPECIFIED
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __unit = p4.config.v1.p4info.MeterSpec.Unit.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.config.v1.p4info.MeterSpec(
        unit = __unit,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.config.v1.p4info.MeterSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.config.v1.p4info.MeterSpec(
        unit = p4.config.v1.p4info.MeterSpec.Unit.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(p4.config.v1.p4info.MeterSpec.Unit.UNSPECIFIED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4InfoProto.javaDescriptor.getMessageTypes().get(15)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4InfoProto.scalaDescriptor.messages(15)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => p4.config.v1.p4info.MeterSpec.Unit
    }
  }
  lazy val defaultInstance = p4.config.v1.p4info.MeterSpec(
    unit = p4.config.v1.p4info.MeterSpec.Unit.UNSPECIFIED
  )
  /** Corresponds to 'type' constructor parameter for Meter / DirectMeter in PSA
    */
  sealed abstract class Unit(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Unit
    def isUnspecified: _root_.scala.Boolean = false
    def isBytes: _root_.scala.Boolean = false
    def isPackets: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Unit] = p4.config.v1.p4info.MeterSpec.Unit
    final def asRecognized: _root_.scala.Option[p4.config.v1.p4info.MeterSpec.Unit.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[p4.config.v1.p4info.MeterSpec.Unit.Recognized])
  }
  
  object Unit extends _root_.scalapb.GeneratedEnumCompanion[Unit] {
    sealed trait Recognized extends Unit
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Unit] = this
    
    @SerialVersionUID(0L)
    case object UNSPECIFIED extends Unit(0) with Unit.Recognized {
      val index = 0
      val name = "UNSPECIFIED"
      override def isUnspecified: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BYTES extends Unit(1) with Unit.Recognized {
      val index = 1
      val name = "BYTES"
      override def isBytes: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PACKETS extends Unit(2) with Unit.Recognized {
      val index = 2
      val name = "PACKETS"
      override def isPackets: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Unit(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(UNSPECIFIED, BYTES, PACKETS)
    def fromValue(__value: _root_.scala.Int): Unit = __value match {
      case 0 => UNSPECIFIED
      case 1 => BYTES
      case 2 => PACKETS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = p4.config.v1.p4info.MeterSpec.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = p4.config.v1.p4info.MeterSpec.scalaDescriptor.enums(0)
  }
  implicit class MeterSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.MeterSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.config.v1.p4info.MeterSpec](_l) {
    def unit: _root_.scalapb.lenses.Lens[UpperPB, p4.config.v1.p4info.MeterSpec.Unit] = field(_.unit)((c_, f_) => c_.copy(unit = f_))
  }
  final val UNIT_FIELD_NUMBER = 1
  def of(
    unit: p4.config.v1.p4info.MeterSpec.Unit
  ): _root_.p4.config.v1.p4info.MeterSpec = _root_.p4.config.v1.p4info.MeterSpec(
    unit
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.config.v1.MeterSpec])
}
