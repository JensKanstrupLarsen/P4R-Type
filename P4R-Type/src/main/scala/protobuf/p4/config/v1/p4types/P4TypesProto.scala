// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.config.v1.p4types

object P4TypesProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      p4.config.v1.p4types.P4TypeInfo,
      p4.config.v1.p4types.P4DataTypeSpec,
      p4.config.v1.p4types.P4NamedType,
      p4.config.v1.p4types.P4BoolType,
      p4.config.v1.p4types.P4ErrorType,
      p4.config.v1.p4types.P4BitstringLikeTypeSpec,
      p4.config.v1.p4types.P4BitTypeSpec,
      p4.config.v1.p4types.P4IntTypeSpec,
      p4.config.v1.p4types.P4VarbitTypeSpec,
      p4.config.v1.p4types.P4TupleTypeSpec,
      p4.config.v1.p4types.P4StructTypeSpec,
      p4.config.v1.p4types.P4HeaderTypeSpec,
      p4.config.v1.p4types.P4HeaderUnionTypeSpec,
      p4.config.v1.p4types.P4HeaderStackTypeSpec,
      p4.config.v1.p4types.P4HeaderUnionStackTypeSpec,
      p4.config.v1.p4types.KeyValuePair,
      p4.config.v1.p4types.KeyValuePairList,
      p4.config.v1.p4types.Expression,
      p4.config.v1.p4types.ExpressionList,
      p4.config.v1.p4types.StructuredAnnotation,
      p4.config.v1.p4types.SourceLocation,
      p4.config.v1.p4types.P4EnumTypeSpec,
      p4.config.v1.p4types.P4SerializableEnumTypeSpec,
      p4.config.v1.p4types.P4ErrorTypeSpec,
      p4.config.v1.p4types.P4NewTypeTranslation,
      p4.config.v1.p4types.P4NewTypeSpec
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChpwNC9jb25maWcvdjEvcDR0eXBlcy5wcm90bxIMcDQuY29uZmlnLnYxIqcKCgpQNFR5cGVJbmZvEk0KB3N0cnVjdHMYASADK
  AsyJS5wNC5jb25maWcudjEuUDRUeXBlSW5mby5TdHJ1Y3RzRW50cnlCDOI/CRIHc3RydWN0c1IHc3RydWN0cxJNCgdoZWFkZXJzG
  AIgAygLMiUucDQuY29uZmlnLnYxLlA0VHlwZUluZm8uSGVhZGVyc0VudHJ5QgziPwkSB2hlYWRlcnNSB2hlYWRlcnMSYgoNaGVhZ
  GVyX3VuaW9ucxgDIAMoCzIqLnA0LmNvbmZpZy52MS5QNFR5cGVJbmZvLkhlYWRlclVuaW9uc0VudHJ5QhHiPw4SDGhlYWRlclVua
  W9uc1IMaGVhZGVyVW5pb25zEkUKBWVudW1zGAQgAygLMiMucDQuY29uZmlnLnYxLlA0VHlwZUluZm8uRW51bXNFbnRyeUIK4j8HE
  gVlbnVtc1IFZW51bXMSPwoFZXJyb3IYBSABKAsyHS5wNC5jb25maWcudjEuUDRFcnJvclR5cGVTcGVjQgriPwcSBWVycm9yUgVlc
  nJvchJ2ChJzZXJpYWxpemFibGVfZW51bXMYBiADKAsyLy5wNC5jb25maWcudjEuUDRUeXBlSW5mby5TZXJpYWxpemFibGVFbnVtc
  0VudHJ5QhbiPxMSEXNlcmlhbGl6YWJsZUVudW1zUhFzZXJpYWxpemFibGVFbnVtcxJSCgluZXdfdHlwZXMYByADKAsyJi5wNC5jb
  25maWcudjEuUDRUeXBlSW5mby5OZXdUeXBlc0VudHJ5Qg3iPwoSCG5ld1R5cGVzUghuZXdUeXBlcxpwCgxTdHJ1Y3RzRW50cnkSG
  goDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EkAKBXZhbHVlGAIgASgLMh4ucDQuY29uZmlnLnYxLlA0U3RydWN0VHlwZVNwZWNCC
  uI/BxIFdmFsdWVSBXZhbHVlOgI4ARpwCgxIZWFkZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EkAKBXZhbHVlG
  AIgASgLMh4ucDQuY29uZmlnLnYxLlA0SGVhZGVyVHlwZVNwZWNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARp6ChFIZWFkZXJVbmlvb
  nNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSRQoFdmFsdWUYAiABKAsyIy5wNC5jb25maWcudjEuUDRIZWFkZXJVb
  mlvblR5cGVTcGVjQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEabAoKRW51bXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZ
  XkSPgoFdmFsdWUYAiABKAsyHC5wNC5jb25maWcudjEuUDRFbnVtVHlwZVNwZWNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARqEAQoWU
  2VyaWFsaXphYmxlRW51bXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSSgoFdmFsdWUYAiABKAsyKC5wNC5jb25ma
  WcudjEuUDRTZXJpYWxpemFibGVFbnVtVHlwZVNwZWNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpuCg1OZXdUeXBlc0VudHJ5EhoKA
  2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRI9CgV2YWx1ZRgCIAEoCzIbLnA0LmNvbmZpZy52MS5QNE5ld1R5cGVTcGVjQgriPwcSB
  XZhbHVlUgV2YWx1ZToCOAEitwcKDlA0RGF0YVR5cGVTcGVjElUKCWJpdHN0cmluZxgBIAEoCzIlLnA0LmNvbmZpZy52MS5QNEJpd
  HN0cmluZ0xpa2VUeXBlU3BlY0IO4j8LEgliaXRzdHJpbmdIAFIJYml0c3RyaW5nEjkKBGJvb2wYAiABKAsyGC5wNC5jb25maWcud
  jEuUDRCb29sVHlwZUIJ4j8GEgRib29sSABSBGJvb2wSQQoFdHVwbGUYAyABKAsyHS5wNC5jb25maWcudjEuUDRUdXBsZVR5cGVTc
  GVjQgriPwcSBXR1cGxlSABSBXR1cGxlEkAKBnN0cnVjdBgEIAEoCzIZLnA0LmNvbmZpZy52MS5QNE5hbWVkVHlwZUIL4j8IEgZzd
  HJ1Y3RIAFIGc3RydWN0EkAKBmhlYWRlchgFIAEoCzIZLnA0LmNvbmZpZy52MS5QNE5hbWVkVHlwZUIL4j8IEgZoZWFkZXJIAFIGa
  GVhZGVyElAKDGhlYWRlcl91bmlvbhgGIAEoCzIZLnA0LmNvbmZpZy52MS5QNE5hbWVkVHlwZUIQ4j8NEgtoZWFkZXJVbmlvbkgAU
  gtoZWFkZXJVbmlvbhJaCgxoZWFkZXJfc3RhY2sYByABKAsyIy5wNC5jb25maWcudjEuUDRIZWFkZXJTdGFja1R5cGVTcGVjQhDiP
  w0SC2hlYWRlclN0YWNrSABSC2hlYWRlclN0YWNrEm8KEmhlYWRlcl91bmlvbl9zdGFjaxgIIAEoCzIoLnA0LmNvbmZpZy52MS5QN
  EhlYWRlclVuaW9uU3RhY2tUeXBlU3BlY0IV4j8SEhBoZWFkZXJVbmlvblN0YWNrSABSEGhlYWRlclVuaW9uU3RhY2sSOgoEZW51b
  RgJIAEoCzIZLnA0LmNvbmZpZy52MS5QNE5hbWVkVHlwZUIJ4j8GEgRlbnVtSABSBGVudW0SPQoFZXJyb3IYCiABKAsyGS5wNC5jb
  25maWcudjEuUDRFcnJvclR5cGVCCuI/BxIFZXJyb3JIAFIFZXJyb3ISXwoRc2VyaWFsaXphYmxlX2VudW0YCyABKAsyGS5wNC5jb
  25maWcudjEuUDROYW1lZFR5cGVCFeI/EhIQc2VyaWFsaXphYmxlRW51bUgAUhBzZXJpYWxpemFibGVFbnVtEkQKCG5ld190eXBlG
  AwgASgLMhkucDQuY29uZmlnLnYxLlA0TmFtZWRUeXBlQgziPwkSB25ld1R5cGVIAFIHbmV3VHlwZUILCgl0eXBlX3NwZWMiLAoLU
  DROYW1lZFR5cGUSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lIgwKClA0Qm9vbFR5cGUiDQoLUDRFcnJvclR5cGUi+QMKF
  1A0Qml0c3RyaW5nTGlrZVR5cGVTcGVjEjkKA2JpdBgBIAEoCzIbLnA0LmNvbmZpZy52MS5QNEJpdFR5cGVTcGVjQgjiPwUSA2Jpd
  EgAUgNiaXQSOQoDaW50GAIgASgLMhsucDQuY29uZmlnLnYxLlA0SW50VHlwZVNwZWNCCOI/BRIDaW50SABSA2ludBJFCgZ2YXJia
  XQYAyABKAsyHi5wNC5jb25maWcudjEuUDRWYXJiaXRUeXBlU3BlY0IL4j8IEgZ2YXJiaXRIAFIGdmFyYml0EjIKC2Fubm90YXRpb
  25zGAQgAygJQhDiPw0SC2Fubm90YXRpb25zUgthbm5vdGF0aW9ucxJpChRhbm5vdGF0aW9uX2xvY2F0aW9ucxgFIAMoCzIcLnA0L
  mNvbmZpZy52MS5Tb3VyY2VMb2NhdGlvbkIY4j8VEhNhbm5vdGF0aW9uTG9jYXRpb25zUhNhbm5vdGF0aW9uTG9jYXRpb25zEnUKF
  nN0cnVjdHVyZWRfYW5ub3RhdGlvbnMYBiADKAsyIi5wNC5jb25maWcudjEuU3RydWN0dXJlZEFubm90YXRpb25CGuI/FxIVc3Ryd
  WN0dXJlZEFubm90YXRpb25zUhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnNCCwoJdHlwZV9zcGVjIjoKDVA0Qml0VHlwZVNwZWMSKQoIY
  ml0d2lkdGgYASABKAVCDeI/ChIIYml0d2lkdGhSCGJpdHdpZHRoIjoKDVA0SW50VHlwZVNwZWMSKQoIYml0d2lkdGgYASABKAVCD
  eI/ChIIYml0d2lkdGhSCGJpdHdpZHRoIkcKEFA0VmFyYml0VHlwZVNwZWMSMwoMbWF4X2JpdHdpZHRoGAEgASgFQhDiPw0SC21he
  EJpdHdpZHRoUgttYXhCaXR3aWR0aCJXCg9QNFR1cGxlVHlwZVNwZWMSRAoHbWVtYmVycxgBIAMoCzIcLnA0LmNvbmZpZy52MS5QN
  ERhdGFUeXBlU3BlY0IM4j8JEgdtZW1iZXJzUgdtZW1iZXJzIuoDChBQNFN0cnVjdFR5cGVTcGVjEk0KB21lbWJlcnMYASADKAsyJ
  S5wNC5jb25maWcudjEuUDRTdHJ1Y3RUeXBlU3BlYy5NZW1iZXJCDOI/CRIHbWVtYmVyc1IHbWVtYmVycxIyCgthbm5vdGF0aW9uc
  xgCIAMoCUIQ4j8NEgthbm5vdGF0aW9uc1ILYW5ub3RhdGlvbnMSaQoUYW5ub3RhdGlvbl9sb2NhdGlvbnMYAyADKAsyHC5wNC5jb
  25maWcudjEuU291cmNlTG9jYXRpb25CGOI/FRITYW5ub3RhdGlvbkxvY2F0aW9uc1ITYW5ub3RhdGlvbkxvY2F0aW9ucxJ1ChZzd
  HJ1Y3R1cmVkX2Fubm90YXRpb25zGAQgAygLMiIucDQuY29uZmlnLnYxLlN0cnVjdHVyZWRBbm5vdGF0aW9uQhriPxcSFXN0cnVjd
  HVyZWRBbm5vdGF0aW9uc1IVc3RydWN0dXJlZEFubm90YXRpb25zGnEKBk1lbWJlchIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSB
  G5hbWUSSAoJdHlwZV9zcGVjGAIgASgLMhwucDQuY29uZmlnLnYxLlA0RGF0YVR5cGVTcGVjQg3iPwoSCHR5cGVTcGVjUgh0eXBlU
  3BlYyLzAwoQUDRIZWFkZXJUeXBlU3BlYxJNCgdtZW1iZXJzGAEgAygLMiUucDQuY29uZmlnLnYxLlA0SGVhZGVyVHlwZVNwZWMuT
  WVtYmVyQgziPwkSB21lbWJlcnNSB21lbWJlcnMSMgoLYW5ub3RhdGlvbnMYAiADKAlCEOI/DRILYW5ub3RhdGlvbnNSC2Fubm90Y
  XRpb25zEmkKFGFubm90YXRpb25fbG9jYXRpb25zGAMgAygLMhwucDQuY29uZmlnLnYxLlNvdXJjZUxvY2F0aW9uQhjiPxUSE2Fub
  m90YXRpb25Mb2NhdGlvbnNSE2Fubm90YXRpb25Mb2NhdGlvbnMSdQoWc3RydWN0dXJlZF9hbm5vdGF0aW9ucxgEIAMoCzIiLnA0L
  mNvbmZpZy52MS5TdHJ1Y3R1cmVkQW5ub3RhdGlvbkIa4j8XEhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnNSFXN0cnVjdHVyZWRBbm5vd
  GF0aW9ucxp6CgZNZW1iZXISHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lElEKCXR5cGVfc3BlYxgCIAEoCzIlLnA0LmNvb
  mZpZy52MS5QNEJpdHN0cmluZ0xpa2VUeXBlU3BlY0IN4j8KEgh0eXBlU3BlY1IIdHlwZVNwZWMi6gMKFVA0SGVhZGVyVW5pb25Ue
  XBlU3BlYxJSCgdtZW1iZXJzGAEgAygLMioucDQuY29uZmlnLnYxLlA0SGVhZGVyVW5pb25UeXBlU3BlYy5NZW1iZXJCDOI/CRIHb
  WVtYmVyc1IHbWVtYmVycxIyCgthbm5vdGF0aW9ucxgCIAMoCUIQ4j8NEgthbm5vdGF0aW9uc1ILYW5ub3RhdGlvbnMSaQoUYW5ub
  3RhdGlvbl9sb2NhdGlvbnMYAyADKAsyHC5wNC5jb25maWcudjEuU291cmNlTG9jYXRpb25CGOI/FRITYW5ub3RhdGlvbkxvY2F0a
  W9uc1ITYW5ub3RhdGlvbkxvY2F0aW9ucxJ1ChZzdHJ1Y3R1cmVkX2Fubm90YXRpb25zGAQgAygLMiIucDQuY29uZmlnLnYxLlN0c
  nVjdHVyZWRBbm5vdGF0aW9uQhriPxcSFXN0cnVjdHVyZWRBbm5vdGF0aW9uc1IVc3RydWN0dXJlZEFubm90YXRpb25zGmcKBk1lb
  WJlchIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSPgoGaGVhZGVyGAIgASgLMhkucDQuY29uZmlnLnYxLlA0TmFtZWRUe
  XBlQgviPwgSBmhlYWRlclIGaGVhZGVyInYKFVA0SGVhZGVyU3RhY2tUeXBlU3BlYxI+CgZoZWFkZXIYASABKAsyGS5wNC5jb25ma
  WcudjEuUDROYW1lZFR5cGVCC+I/CBIGaGVhZGVyUgZoZWFkZXISHQoEc2l6ZRgCIAEoBUIJ4j8GEgRzaXplUgRzaXplIosBChpQN
  EhlYWRlclVuaW9uU3RhY2tUeXBlU3BlYxJOCgxoZWFkZXJfdW5pb24YASABKAsyGS5wNC5jb25maWcudjEuUDROYW1lZFR5cGVCE
  OI/DRILaGVhZGVyVW5pb25SC2hlYWRlclVuaW9uEh0KBHNpemUYAiABKAVCCeI/BhIEc2l6ZVIEc2l6ZSJmCgxLZXlWYWx1ZVBha
  XISGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EjoKBXZhbHVlGAIgASgLMhgucDQuY29uZmlnLnYxLkV4cHJlc3Npb25CCuI/B
  xIFdmFsdWVSBXZhbHVlIlcKEEtleVZhbHVlUGFpckxpc3QSQwoIa3ZfcGFpcnMYASADKAsyGi5wNC5jb25maWcudjEuS2V5VmFsd
  WVQYWlyQgziPwkSB2t2UGFpcnNSB2t2UGFpcnMisQEKCkV4cHJlc3Npb24SNQoMc3RyaW5nX3ZhbHVlGAEgASgJQhDiPw0SC3N0c
  mluZ1ZhbHVlSABSC3N0cmluZ1ZhbHVlEjIKC2ludDY0X3ZhbHVlGAIgASgDQg/iPwwSCmludDY0VmFsdWVIAFIKaW50NjRWYWx1Z
  RIvCgpib29sX3ZhbHVlGAMgASgIQg7iPwsSCWJvb2xWYWx1ZUgAUglib29sVmFsdWVCBwoFdmFsdWUiXgoORXhwcmVzc2lvbkxpc
  3QSTAoLZXhwcmVzc2lvbnMYASADKAsyGC5wNC5jb25maWcudjEuRXhwcmVzc2lvbkIQ4j8NEgtleHByZXNzaW9uc1ILZXhwcmVzc
  2lvbnMizAIKFFN0cnVjdHVyZWRBbm5vdGF0aW9uEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRJcCg9leHByZXNzaW9uX
  2xpc3QYAiABKAsyHC5wNC5jb25maWcudjEuRXhwcmVzc2lvbkxpc3RCE+I/EBIOZXhwcmVzc2lvbkxpc3RIAFIOZXhwcmVzc2lvb
  kxpc3QSUwoMa3ZfcGFpcl9saXN0GAMgASgLMh4ucDQuY29uZmlnLnYxLktleVZhbHVlUGFpckxpc3RCD+I/DBIKa3ZQYWlyTGlzd
  EgAUgprdlBhaXJMaXN0EloKD3NvdXJjZV9sb2NhdGlvbhgEIAEoCzIcLnA0LmNvbmZpZy52MS5Tb3VyY2VMb2NhdGlvbkIT4j8QE
  g5zb3VyY2VMb2NhdGlvblIOc291cmNlTG9jYXRpb25CBgoEYm9keSJzCg5Tb3VyY2VMb2NhdGlvbhIdCgRmaWxlGAEgASgJQgniP
  wYSBGZpbGVSBGZpbGUSHQoEbGluZRgCIAEoBUIJ4j8GEgRsaW5lUgRsaW5lEiMKBmNvbHVtbhgDIAEoBUIL4j8IEgZjb2x1bW5SB
  mNvbHVtbiKzBQoOUDRFbnVtVHlwZVNwZWMSSwoHbWVtYmVycxgBIAMoCzIjLnA0LmNvbmZpZy52MS5QNEVudW1UeXBlU3BlYy5NZ
  W1iZXJCDOI/CRIHbWVtYmVyc1IHbWVtYmVycxIyCgthbm5vdGF0aW9ucxgCIAMoCUIQ4j8NEgthbm5vdGF0aW9uc1ILYW5ub3Rhd
  GlvbnMSaQoUYW5ub3RhdGlvbl9sb2NhdGlvbnMYBCADKAsyHC5wNC5jb25maWcudjEuU291cmNlTG9jYXRpb25CGOI/FRITYW5ub
  3RhdGlvbkxvY2F0aW9uc1ITYW5ub3RhdGlvbkxvY2F0aW9ucxJ1ChZzdHJ1Y3R1cmVkX2Fubm90YXRpb25zGAMgAygLMiIucDQuY
  29uZmlnLnYxLlN0cnVjdHVyZWRBbm5vdGF0aW9uQhriPxcSFXN0cnVjdHVyZWRBbm5vdGF0aW9uc1IVc3RydWN0dXJlZEFubm90Y
  XRpb25zGr0CCgZNZW1iZXISHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEjIKC2Fubm90YXRpb25zGAIgAygJQhDiPw0SC
  2Fubm90YXRpb25zUgthbm5vdGF0aW9ucxJpChRhbm5vdGF0aW9uX2xvY2F0aW9ucxgEIAMoCzIcLnA0LmNvbmZpZy52MS5Tb3VyY
  2VMb2NhdGlvbkIY4j8VEhNhbm5vdGF0aW9uTG9jYXRpb25zUhNhbm5vdGF0aW9uTG9jYXRpb25zEnUKFnN0cnVjdHVyZWRfYW5ub
  3RhdGlvbnMYAyADKAsyIi5wNC5jb25maWcudjEuU3RydWN0dXJlZEFubm90YXRpb25CGuI/FxIVc3RydWN0dXJlZEFubm90YXRpb
  25zUhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnMiyAYKGlA0U2VyaWFsaXphYmxlRW51bVR5cGVTcGVjElkKD3VuZGVybHlpbmdfdHlwZ
  RgBIAEoCzIbLnA0LmNvbmZpZy52MS5QNEJpdFR5cGVTcGVjQhPiPxASDnVuZGVybHlpbmdUeXBlUg51bmRlcmx5aW5nVHlwZRJXC
  gdtZW1iZXJzGAIgAygLMi8ucDQuY29uZmlnLnYxLlA0U2VyaWFsaXphYmxlRW51bVR5cGVTcGVjLk1lbWJlckIM4j8JEgdtZW1iZ
  XJzUgdtZW1iZXJzEjIKC2Fubm90YXRpb25zGAMgAygJQhDiPw0SC2Fubm90YXRpb25zUgthbm5vdGF0aW9ucxJpChRhbm5vdGF0a
  W9uX2xvY2F0aW9ucxgFIAMoCzIcLnA0LmNvbmZpZy52MS5Tb3VyY2VMb2NhdGlvbkIY4j8VEhNhbm5vdGF0aW9uTG9jYXRpb25zU
  hNhbm5vdGF0aW9uTG9jYXRpb25zEnUKFnN0cnVjdHVyZWRfYW5ub3RhdGlvbnMYBCADKAsyIi5wNC5jb25maWcudjEuU3RydWN0d
  XJlZEFubm90YXRpb25CGuI/FxIVc3RydWN0dXJlZEFubm90YXRpb25zUhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnMa3wIKBk1lbWJlc
  hIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIAoFdmFsdWUYAiABKAxCCuI/BxIFdmFsdWVSBXZhbHVlEjIKC2Fubm90Y
  XRpb25zGAMgAygJQhDiPw0SC2Fubm90YXRpb25zUgthbm5vdGF0aW9ucxJpChRhbm5vdGF0aW9uX2xvY2F0aW9ucxgFIAMoCzIcL
  nA0LmNvbmZpZy52MS5Tb3VyY2VMb2NhdGlvbkIY4j8VEhNhbm5vdGF0aW9uTG9jYXRpb25zUhNhbm5vdGF0aW9uTG9jYXRpb25zE
  nUKFnN0cnVjdHVyZWRfYW5ub3RhdGlvbnMYBCADKAsyIi5wNC5jb25maWcudjEuU3RydWN0dXJlZEFubm90YXRpb25CGuI/FxIVc
  3RydWN0dXJlZEFubm90YXRpb25zUhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnMiOQoPUDRFcnJvclR5cGVTcGVjEiYKB21lbWJlcnMYA
  SADKAlCDOI/CRIHbWVtYmVyc1IHbWVtYmVycyLhAQoUUDROZXdUeXBlVHJhbnNsYXRpb24SGgoDdXJpGAEgASgJQgjiPwUSA3Vya
  VIDdXJpEjUKDHNkbl9iaXR3aWR0aBgCIAEoBUIQ4j8NEgtzZG5CaXR3aWR0aEgAUgtzZG5CaXR3aWR0aBJdCgpzZG5fc3RyaW5nG
  AMgASgLMiwucDQuY29uZmlnLnYxLlA0TmV3VHlwZVRyYW5zbGF0aW9uLlNkblN0cmluZ0IO4j8LEglzZG5TdHJpbmdIAFIJc2RuU
  3RyaW5nGgsKCVNkblN0cmluZ0IKCghzZG5fdHlwZSLzAwoNUDROZXdUeXBlU3BlYxJWCg1vcmlnaW5hbF90eXBlGAEgASgLMhwuc
  DQuY29uZmlnLnYxLlA0RGF0YVR5cGVTcGVjQhHiPw4SDG9yaWdpbmFsVHlwZUgAUgxvcmlnaW5hbFR5cGUSYgoPdHJhbnNsYXRlZ
  F90eXBlGAIgASgLMiIucDQuY29uZmlnLnYxLlA0TmV3VHlwZVRyYW5zbGF0aW9uQhPiPxASDnRyYW5zbGF0ZWRUeXBlSABSDnRyY
  W5zbGF0ZWRUeXBlEjIKC2Fubm90YXRpb25zGAMgAygJQhDiPw0SC2Fubm90YXRpb25zUgthbm5vdGF0aW9ucxJpChRhbm5vdGF0a
  W9uX2xvY2F0aW9ucxgFIAMoCzIcLnA0LmNvbmZpZy52MS5Tb3VyY2VMb2NhdGlvbkIY4j8VEhNhbm5vdGF0aW9uTG9jYXRpb25zU
  hNhbm5vdGF0aW9uTG9jYXRpb25zEnUKFnN0cnVjdHVyZWRfYW5ub3RhdGlvbnMYBCADKAsyIi5wNC5jb25maWcudjEuU3RydWN0d
  XJlZEFubm90YXRpb25CGuI/FxIVc3RydWN0dXJlZEFubm90YXRpb25zUhVzdHJ1Y3R1cmVkQW5ub3RhdGlvbnNCEAoOcmVwcmVzZ
  W50YXRpb25CLVorZ2l0aHViLmNvbS9wNGxhbmcvcDRydW50aW1lL2dvL3A0L2NvbmZpZy92MWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}