// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  *
  * @param updates
  *   The write batch, comprising a list of Update operations. The P4Runtime
  *   server may arbitrarily reorder messages within a batch to maximize
  *   performance.
  */
@SerialVersionUID(0L)
final case class WriteRequest(
    deviceId: _root_.scala.Long = 0L,
    @scala.deprecated(message="Marked as deprecated in proto file", "") roleId: _root_.scala.Long = 0L,
    role: _root_.scala.Predef.String = "",
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None,
    updates: _root_.scala.Seq[p4.v1.p4runtime.Update] = _root_.scala.Seq.empty,
    atomicity: p4.v1.p4runtime.WriteRequest.Atomicity = p4.v1.p4runtime.WriteRequest.Atomicity.CONTINUE_ON_ERROR,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[WriteRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = deviceId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = roleId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = role
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      if (electionId.isDefined) {
        val __value = electionId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      updates.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = atomicity.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = deviceId
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = roleId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      electionId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      updates.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = atomicity.value
        if (__v != 0) {
          _output__.writeEnum(5, __v)
        }
      };
      {
        val __v = role
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDeviceId(__v: _root_.scala.Long): WriteRequest = copy(deviceId = __v)
    def withRoleId(__v: _root_.scala.Long): WriteRequest = copy(roleId = __v)
    def withRole(__v: _root_.scala.Predef.String): WriteRequest = copy(role = __v)
    def getElectionId: p4.v1.p4runtime.Uint128 = electionId.getOrElse(p4.v1.p4runtime.Uint128.defaultInstance)
    def clearElectionId: WriteRequest = copy(electionId = _root_.scala.None)
    def withElectionId(__v: p4.v1.p4runtime.Uint128): WriteRequest = copy(electionId = Option(__v))
    def clearUpdates = copy(updates = _root_.scala.Seq.empty)
    def addUpdates(__vs: p4.v1.p4runtime.Update *): WriteRequest = addAllUpdates(__vs)
    def addAllUpdates(__vs: Iterable[p4.v1.p4runtime.Update]): WriteRequest = copy(updates = updates ++ __vs)
    def withUpdates(__v: _root_.scala.Seq[p4.v1.p4runtime.Update]): WriteRequest = copy(updates = __v)
    def withAtomicity(__v: p4.v1.p4runtime.WriteRequest.Atomicity): WriteRequest = copy(atomicity = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = deviceId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = roleId
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = role
          if (__t != "") __t else null
        }
        case 3 => electionId.orNull
        case 4 => updates
        case 5 => {
          val __t = atomicity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(deviceId)
        case 2 => _root_.scalapb.descriptors.PLong(roleId)
        case 6 => _root_.scalapb.descriptors.PString(role)
        case 3 => electionId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(updates.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PEnum(atomicity.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.WriteRequest.type = p4.v1.p4runtime.WriteRequest
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.WriteRequest])
}

object WriteRequest extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.WriteRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.WriteRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.WriteRequest = {
    var __deviceId: _root_.scala.Long = 0L
    var __roleId: _root_.scala.Long = 0L
    var __role: _root_.scala.Predef.String = ""
    var __electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None
    val __updates: _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Update] = new _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Update]
    var __atomicity: p4.v1.p4runtime.WriteRequest.Atomicity = p4.v1.p4runtime.WriteRequest.Atomicity.CONTINUE_ON_ERROR
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __deviceId = _input__.readUInt64()
        case 16 =>
          __roleId = _input__.readUInt64()
        case 50 =>
          __role = _input__.readStringRequireUtf8()
        case 26 =>
          __electionId = Option(__electionId.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Uint128](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __updates += _root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Update](_input__)
        case 40 =>
          __atomicity = p4.v1.p4runtime.WriteRequest.Atomicity.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.WriteRequest(
        deviceId = __deviceId,
        roleId = __roleId,
        role = __role,
        electionId = __electionId,
        updates = __updates.result(),
        atomicity = __atomicity,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.WriteRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.WriteRequest(
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        roleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        role = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        electionId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.Uint128]]),
        updates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[p4.v1.p4runtime.Update]]).getOrElse(_root_.scala.Seq.empty),
        atomicity = p4.v1.p4runtime.WriteRequest.Atomicity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(p4.v1.p4runtime.WriteRequest.Atomicity.CONTINUE_ON_ERROR.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = p4.v1.p4runtime.Uint128
      case 4 => __out = p4.v1.p4runtime.Update
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => p4.v1.p4runtime.WriteRequest.Atomicity
    }
  }
  lazy val defaultInstance = p4.v1.p4runtime.WriteRequest(
    deviceId = 0L,
    roleId = 0L,
    role = "",
    electionId = _root_.scala.None,
    updates = _root_.scala.Seq.empty,
    atomicity = p4.v1.p4runtime.WriteRequest.Atomicity.CONTINUE_ON_ERROR
  )
  sealed abstract class Atomicity(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Atomicity
    def isContinueOnError: _root_.scala.Boolean = false
    def isRollbackOnError: _root_.scala.Boolean = false
    def isDataplaneAtomic: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Atomicity] = p4.v1.p4runtime.WriteRequest.Atomicity
    final def asRecognized: _root_.scala.Option[p4.v1.p4runtime.WriteRequest.Atomicity.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[p4.v1.p4runtime.WriteRequest.Atomicity.Recognized])
  }
  
  object Atomicity extends _root_.scalapb.GeneratedEnumCompanion[Atomicity] {
    sealed trait Recognized extends Atomicity
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Atomicity] = this
    
    /** Required. This is the default behavior. The batch is processed in a
      * non-atomic manner from a data plane point of view. Each operation within
      * the batch must be attempted even if one or more encounter errors.
      * Every data plane packet is guaranteed to be processed according to
      * table contents as they are between two individual operations of the
      * batch, but there could be several packets processed that see each of
      * these intermediate stages.
      */
    @SerialVersionUID(0L)
    case object CONTINUE_ON_ERROR extends Atomicity(0) with Atomicity.Recognized {
      val index = 0
      val name = "CONTINUE_ON_ERROR"
      override def isContinueOnError: _root_.scala.Boolean = true
    }
    
    /** Optional. Operations within the batch are committed to data plane until
      * an error is encountered. At this point, the operations must be rolled
      * back such that both software and data plane state is consistent with the
      * state before the batch was attempted. The resulting behavior is
      * all-or-none, except the batch is not atomic from a data plane point of
      * view. Every data plane packet is guaranteed to be processed according to
      * table contents as they are between two individual operations of the
      * batch, but there could be several packets processed that see each of
      * these intermediate stages.
      */
    @SerialVersionUID(0L)
    case object ROLLBACK_ON_ERROR extends Atomicity(1) with Atomicity.Recognized {
      val index = 1
      val name = "ROLLBACK_ON_ERROR"
      override def isRollbackOnError: _root_.scala.Boolean = true
    }
    
    /** Optional. Every data plane packet is guaranteed to be processed according
      * to table contents before the batch began, or after the batch completed
      * and the operations were programmed to the hardware.
      * The batch is therefore treated as a transaction. 
      */
    @SerialVersionUID(0L)
    case object DATAPLANE_ATOMIC extends Atomicity(2) with Atomicity.Recognized {
      val index = 2
      val name = "DATAPLANE_ATOMIC"
      override def isDataplaneAtomic: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Atomicity(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(CONTINUE_ON_ERROR, ROLLBACK_ON_ERROR, DATAPLANE_ATOMIC)
    def fromValue(__value: _root_.scala.Int): Atomicity = __value match {
      case 0 => CONTINUE_ON_ERROR
      case 1 => ROLLBACK_ON_ERROR
      case 2 => DATAPLANE_ATOMIC
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = p4.v1.p4runtime.WriteRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = p4.v1.p4runtime.WriteRequest.scalaDescriptor.enums(0)
  }
  implicit class WriteRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.WriteRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.WriteRequest](_l) {
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def roleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.roleId)((c_, f_) => c_.copy(roleId = f_))
    def role: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def electionId: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Uint128] = field(_.getElectionId)((c_, f_) => c_.copy(electionId = Option(f_)))
    def optionalElectionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.Uint128]] = field(_.electionId)((c_, f_) => c_.copy(electionId = f_))
    def updates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.v1.p4runtime.Update]] = field(_.updates)((c_, f_) => c_.copy(updates = f_))
    def atomicity: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.WriteRequest.Atomicity] = field(_.atomicity)((c_, f_) => c_.copy(atomicity = f_))
  }
  final val DEVICE_ID_FIELD_NUMBER = 1
  final val ROLE_ID_FIELD_NUMBER = 2
  final val ROLE_FIELD_NUMBER = 6
  final val ELECTION_ID_FIELD_NUMBER = 3
  final val UPDATES_FIELD_NUMBER = 4
  final val ATOMICITY_FIELD_NUMBER = 5
  def of(
    deviceId: _root_.scala.Long,
    roleId: _root_.scala.Long,
    role: _root_.scala.Predef.String,
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128],
    updates: _root_.scala.Seq[p4.v1.p4runtime.Update],
    atomicity: p4.v1.p4runtime.WriteRequest.Atomicity
  ): _root_.p4.v1.p4runtime.WriteRequest = _root_.p4.v1.p4runtime.WriteRequest(
    deviceId,
    roleId,
    role,
    electionId,
    updates,
    atomicity
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.WriteRequest])
}
