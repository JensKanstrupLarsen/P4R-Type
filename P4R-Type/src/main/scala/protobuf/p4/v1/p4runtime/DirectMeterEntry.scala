// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  * For WriteRequest, Update.Type must be MODIFY. INSERT and DELETE on direct
  * meters is not allowed and will return an error. The insertion/deletion
  * should happen as part of INSERT/DELETE on the associated table-entry.
  * For ReadRequest, the scope is defined as follows:
  * - All meter cells for all tables if table_entry.table_id = 0.
  * - All meter cells of a table if table_entry.table_id is present and
  *   table_entry.match is empty.
  *
  * @param tableEntry
  *   The associated table entry. This field is required.
  *   table_entry.action is ignored. Other fields specify the match.
  */
@SerialVersionUID(0L)
final case class DirectMeterEntry(
    tableEntry: _root_.scala.Option[p4.v1.p4runtime.TableEntry] = _root_.scala.None,
    config: _root_.scala.Option[p4.v1.p4runtime.MeterConfig] = _root_.scala.None,
    counterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DirectMeterEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (tableEntry.isDefined) {
        val __value = tableEntry.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (config.isDefined) {
        val __value = config.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (counterData.isDefined) {
        val __value = counterData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tableEntry.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      config.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      counterData.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getTableEntry: p4.v1.p4runtime.TableEntry = tableEntry.getOrElse(p4.v1.p4runtime.TableEntry.defaultInstance)
    def clearTableEntry: DirectMeterEntry = copy(tableEntry = _root_.scala.None)
    def withTableEntry(__v: p4.v1.p4runtime.TableEntry): DirectMeterEntry = copy(tableEntry = Option(__v))
    def getConfig: p4.v1.p4runtime.MeterConfig = config.getOrElse(p4.v1.p4runtime.MeterConfig.defaultInstance)
    def clearConfig: DirectMeterEntry = copy(config = _root_.scala.None)
    def withConfig(__v: p4.v1.p4runtime.MeterConfig): DirectMeterEntry = copy(config = Option(__v))
    def getCounterData: p4.v1.p4runtime.MeterCounterData = counterData.getOrElse(p4.v1.p4runtime.MeterCounterData.defaultInstance)
    def clearCounterData: DirectMeterEntry = copy(counterData = _root_.scala.None)
    def withCounterData(__v: p4.v1.p4runtime.MeterCounterData): DirectMeterEntry = copy(counterData = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tableEntry.orNull
        case 2 => config.orNull
        case 3 => counterData.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => tableEntry.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => config.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => counterData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.DirectMeterEntry.type = p4.v1.p4runtime.DirectMeterEntry
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.DirectMeterEntry])
}

object DirectMeterEntry extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DirectMeterEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DirectMeterEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.DirectMeterEntry = {
    var __tableEntry: _root_.scala.Option[p4.v1.p4runtime.TableEntry] = _root_.scala.None
    var __config: _root_.scala.Option[p4.v1.p4runtime.MeterConfig] = _root_.scala.None
    var __counterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __tableEntry = Option(__tableEntry.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.TableEntry](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __config = Option(__config.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.MeterConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __counterData = Option(__counterData.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.MeterCounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.DirectMeterEntry(
        tableEntry = __tableEntry,
        config = __config,
        counterData = __counterData,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.DirectMeterEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.DirectMeterEntry(
        tableEntry = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.TableEntry]]),
        config = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.MeterConfig]]),
        counterData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.MeterCounterData]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.v1.p4runtime.TableEntry
      case 2 => __out = p4.v1.p4runtime.MeterConfig
      case 3 => __out = p4.v1.p4runtime.MeterCounterData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.DirectMeterEntry(
    tableEntry = _root_.scala.None,
    config = _root_.scala.None,
    counterData = _root_.scala.None
  )
  implicit class DirectMeterEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DirectMeterEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.DirectMeterEntry](_l) {
    def tableEntry: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.TableEntry] = field(_.getTableEntry)((c_, f_) => c_.copy(tableEntry = Option(f_)))
    def optionalTableEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.TableEntry]] = field(_.tableEntry)((c_, f_) => c_.copy(tableEntry = f_))
    def config: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MeterConfig] = field(_.getConfig)((c_, f_) => c_.copy(config = Option(f_)))
    def optionalConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.MeterConfig]] = field(_.config)((c_, f_) => c_.copy(config = f_))
    def counterData: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MeterCounterData] = field(_.getCounterData)((c_, f_) => c_.copy(counterData = Option(f_)))
    def optionalCounterData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.MeterCounterData]] = field(_.counterData)((c_, f_) => c_.copy(counterData = f_))
  }
  final val TABLE_ENTRY_FIELD_NUMBER = 1
  final val CONFIG_FIELD_NUMBER = 2
  final val COUNTER_DATA_FIELD_NUMBER = 3
  def of(
    tableEntry: _root_.scala.Option[p4.v1.p4runtime.TableEntry],
    config: _root_.scala.Option[p4.v1.p4runtime.MeterConfig],
    counterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData]
  ): _root_.p4.v1.p4runtime.DirectMeterEntry = _root_.p4.v1.p4runtime.DirectMeterEntry(
    tableEntry,
    config,
    counterData
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.DirectMeterEntry])
}
