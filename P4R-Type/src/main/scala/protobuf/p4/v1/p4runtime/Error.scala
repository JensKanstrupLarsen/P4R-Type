// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** Error message used to report a single P4-entity error for a Write RPC.
  *
  * @param canonicalCode
  *   gRPC canonical error code (see
  *   https://developers.google.com/maps-booking/reference/grpc-api/status_codes)
  * @param message
  *   Detailed error message.
  * @param space
  *   Target and architecture specific space to which this error belongs.
  *   We encourage using triplet: &lt;target&gt;-&lt;arch&gt;-&lt;vendor&gt;,
  *   e.g."targetX-psa-vendor1" or "targetY-psa-vendor2".
  * @param code
  *   Numeric code drawn from target-specific error space above.
  * @param details
  *   Optional: Allows reporting back additional target-specific details on the
  *   error.
  */
@SerialVersionUID(0L)
final case class Error(
    canonicalCode: _root_.scala.Int = 0,
    message: _root_.scala.Predef.String = "",
    space: _root_.scala.Predef.String = "",
    code: _root_.scala.Int = 0,
    details: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Error] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = canonicalCode
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = space
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = code
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      if (details.isDefined) {
        val __value = details.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = canonicalCode
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = space
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = code
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      details.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withCanonicalCode(__v: _root_.scala.Int): Error = copy(canonicalCode = __v)
    def withMessage(__v: _root_.scala.Predef.String): Error = copy(message = __v)
    def withSpace(__v: _root_.scala.Predef.String): Error = copy(space = __v)
    def withCode(__v: _root_.scala.Int): Error = copy(code = __v)
    def getDetails: com.google.protobuf.any.Any = details.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def clearDetails: Error = copy(details = _root_.scala.None)
    def withDetails(__v: com.google.protobuf.any.Any): Error = copy(details = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = canonicalCode
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = space
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = code
          if (__t != 0) __t else null
        }
        case 5 => details.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(canonicalCode)
        case 2 => _root_.scalapb.descriptors.PString(message)
        case 3 => _root_.scalapb.descriptors.PString(space)
        case 4 => _root_.scalapb.descriptors.PInt(code)
        case 5 => details.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.Error.type = p4.v1.p4runtime.Error
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.Error])
}

object Error extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.Error] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.Error] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.Error = {
    var __canonicalCode: _root_.scala.Int = 0
    var __message: _root_.scala.Predef.String = ""
    var __space: _root_.scala.Predef.String = ""
    var __code: _root_.scala.Int = 0
    var __details: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __canonicalCode = _input__.readInt32()
        case 18 =>
          __message = _input__.readStringRequireUtf8()
        case 26 =>
          __space = _input__.readStringRequireUtf8()
        case 32 =>
          __code = _input__.readInt32()
        case 42 =>
          __details = Option(__details.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.Error(
        canonicalCode = __canonicalCode,
        message = __message,
        space = __space,
        code = __code,
        details = __details,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.Error] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.Error(
        canonicalCode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        space = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        details = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(51)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(51)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.Error(
    canonicalCode = 0,
    message = "",
    space = "",
    code = 0,
    details = _root_.scala.None
  )
  implicit class ErrorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Error]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.Error](_l) {
    def canonicalCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.canonicalCode)((c_, f_) => c_.copy(canonicalCode = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def space: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.space)((c_, f_) => c_.copy(space = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def details: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getDetails)((c_, f_) => c_.copy(details = Option(f_)))
    def optionalDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.details)((c_, f_) => c_.copy(details = f_))
  }
  final val CANONICAL_CODE_FIELD_NUMBER = 1
  final val MESSAGE_FIELD_NUMBER = 2
  final val SPACE_FIELD_NUMBER = 3
  final val CODE_FIELD_NUMBER = 4
  final val DETAILS_FIELD_NUMBER = 5
  def of(
    canonicalCode: _root_.scala.Int,
    message: _root_.scala.Predef.String,
    space: _root_.scala.Predef.String,
    code: _root_.scala.Int,
    details: _root_.scala.Option[com.google.protobuf.any.Any]
  ): _root_.p4.v1.p4runtime.Error = _root_.p4.v1.p4runtime.Error(
    canonicalCode,
    message,
    space,
    code,
    details
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.Error])
}
