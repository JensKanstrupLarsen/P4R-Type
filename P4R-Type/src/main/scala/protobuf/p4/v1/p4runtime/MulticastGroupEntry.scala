// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** The (egress_port, instance) pair must be unique for each replica in a given
  * multicast group entry. A packet may be multicast by setting the
  * multicast_group field of PSA ingress output metadata to multicast_group_id
  * of a programmed multicast group entry. The egress_port and instance fields of
  * each replica's egress input metadata will be set to the respective values
  * programmed in the multicast group entry.
  */
@SerialVersionUID(0L)
final case class MulticastGroupEntry(
    multicastGroupId: _root_.scala.Int = 0,
    replicas: _root_.scala.Seq[p4.v1.p4runtime.Replica] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MulticastGroupEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = multicastGroupId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      replicas.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = multicastGroupId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      replicas.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withMulticastGroupId(__v: _root_.scala.Int): MulticastGroupEntry = copy(multicastGroupId = __v)
    def clearReplicas = copy(replicas = _root_.scala.Seq.empty)
    def addReplicas(__vs: p4.v1.p4runtime.Replica *): MulticastGroupEntry = addAllReplicas(__vs)
    def addAllReplicas(__vs: Iterable[p4.v1.p4runtime.Replica]): MulticastGroupEntry = copy(replicas = replicas ++ __vs)
    def withReplicas(__v: _root_.scala.Seq[p4.v1.p4runtime.Replica]): MulticastGroupEntry = copy(replicas = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = multicastGroupId
          if (__t != 0) __t else null
        }
        case 2 => replicas
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(multicastGroupId)
        case 2 => _root_.scalapb.descriptors.PRepeated(replicas.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.MulticastGroupEntry.type = p4.v1.p4runtime.MulticastGroupEntry
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.MulticastGroupEntry])
}

object MulticastGroupEntry extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MulticastGroupEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MulticastGroupEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.MulticastGroupEntry = {
    var __multicastGroupId: _root_.scala.Int = 0
    val __replicas: _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Replica] = new _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Replica]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __multicastGroupId = _input__.readUInt32()
        case 18 =>
          __replicas += _root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Replica](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.MulticastGroupEntry(
        multicastGroupId = __multicastGroupId,
        replicas = __replicas.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.MulticastGroupEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.MulticastGroupEntry(
        multicastGroupId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        replicas = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.v1.p4runtime.Replica]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(25)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(25)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.Replica
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.MulticastGroupEntry(
    multicastGroupId = 0,
    replicas = _root_.scala.Seq.empty
  )
  implicit class MulticastGroupEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MulticastGroupEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.MulticastGroupEntry](_l) {
    def multicastGroupId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.multicastGroupId)((c_, f_) => c_.copy(multicastGroupId = f_))
    def replicas: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.v1.p4runtime.Replica]] = field(_.replicas)((c_, f_) => c_.copy(replicas = f_))
  }
  final val MULTICAST_GROUP_ID_FIELD_NUMBER = 1
  final val REPLICAS_FIELD_NUMBER = 2
  def of(
    multicastGroupId: _root_.scala.Int,
    replicas: _root_.scala.Seq[p4.v1.p4runtime.Replica]
  ): _root_.p4.v1.p4runtime.MulticastGroupEntry = _root_.p4.v1.p4runtime.MulticastGroupEntry(
    multicastGroupId,
    replicas
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.MulticastGroupEntry])
}
