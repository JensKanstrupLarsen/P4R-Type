// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** @param role
  *   When specified, only return table entries for the given role.
  */
@SerialVersionUID(0L)
final case class ReadRequest(
    deviceId: _root_.scala.Long = 0L,
    role: _root_.scala.Predef.String = "",
    entities: _root_.scala.Seq[p4.v1.p4runtime.Entity] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ReadRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = deviceId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = role
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      entities.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = deviceId
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      entities.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = role
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDeviceId(__v: _root_.scala.Long): ReadRequest = copy(deviceId = __v)
    def withRole(__v: _root_.scala.Predef.String): ReadRequest = copy(role = __v)
    def clearEntities = copy(entities = _root_.scala.Seq.empty)
    def addEntities(__vs: p4.v1.p4runtime.Entity *): ReadRequest = addAllEntities(__vs)
    def addAllEntities(__vs: Iterable[p4.v1.p4runtime.Entity]): ReadRequest = copy(entities = entities ++ __vs)
    def withEntities(__v: _root_.scala.Seq[p4.v1.p4runtime.Entity]): ReadRequest = copy(entities = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = deviceId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = role
          if (__t != "") __t else null
        }
        case 2 => entities
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(deviceId)
        case 3 => _root_.scalapb.descriptors.PString(role)
        case 2 => _root_.scalapb.descriptors.PRepeated(entities.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.ReadRequest.type = p4.v1.p4runtime.ReadRequest
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.ReadRequest])
}

object ReadRequest extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.ReadRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.ReadRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.ReadRequest = {
    var __deviceId: _root_.scala.Long = 0L
    var __role: _root_.scala.Predef.String = ""
    val __entities: _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Entity] = new _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.Entity]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __deviceId = _input__.readUInt64()
        case 26 =>
          __role = _input__.readStringRequireUtf8()
        case 18 =>
          __entities += _root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Entity](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.ReadRequest(
        deviceId = __deviceId,
        role = __role,
        entities = __entities.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.ReadRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.ReadRequest(
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        role = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        entities = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.v1.p4runtime.Entity]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.Entity
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.ReadRequest(
    deviceId = 0L,
    role = "",
    entities = _root_.scala.Seq.empty
  )
  implicit class ReadRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.ReadRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.ReadRequest](_l) {
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def role: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def entities: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.v1.p4runtime.Entity]] = field(_.entities)((c_, f_) => c_.copy(entities = f_))
  }
  final val DEVICE_ID_FIELD_NUMBER = 1
  final val ROLE_FIELD_NUMBER = 3
  final val ENTITIES_FIELD_NUMBER = 2
  def of(
    deviceId: _root_.scala.Long,
    role: _root_.scala.Predef.String,
    entities: _root_.scala.Seq[p4.v1.p4runtime.Entity]
  ): _root_.p4.v1.p4runtime.ReadRequest = _root_.p4.v1.p4runtime.ReadRequest(
    deviceId,
    role,
    entities
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.ReadRequest])
}
