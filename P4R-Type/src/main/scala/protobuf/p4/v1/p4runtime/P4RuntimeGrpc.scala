// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime


object P4RuntimeGrpc {
  val METHOD_WRITE: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.WriteRequest, p4.v1.p4runtime.WriteResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "Write"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.WriteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.WriteResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_READ: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.ReadRequest, p4.v1.p4runtime.ReadResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "Read"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.ReadRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.ReadResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_SET_FORWARDING_PIPELINE_CONFIG: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.SetForwardingPipelineConfigRequest, p4.v1.p4runtime.SetForwardingPipelineConfigResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "SetForwardingPipelineConfig"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.SetForwardingPipelineConfigRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.SetForwardingPipelineConfigResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_GET_FORWARDING_PIPELINE_CONFIG: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.GetForwardingPipelineConfigRequest, p4.v1.p4runtime.GetForwardingPipelineConfigResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "GetForwardingPipelineConfig"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.GetForwardingPipelineConfigRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.GetForwardingPipelineConfigResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_STREAM_CHANNEL: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.StreamMessageRequest, p4.v1.p4runtime.StreamMessageResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "StreamChannel"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.StreamMessageRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.StreamMessageResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_CAPABILITIES: _root_.io.grpc.MethodDescriptor[p4.v1.p4runtime.CapabilitiesRequest, p4.v1.p4runtime.CapabilitiesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("p4.v1.P4Runtime", "Capabilities"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.CapabilitiesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[p4.v1.p4runtime.CapabilitiesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("p4.v1.P4Runtime")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(p4.v1.p4runtime.P4RuntimeProto.javaDescriptor))
      .addMethod(METHOD_WRITE)
      .addMethod(METHOD_READ)
      .addMethod(METHOD_SET_FORWARDING_PIPELINE_CONFIG)
      .addMethod(METHOD_GET_FORWARDING_PIPELINE_CONFIG)
      .addMethod(METHOD_STREAM_CHANNEL)
      .addMethod(METHOD_CAPABILITIES)
      .build()
  
  trait P4Runtime extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = P4Runtime
    /** Update one or more P4 entities on the target.
      */
    def write(request: p4.v1.p4runtime.WriteRequest): scala.concurrent.Future[p4.v1.p4runtime.WriteResponse]
    /** Read one or more P4 entities from the target.
      */
    def read(request: p4.v1.p4runtime.ReadRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.ReadResponse]): _root_.scala.Unit
    /** Sets the P4 forwarding-pipeline config.
      */
    def setForwardingPipelineConfig(request: p4.v1.p4runtime.SetForwardingPipelineConfigRequest): scala.concurrent.Future[p4.v1.p4runtime.SetForwardingPipelineConfigResponse]
    /** Gets the current P4 forwarding-pipeline config.
      */
    def getForwardingPipelineConfig(request: p4.v1.p4runtime.GetForwardingPipelineConfigRequest): scala.concurrent.Future[p4.v1.p4runtime.GetForwardingPipelineConfigResponse]
    /** Represents the bidirectional stream between the controller and the
      * switch (initiated by the controller), and is managed for the following
      * purposes:
      * - connection initiation through client arbitration
      * - indicating switch session liveness: the session is live when switch
      *   sends a positive client arbitration update to the controller, and is
      *   considered dead when either the stream breaks or the switch sends a
      *   negative update for client arbitration
      * - the controller sending/receiving packets to/from the switch
      * - streaming of notifications from the switch
      */
    def streamChannel(responseObserver: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageResponse]): _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageRequest]
    def capabilities(request: p4.v1.p4runtime.CapabilitiesRequest): scala.concurrent.Future[p4.v1.p4runtime.CapabilitiesResponse]
  }
  
  object P4Runtime extends _root_.scalapb.grpc.ServiceCompanion[P4Runtime] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[P4Runtime] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = p4.v1.p4runtime.P4RuntimeProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: P4Runtime, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_WRITE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[p4.v1.p4runtime.WriteRequest, p4.v1.p4runtime.WriteResponse] {
          override def invoke(request: p4.v1.p4runtime.WriteRequest, observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.WriteResponse]): _root_.scala.Unit =
            serviceImpl.write(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_READ,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall(new _root_.io.grpc.stub.ServerCalls.ServerStreamingMethod[p4.v1.p4runtime.ReadRequest, p4.v1.p4runtime.ReadResponse] {
          override def invoke(request: p4.v1.p4runtime.ReadRequest, observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.ReadResponse]): _root_.scala.Unit =
            serviceImpl.read(request, observer)
        }))
      .addMethod(
        METHOD_SET_FORWARDING_PIPELINE_CONFIG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[p4.v1.p4runtime.SetForwardingPipelineConfigRequest, p4.v1.p4runtime.SetForwardingPipelineConfigResponse] {
          override def invoke(request: p4.v1.p4runtime.SetForwardingPipelineConfigRequest, observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.SetForwardingPipelineConfigResponse]): _root_.scala.Unit =
            serviceImpl.setForwardingPipelineConfig(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_GET_FORWARDING_PIPELINE_CONFIG,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[p4.v1.p4runtime.GetForwardingPipelineConfigRequest, p4.v1.p4runtime.GetForwardingPipelineConfigResponse] {
          override def invoke(request: p4.v1.p4runtime.GetForwardingPipelineConfigRequest, observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.GetForwardingPipelineConfigResponse]): _root_.scala.Unit =
            serviceImpl.getForwardingPipelineConfig(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_STREAM_CHANNEL,
        _root_.io.grpc.stub.ServerCalls.asyncBidiStreamingCall(new _root_.io.grpc.stub.ServerCalls.BidiStreamingMethod[p4.v1.p4runtime.StreamMessageRequest, p4.v1.p4runtime.StreamMessageResponse] {
          override def invoke(observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageResponse]): _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageRequest] =
            serviceImpl.streamChannel(observer)
        }))
      .addMethod(
        METHOD_CAPABILITIES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[p4.v1.p4runtime.CapabilitiesRequest, p4.v1.p4runtime.CapabilitiesResponse] {
          override def invoke(request: p4.v1.p4runtime.CapabilitiesRequest, observer: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.CapabilitiesResponse]): _root_.scala.Unit =
            serviceImpl.capabilities(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait P4RuntimeBlockingClient {
    def serviceCompanion = P4Runtime
    /** Update one or more P4 entities on the target.
      */
    def write(request: p4.v1.p4runtime.WriteRequest): p4.v1.p4runtime.WriteResponse
    /** Read one or more P4 entities from the target.
      */
    def read(request: p4.v1.p4runtime.ReadRequest): scala.collection.Iterator[p4.v1.p4runtime.ReadResponse]
    /** Sets the P4 forwarding-pipeline config.
      */
    def setForwardingPipelineConfig(request: p4.v1.p4runtime.SetForwardingPipelineConfigRequest): p4.v1.p4runtime.SetForwardingPipelineConfigResponse
    /** Gets the current P4 forwarding-pipeline config.
      */
    def getForwardingPipelineConfig(request: p4.v1.p4runtime.GetForwardingPipelineConfigRequest): p4.v1.p4runtime.GetForwardingPipelineConfigResponse
    def capabilities(request: p4.v1.p4runtime.CapabilitiesRequest): p4.v1.p4runtime.CapabilitiesResponse
  }
  
  class P4RuntimeBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[P4RuntimeBlockingStub](channel, options) with P4RuntimeBlockingClient {
    /** Update one or more P4 entities on the target.
      */
    override def write(request: p4.v1.p4runtime.WriteRequest): p4.v1.p4runtime.WriteResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_WRITE, options, request)
    }
    
    /** Read one or more P4 entities from the target.
      */
    override def read(request: p4.v1.p4runtime.ReadRequest): scala.collection.Iterator[p4.v1.p4runtime.ReadResponse] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_READ, options, request)
    }
    
    /** Sets the P4 forwarding-pipeline config.
      */
    override def setForwardingPipelineConfig(request: p4.v1.p4runtime.SetForwardingPipelineConfigRequest): p4.v1.p4runtime.SetForwardingPipelineConfigResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SET_FORWARDING_PIPELINE_CONFIG, options, request)
    }
    
    /** Gets the current P4 forwarding-pipeline config.
      */
    override def getForwardingPipelineConfig(request: p4.v1.p4runtime.GetForwardingPipelineConfigRequest): p4.v1.p4runtime.GetForwardingPipelineConfigResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_FORWARDING_PIPELINE_CONFIG, options, request)
    }
    
    override def capabilities(request: p4.v1.p4runtime.CapabilitiesRequest): p4.v1.p4runtime.CapabilitiesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CAPABILITIES, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): P4RuntimeBlockingStub = new P4RuntimeBlockingStub(channel, options)
  }
  
  class P4RuntimeStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[P4RuntimeStub](channel, options) with P4Runtime {
    /** Update one or more P4 entities on the target.
      */
    override def write(request: p4.v1.p4runtime.WriteRequest): scala.concurrent.Future[p4.v1.p4runtime.WriteResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_WRITE, options, request)
    }
    
    /** Read one or more P4 entities from the target.
      */
    override def read(request: p4.v1.p4runtime.ReadRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.ReadResponse]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_READ, options, request, responseObserver)
    }
    
    /** Sets the P4 forwarding-pipeline config.
      */
    override def setForwardingPipelineConfig(request: p4.v1.p4runtime.SetForwardingPipelineConfigRequest): scala.concurrent.Future[p4.v1.p4runtime.SetForwardingPipelineConfigResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SET_FORWARDING_PIPELINE_CONFIG, options, request)
    }
    
    /** Gets the current P4 forwarding-pipeline config.
      */
    override def getForwardingPipelineConfig(request: p4.v1.p4runtime.GetForwardingPipelineConfigRequest): scala.concurrent.Future[p4.v1.p4runtime.GetForwardingPipelineConfigResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_FORWARDING_PIPELINE_CONFIG, options, request)
    }
    
    /** Represents the bidirectional stream between the controller and the
      * switch (initiated by the controller), and is managed for the following
      * purposes:
      * - connection initiation through client arbitration
      * - indicating switch session liveness: the session is live when switch
      *   sends a positive client arbitration update to the controller, and is
      *   considered dead when either the stream breaks or the switch sends a
      *   negative update for client arbitration
      * - the controller sending/receiving packets to/from the switch
      * - streaming of notifications from the switch
      */
    override def streamChannel(responseObserver: _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageResponse]): _root_.io.grpc.stub.StreamObserver[p4.v1.p4runtime.StreamMessageRequest] = {
      _root_.scalapb.grpc.ClientCalls.asyncBidiStreamingCall(channel, METHOD_STREAM_CHANNEL, options, responseObserver)
    }
    
    override def capabilities(request: p4.v1.p4runtime.CapabilitiesRequest): scala.concurrent.Future[p4.v1.p4runtime.CapabilitiesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CAPABILITIES, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): P4RuntimeStub = new P4RuntimeStub(channel, options)
  }
  
  object P4RuntimeStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[P4RuntimeStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): P4RuntimeStub = new P4RuntimeStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[P4RuntimeStub] = this
  }
  
  def bindService(serviceImpl: P4Runtime, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = P4Runtime.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): P4RuntimeBlockingStub = new P4RuntimeBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): P4RuntimeStub = new P4RuntimeStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = p4.v1.p4runtime.P4RuntimeProto.javaDescriptor.getServices().get(0)
  
}