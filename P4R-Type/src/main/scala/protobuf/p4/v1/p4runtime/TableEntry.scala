// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** @param priority
  *   Should only be set if the match implies a TCAM lookup, i.e. at least one of
  *   the match fields is Optional, Ternary or Range.  A higher number indicates
  *   higher priority.  Only a highest priority entry that matches the packet
  *   must be selected.  Multiple entries in the same table with the same
  *   priority value are permitted.  See Section "TableEntry" in the
  *   specification for details of the behavior.
  * @param controllerMetadata
  *   Metadata (cookie) opaque to the target. There is no requirement of where
  *   this is stored, as long as it is returned with the rest of the entry in
  *   a Read RPC. This is deprecated in favor of the more flexible metadata
  *   field.
  * @param meterConfig
  *   meter_config, counter_data and meter_counter_data are convenience fields
  *   that enable the controller to configure the direct resources associated
  *   with the table at the same time as a match-action entry is inserted or
  *   modified.
  *   Table write:
  *     - If the table does not contain a direct resource, then setting the
  *       corresponding direct resource field in any table write operation will
  *       return an error.
  *     - When inserting a new table entry, leaving these fields unset means that
  *       the direct resources of this table (if any) will assume default values.
  *       For counters, the default value is 0, and for meters, the default value
  *       is always green.
  *     - When updating a table entry, leaving meter_config unset will reset the
  *       meter (if any) to its default configuration, while leaving counter_data
  *       or meter_counter_data unset means that the counter (if any) will not be
  *       updated.
  *   Table read:
  *     - If the table does not contain a direct resource, then the corresponding
  *       field will not be set in the read table entry.
  *     - If meter_config is unset in the request, or if the meter has a default
  *       configuration, meter_config will not be set in the response.
  *     - If counter_data or meter_counter_data is unset in the request, it will
  *       be unset in the response as well.
  * @param meterCounterData
  *   Per color counters for tables with a direct meter.
  * @param isDefaultAction
  *   Set to true if the table entry is being used to update the non-const
  *   default action of the table. If true, the "match" field must be empty and
  *   the "action" field must be populated with a valid direct action.
  * @param idleTimeoutNs
  *   The TTL for the entry, in nanoseconds. A value of 0 means that the table
  *   entry never "expires".
  * @param timeSinceLastHit
  *   Table write: this field should be left unset.
  *   Table read: if the table supports idle timeout and time_since_last_hit is
  *   set in the request, this field will be set in the response.
  * @param metadata
  *   Arbitrary metadata from the controller that is opaque to the target.
  */
@SerialVersionUID(0L)
final case class TableEntry(
    tableId: _root_.scala.Int = 0,
    `match`: _root_.scala.Seq[p4.v1.p4runtime.FieldMatch] = _root_.scala.Seq.empty,
    action: _root_.scala.Option[p4.v1.p4runtime.TableAction] = _root_.scala.None,
    priority: _root_.scala.Int = 0,
    @scala.deprecated(message="Marked as deprecated in proto file", "") controllerMetadata: _root_.scala.Long = 0L,
    meterConfig: _root_.scala.Option[p4.v1.p4runtime.MeterConfig] = _root_.scala.None,
    counterData: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None,
    meterCounterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData] = _root_.scala.None,
    isDefaultAction: _root_.scala.Boolean = false,
    idleTimeoutNs: _root_.scala.Long = 0L,
    timeSinceLastHit: _root_.scala.Option[p4.v1.p4runtime.TableEntry.IdleTimeout] = _root_.scala.None,
    metadata: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TableEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = tableId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      `match`.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (action.isDefined) {
        val __value = action.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = priority
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      
      {
        val __value = controllerMetadata
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(5, __value)
        }
      };
      if (meterConfig.isDefined) {
        val __value = meterConfig.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (counterData.isDefined) {
        val __value = counterData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (meterCounterData.isDefined) {
        val __value = meterCounterData.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = isDefaultAction
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(8, __value)
        }
      };
      
      {
        val __value = idleTimeoutNs
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(9, __value)
        }
      };
      if (timeSinceLastHit.isDefined) {
        val __value = timeSinceLastHit.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = metadata
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(11, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = tableId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      `match`.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      action.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = priority
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      {
        val __v = controllerMetadata
        if (__v != 0L) {
          _output__.writeUInt64(5, __v)
        }
      };
      meterConfig.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      counterData.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = isDefaultAction
        if (__v != false) {
          _output__.writeBool(8, __v)
        }
      };
      {
        val __v = idleTimeoutNs
        if (__v != 0L) {
          _output__.writeInt64(9, __v)
        }
      };
      timeSinceLastHit.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = metadata
        if (!__v.isEmpty) {
          _output__.writeBytes(11, __v)
        }
      };
      meterCounterData.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTableId(__v: _root_.scala.Int): TableEntry = copy(tableId = __v)
    def clearMatch = copy(`match` = _root_.scala.Seq.empty)
    def addMatch(__vs: p4.v1.p4runtime.FieldMatch *): TableEntry = addAllMatch(__vs)
    def addAllMatch(__vs: Iterable[p4.v1.p4runtime.FieldMatch]): TableEntry = copy(`match` = `match` ++ __vs)
    def withMatch(__v: _root_.scala.Seq[p4.v1.p4runtime.FieldMatch]): TableEntry = copy(`match` = __v)
    def getAction: p4.v1.p4runtime.TableAction = action.getOrElse(p4.v1.p4runtime.TableAction.defaultInstance)
    def clearAction: TableEntry = copy(action = _root_.scala.None)
    def withAction(__v: p4.v1.p4runtime.TableAction): TableEntry = copy(action = Option(__v))
    def withPriority(__v: _root_.scala.Int): TableEntry = copy(priority = __v)
    def withControllerMetadata(__v: _root_.scala.Long): TableEntry = copy(controllerMetadata = __v)
    def getMeterConfig: p4.v1.p4runtime.MeterConfig = meterConfig.getOrElse(p4.v1.p4runtime.MeterConfig.defaultInstance)
    def clearMeterConfig: TableEntry = copy(meterConfig = _root_.scala.None)
    def withMeterConfig(__v: p4.v1.p4runtime.MeterConfig): TableEntry = copy(meterConfig = Option(__v))
    def getCounterData: p4.v1.p4runtime.CounterData = counterData.getOrElse(p4.v1.p4runtime.CounterData.defaultInstance)
    def clearCounterData: TableEntry = copy(counterData = _root_.scala.None)
    def withCounterData(__v: p4.v1.p4runtime.CounterData): TableEntry = copy(counterData = Option(__v))
    def getMeterCounterData: p4.v1.p4runtime.MeterCounterData = meterCounterData.getOrElse(p4.v1.p4runtime.MeterCounterData.defaultInstance)
    def clearMeterCounterData: TableEntry = copy(meterCounterData = _root_.scala.None)
    def withMeterCounterData(__v: p4.v1.p4runtime.MeterCounterData): TableEntry = copy(meterCounterData = Option(__v))
    def withIsDefaultAction(__v: _root_.scala.Boolean): TableEntry = copy(isDefaultAction = __v)
    def withIdleTimeoutNs(__v: _root_.scala.Long): TableEntry = copy(idleTimeoutNs = __v)
    def getTimeSinceLastHit: p4.v1.p4runtime.TableEntry.IdleTimeout = timeSinceLastHit.getOrElse(p4.v1.p4runtime.TableEntry.IdleTimeout.defaultInstance)
    def clearTimeSinceLastHit: TableEntry = copy(timeSinceLastHit = _root_.scala.None)
    def withTimeSinceLastHit(__v: p4.v1.p4runtime.TableEntry.IdleTimeout): TableEntry = copy(timeSinceLastHit = Option(__v))
    def withMetadata(__v: _root_.com.google.protobuf.ByteString): TableEntry = copy(metadata = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = tableId
          if (__t != 0) __t else null
        }
        case 2 => `match`
        case 3 => action.orNull
        case 4 => {
          val __t = priority
          if (__t != 0) __t else null
        }
        case 5 => {
          val __t = controllerMetadata
          if (__t != 0L) __t else null
        }
        case 6 => meterConfig.orNull
        case 7 => counterData.orNull
        case 12 => meterCounterData.orNull
        case 8 => {
          val __t = isDefaultAction
          if (__t != false) __t else null
        }
        case 9 => {
          val __t = idleTimeoutNs
          if (__t != 0L) __t else null
        }
        case 10 => timeSinceLastHit.orNull
        case 11 => {
          val __t = metadata
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(tableId)
        case 2 => _root_.scalapb.descriptors.PRepeated(`match`.iterator.map(_.toPMessage).toVector)
        case 3 => action.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PInt(priority)
        case 5 => _root_.scalapb.descriptors.PLong(controllerMetadata)
        case 6 => meterConfig.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => counterData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => meterCounterData.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => _root_.scalapb.descriptors.PBoolean(isDefaultAction)
        case 9 => _root_.scalapb.descriptors.PLong(idleTimeoutNs)
        case 10 => timeSinceLastHit.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => _root_.scalapb.descriptors.PByteString(metadata)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.TableEntry.type = p4.v1.p4runtime.TableEntry
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.TableEntry])
}

object TableEntry extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.TableEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.TableEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.TableEntry = {
    var __tableId: _root_.scala.Int = 0
    val __match: _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.FieldMatch] = new _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.FieldMatch]
    var __action: _root_.scala.Option[p4.v1.p4runtime.TableAction] = _root_.scala.None
    var __priority: _root_.scala.Int = 0
    var __controllerMetadata: _root_.scala.Long = 0L
    var __meterConfig: _root_.scala.Option[p4.v1.p4runtime.MeterConfig] = _root_.scala.None
    var __counterData: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None
    var __meterCounterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData] = _root_.scala.None
    var __isDefaultAction: _root_.scala.Boolean = false
    var __idleTimeoutNs: _root_.scala.Long = 0L
    var __timeSinceLastHit: _root_.scala.Option[p4.v1.p4runtime.TableEntry.IdleTimeout] = _root_.scala.None
    var __metadata: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __tableId = _input__.readUInt32()
        case 18 =>
          __match += _root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch](_input__)
        case 26 =>
          __action = Option(__action.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.TableAction](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __priority = _input__.readInt32()
        case 40 =>
          __controllerMetadata = _input__.readUInt64()
        case 50 =>
          __meterConfig = Option(__meterConfig.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.MeterConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __counterData = Option(__counterData.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.CounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __meterCounterData = Option(__meterCounterData.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.MeterCounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 64 =>
          __isDefaultAction = _input__.readBool()
        case 72 =>
          __idleTimeoutNs = _input__.readInt64()
        case 82 =>
          __timeSinceLastHit = Option(__timeSinceLastHit.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.TableEntry.IdleTimeout](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __metadata = _input__.readBytes()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.TableEntry(
        tableId = __tableId,
        `match` = __match.result(),
        action = __action,
        priority = __priority,
        controllerMetadata = __controllerMetadata,
        meterConfig = __meterConfig,
        counterData = __counterData,
        meterCounterData = __meterCounterData,
        isDefaultAction = __isDefaultAction,
        idleTimeoutNs = __idleTimeoutNs,
        timeSinceLastHit = __timeSinceLastHit,
        metadata = __metadata,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.TableEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.TableEntry(
        tableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        `match` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[p4.v1.p4runtime.FieldMatch]]).getOrElse(_root_.scala.Seq.empty),
        action = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.TableAction]]),
        priority = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        controllerMetadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        meterConfig = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.MeterConfig]]),
        counterData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.CounterData]]),
        meterCounterData = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.MeterCounterData]]),
        isDefaultAction = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        idleTimeoutNs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        timeSinceLastHit = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.TableEntry.IdleTimeout]]),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.FieldMatch
      case 3 => __out = p4.v1.p4runtime.TableAction
      case 6 => __out = p4.v1.p4runtime.MeterConfig
      case 7 => __out = p4.v1.p4runtime.CounterData
      case 12 => __out = p4.v1.p4runtime.MeterCounterData
      case 10 => __out = p4.v1.p4runtime.TableEntry.IdleTimeout
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.p4.v1.p4runtime.TableEntry.IdleTimeout
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.TableEntry(
    tableId = 0,
    `match` = _root_.scala.Seq.empty,
    action = _root_.scala.None,
    priority = 0,
    controllerMetadata = 0L,
    meterConfig = _root_.scala.None,
    counterData = _root_.scala.None,
    meterCounterData = _root_.scala.None,
    isDefaultAction = false,
    idleTimeoutNs = 0L,
    timeSinceLastHit = _root_.scala.None,
    metadata = _root_.com.google.protobuf.ByteString.EMPTY
  )
  /** @param elapsedNs
    *   Time elapsed - in nanoseconds - since the table entry was last "hit" as
    *   part of a data plane table lookup.
    */
  @SerialVersionUID(0L)
  final case class IdleTimeout(
      elapsedNs: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IdleTimeout] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = elapsedNs
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = elapsedNs
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withElapsedNs(__v: _root_.scala.Long): IdleTimeout = copy(elapsedNs = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = elapsedNs
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(elapsedNs)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.TableEntry.IdleTimeout.type = p4.v1.p4runtime.TableEntry.IdleTimeout
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.TableEntry.IdleTimeout])
  }
  
  object IdleTimeout extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.TableEntry.IdleTimeout] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.TableEntry.IdleTimeout] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.TableEntry.IdleTimeout = {
      var __elapsedNs: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __elapsedNs = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.TableEntry.IdleTimeout(
          elapsedNs = __elapsedNs,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.TableEntry.IdleTimeout] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.TableEntry.IdleTimeout(
          elapsedNs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.TableEntry.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.TableEntry.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.TableEntry.IdleTimeout(
      elapsedNs = 0L
    )
    implicit class IdleTimeoutLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.TableEntry.IdleTimeout]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.TableEntry.IdleTimeout](_l) {
      def elapsedNs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.elapsedNs)((c_, f_) => c_.copy(elapsedNs = f_))
    }
    final val ELAPSED_NS_FIELD_NUMBER = 1
    def of(
      elapsedNs: _root_.scala.Long
    ): _root_.p4.v1.p4runtime.TableEntry.IdleTimeout = _root_.p4.v1.p4runtime.TableEntry.IdleTimeout(
      elapsedNs
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.TableEntry.IdleTimeout])
  }
  
  implicit class TableEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.TableEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.TableEntry](_l) {
    def tableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.tableId)((c_, f_) => c_.copy(tableId = f_))
    def `match`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.v1.p4runtime.FieldMatch]] = field(_.`match`)((c_, f_) => c_.copy(`match` = f_))
    def action: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.TableAction] = field(_.getAction)((c_, f_) => c_.copy(action = Option(f_)))
    def optionalAction: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.TableAction]] = field(_.action)((c_, f_) => c_.copy(action = f_))
    def priority: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.priority)((c_, f_) => c_.copy(priority = f_))
    def controllerMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.controllerMetadata)((c_, f_) => c_.copy(controllerMetadata = f_))
    def meterConfig: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MeterConfig] = field(_.getMeterConfig)((c_, f_) => c_.copy(meterConfig = Option(f_)))
    def optionalMeterConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.MeterConfig]] = field(_.meterConfig)((c_, f_) => c_.copy(meterConfig = f_))
    def counterData: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.CounterData] = field(_.getCounterData)((c_, f_) => c_.copy(counterData = Option(f_)))
    def optionalCounterData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.CounterData]] = field(_.counterData)((c_, f_) => c_.copy(counterData = f_))
    def meterCounterData: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MeterCounterData] = field(_.getMeterCounterData)((c_, f_) => c_.copy(meterCounterData = Option(f_)))
    def optionalMeterCounterData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.MeterCounterData]] = field(_.meterCounterData)((c_, f_) => c_.copy(meterCounterData = f_))
    def isDefaultAction: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isDefaultAction)((c_, f_) => c_.copy(isDefaultAction = f_))
    def idleTimeoutNs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.idleTimeoutNs)((c_, f_) => c_.copy(idleTimeoutNs = f_))
    def timeSinceLastHit: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.TableEntry.IdleTimeout] = field(_.getTimeSinceLastHit)((c_, f_) => c_.copy(timeSinceLastHit = Option(f_)))
    def optionalTimeSinceLastHit: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.TableEntry.IdleTimeout]] = field(_.timeSinceLastHit)((c_, f_) => c_.copy(timeSinceLastHit = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
  }
  final val TABLE_ID_FIELD_NUMBER = 1
  final val MATCH_FIELD_NUMBER = 2
  final val ACTION_FIELD_NUMBER = 3
  final val PRIORITY_FIELD_NUMBER = 4
  final val CONTROLLER_METADATA_FIELD_NUMBER = 5
  final val METER_CONFIG_FIELD_NUMBER = 6
  final val COUNTER_DATA_FIELD_NUMBER = 7
  final val METER_COUNTER_DATA_FIELD_NUMBER = 12
  final val IS_DEFAULT_ACTION_FIELD_NUMBER = 8
  final val IDLE_TIMEOUT_NS_FIELD_NUMBER = 9
  final val TIME_SINCE_LAST_HIT_FIELD_NUMBER = 10
  final val METADATA_FIELD_NUMBER = 11
  def of(
    tableId: _root_.scala.Int,
    `match`: _root_.scala.Seq[p4.v1.p4runtime.FieldMatch],
    action: _root_.scala.Option[p4.v1.p4runtime.TableAction],
    priority: _root_.scala.Int,
    controllerMetadata: _root_.scala.Long,
    meterConfig: _root_.scala.Option[p4.v1.p4runtime.MeterConfig],
    counterData: _root_.scala.Option[p4.v1.p4runtime.CounterData],
    meterCounterData: _root_.scala.Option[p4.v1.p4runtime.MeterCounterData],
    isDefaultAction: _root_.scala.Boolean,
    idleTimeoutNs: _root_.scala.Long,
    timeSinceLastHit: _root_.scala.Option[p4.v1.p4runtime.TableEntry.IdleTimeout],
    metadata: _root_.com.google.protobuf.ByteString
  ): _root_.p4.v1.p4runtime.TableEntry = _root_.p4.v1.p4runtime.TableEntry(
    tableId,
    `match`,
    action,
    priority,
    controllerMetadata,
    meterConfig,
    counterData,
    meterCounterData,
    isDefaultAction,
    idleTimeoutNs,
    timeSinceLastHit,
    metadata
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.TableEntry])
}
