// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  */
@SerialVersionUID(0L)
final case class StreamMessageRequest(
    update: p4.v1.p4runtime.StreamMessageRequest.Update = p4.v1.p4runtime.StreamMessageRequest.Update.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StreamMessageRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (update.arbitration.isDefined) {
        val __value = update.arbitration.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (update.packet.isDefined) {
        val __value = update.packet.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (update.digestAck.isDefined) {
        val __value = update.digestAck.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (update.other.isDefined) {
        val __value = update.other.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      update.arbitration.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      update.packet.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      update.digestAck.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      update.other.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getArbitration: p4.v1.p4runtime.MasterArbitrationUpdate = update.arbitration.getOrElse(p4.v1.p4runtime.MasterArbitrationUpdate.defaultInstance)
    def withArbitration(__v: p4.v1.p4runtime.MasterArbitrationUpdate): StreamMessageRequest = copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Arbitration(__v))
    def getPacket: p4.v1.p4runtime.PacketOut = update.packet.getOrElse(p4.v1.p4runtime.PacketOut.defaultInstance)
    def withPacket(__v: p4.v1.p4runtime.PacketOut): StreamMessageRequest = copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Packet(__v))
    def getDigestAck: p4.v1.p4runtime.DigestListAck = update.digestAck.getOrElse(p4.v1.p4runtime.DigestListAck.defaultInstance)
    def withDigestAck(__v: p4.v1.p4runtime.DigestListAck): StreamMessageRequest = copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.DigestAck(__v))
    def getOther: com.google.protobuf.any.Any = update.other.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def withOther(__v: com.google.protobuf.any.Any): StreamMessageRequest = copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Other(__v))
    def clearUpdate: StreamMessageRequest = copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Empty)
    def withUpdate(__v: p4.v1.p4runtime.StreamMessageRequest.Update): StreamMessageRequest = copy(update = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => update.arbitration.orNull
        case 2 => update.packet.orNull
        case 3 => update.digestAck.orNull
        case 4 => update.other.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => update.arbitration.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => update.packet.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => update.digestAck.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => update.other.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.StreamMessageRequest.type = p4.v1.p4runtime.StreamMessageRequest
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.StreamMessageRequest])
}

object StreamMessageRequest extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.StreamMessageRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.StreamMessageRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.StreamMessageRequest = {
    var __update: p4.v1.p4runtime.StreamMessageRequest.Update = p4.v1.p4runtime.StreamMessageRequest.Update.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __update = p4.v1.p4runtime.StreamMessageRequest.Update.Arbitration(__update.arbitration.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.MasterArbitrationUpdate](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __update = p4.v1.p4runtime.StreamMessageRequest.Update.Packet(__update.packet.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.PacketOut](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __update = p4.v1.p4runtime.StreamMessageRequest.Update.DigestAck(__update.digestAck.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.DigestListAck](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __update = p4.v1.p4runtime.StreamMessageRequest.Update.Other(__update.other.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.StreamMessageRequest(
        update = __update,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.StreamMessageRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.StreamMessageRequest(
        update = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.MasterArbitrationUpdate]]).map(p4.v1.p4runtime.StreamMessageRequest.Update.Arbitration(_))
            .orElse[p4.v1.p4runtime.StreamMessageRequest.Update](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.PacketOut]]).map(p4.v1.p4runtime.StreamMessageRequest.Update.Packet(_)))
            .orElse[p4.v1.p4runtime.StreamMessageRequest.Update](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.DigestListAck]]).map(p4.v1.p4runtime.StreamMessageRequest.Update.DigestAck(_)))
            .orElse[p4.v1.p4runtime.StreamMessageRequest.Update](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]).map(p4.v1.p4runtime.StreamMessageRequest.Update.Other(_)))
            .getOrElse(p4.v1.p4runtime.StreamMessageRequest.Update.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(31)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(31)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.v1.p4runtime.MasterArbitrationUpdate
      case 2 => __out = p4.v1.p4runtime.PacketOut
      case 3 => __out = p4.v1.p4runtime.DigestListAck
      case 4 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.StreamMessageRequest(
    update = p4.v1.p4runtime.StreamMessageRequest.Update.Empty
  )
  sealed trait Update extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isArbitration: _root_.scala.Boolean = false
    def isPacket: _root_.scala.Boolean = false
    def isDigestAck: _root_.scala.Boolean = false
    def isOther: _root_.scala.Boolean = false
    def arbitration: _root_.scala.Option[p4.v1.p4runtime.MasterArbitrationUpdate] = _root_.scala.None
    def packet: _root_.scala.Option[p4.v1.p4runtime.PacketOut] = _root_.scala.None
    def digestAck: _root_.scala.Option[p4.v1.p4runtime.DigestListAck] = _root_.scala.None
    def other: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
  }
  object Update {
    @SerialVersionUID(0L)
    case object Empty extends p4.v1.p4runtime.StreamMessageRequest.Update {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Arbitration(value: p4.v1.p4runtime.MasterArbitrationUpdate) extends p4.v1.p4runtime.StreamMessageRequest.Update {
      type ValueType = p4.v1.p4runtime.MasterArbitrationUpdate
      override def isArbitration: _root_.scala.Boolean = true
      override def arbitration: _root_.scala.Option[p4.v1.p4runtime.MasterArbitrationUpdate] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Packet(value: p4.v1.p4runtime.PacketOut) extends p4.v1.p4runtime.StreamMessageRequest.Update {
      type ValueType = p4.v1.p4runtime.PacketOut
      override def isPacket: _root_.scala.Boolean = true
      override def packet: _root_.scala.Option[p4.v1.p4runtime.PacketOut] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class DigestAck(value: p4.v1.p4runtime.DigestListAck) extends p4.v1.p4runtime.StreamMessageRequest.Update {
      type ValueType = p4.v1.p4runtime.DigestListAck
      override def isDigestAck: _root_.scala.Boolean = true
      override def digestAck: _root_.scala.Option[p4.v1.p4runtime.DigestListAck] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Other(value: com.google.protobuf.any.Any) extends p4.v1.p4runtime.StreamMessageRequest.Update {
      type ValueType = com.google.protobuf.any.Any
      override def isOther: _root_.scala.Boolean = true
      override def other: _root_.scala.Option[com.google.protobuf.any.Any] = Some(value)
      override def number: _root_.scala.Int = 4
    }
  }
  implicit class StreamMessageRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.StreamMessageRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.StreamMessageRequest](_l) {
    def arbitration: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MasterArbitrationUpdate] = field(_.getArbitration)((c_, f_) => c_.copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Arbitration(f_)))
    def packet: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.PacketOut] = field(_.getPacket)((c_, f_) => c_.copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Packet(f_)))
    def digestAck: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DigestListAck] = field(_.getDigestAck)((c_, f_) => c_.copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.DigestAck(f_)))
    def other: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getOther)((c_, f_) => c_.copy(update = p4.v1.p4runtime.StreamMessageRequest.Update.Other(f_)))
    def update: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.StreamMessageRequest.Update] = field(_.update)((c_, f_) => c_.copy(update = f_))
  }
  final val ARBITRATION_FIELD_NUMBER = 1
  final val PACKET_FIELD_NUMBER = 2
  final val DIGEST_ACK_FIELD_NUMBER = 3
  final val OTHER_FIELD_NUMBER = 4
  def of(
    update: p4.v1.p4runtime.StreamMessageRequest.Update
  ): _root_.p4.v1.p4runtime.StreamMessageRequest = _root_.p4.v1.p4runtime.StreamMessageRequest(
    update
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.StreamMessageRequest])
}
