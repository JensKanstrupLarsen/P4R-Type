// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  */
@SerialVersionUID(0L)
final case class SetForwardingPipelineConfigRequest(
    deviceId: _root_.scala.Long = 0L,
    @scala.deprecated(message="Marked as deprecated in proto file", "") roleId: _root_.scala.Long = 0L,
    role: _root_.scala.Predef.String = "",
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None,
    action: p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.UNSPECIFIED,
    config: _root_.scala.Option[p4.v1.p4runtime.ForwardingPipelineConfig] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SetForwardingPipelineConfigRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = deviceId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      
      {
        val __value = roleId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      
      {
        val __value = role
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      if (electionId.isDefined) {
        val __value = electionId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = action.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      if (config.isDefined) {
        val __value = config.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = deviceId
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      {
        val __v = roleId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      electionId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = action.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      config.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = role
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDeviceId(__v: _root_.scala.Long): SetForwardingPipelineConfigRequest = copy(deviceId = __v)
    def withRoleId(__v: _root_.scala.Long): SetForwardingPipelineConfigRequest = copy(roleId = __v)
    def withRole(__v: _root_.scala.Predef.String): SetForwardingPipelineConfigRequest = copy(role = __v)
    def getElectionId: p4.v1.p4runtime.Uint128 = electionId.getOrElse(p4.v1.p4runtime.Uint128.defaultInstance)
    def clearElectionId: SetForwardingPipelineConfigRequest = copy(electionId = _root_.scala.None)
    def withElectionId(__v: p4.v1.p4runtime.Uint128): SetForwardingPipelineConfigRequest = copy(electionId = Option(__v))
    def withAction(__v: p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action): SetForwardingPipelineConfigRequest = copy(action = __v)
    def getConfig: p4.v1.p4runtime.ForwardingPipelineConfig = config.getOrElse(p4.v1.p4runtime.ForwardingPipelineConfig.defaultInstance)
    def clearConfig: SetForwardingPipelineConfigRequest = copy(config = _root_.scala.None)
    def withConfig(__v: p4.v1.p4runtime.ForwardingPipelineConfig): SetForwardingPipelineConfigRequest = copy(config = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = deviceId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = roleId
          if (__t != 0L) __t else null
        }
        case 6 => {
          val __t = role
          if (__t != "") __t else null
        }
        case 3 => electionId.orNull
        case 4 => {
          val __t = action.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 5 => config.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(deviceId)
        case 2 => _root_.scalapb.descriptors.PLong(roleId)
        case 6 => _root_.scalapb.descriptors.PString(role)
        case 3 => electionId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PEnum(action.scalaValueDescriptor)
        case 5 => config.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.SetForwardingPipelineConfigRequest.type = p4.v1.p4runtime.SetForwardingPipelineConfigRequest
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.SetForwardingPipelineConfigRequest])
}

object SetForwardingPipelineConfigRequest extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.SetForwardingPipelineConfigRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.SetForwardingPipelineConfigRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.SetForwardingPipelineConfigRequest = {
    var __deviceId: _root_.scala.Long = 0L
    var __roleId: _root_.scala.Long = 0L
    var __role: _root_.scala.Predef.String = ""
    var __electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None
    var __action: p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.UNSPECIFIED
    var __config: _root_.scala.Option[p4.v1.p4runtime.ForwardingPipelineConfig] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __deviceId = _input__.readUInt64()
        case 16 =>
          __roleId = _input__.readUInt64()
        case 50 =>
          __role = _input__.readStringRequireUtf8()
        case 26 =>
          __electionId = Option(__electionId.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Uint128](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __action = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.fromValue(_input__.readEnum())
        case 42 =>
          __config = Option(__config.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.ForwardingPipelineConfig](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.SetForwardingPipelineConfigRequest(
        deviceId = __deviceId,
        roleId = __roleId,
        role = __role,
        electionId = __electionId,
        action = __action,
        config = __config,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.SetForwardingPipelineConfigRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.SetForwardingPipelineConfigRequest(
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        roleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        role = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        electionId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.Uint128]]),
        action = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.UNSPECIFIED.scalaValueDescriptor).number),
        config = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.ForwardingPipelineConfig]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = p4.v1.p4runtime.Uint128
      case 5 => __out = p4.v1.p4runtime.ForwardingPipelineConfig
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action
    }
  }
  lazy val defaultInstance = p4.v1.p4runtime.SetForwardingPipelineConfigRequest(
    deviceId = 0L,
    roleId = 0L,
    role = "",
    electionId = _root_.scala.None,
    action = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.UNSPECIFIED,
    config = _root_.scala.None
  )
  sealed abstract class Action(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Action
    def isUnspecified: _root_.scala.Boolean = false
    def isVerify: _root_.scala.Boolean = false
    def isVerifyAndSave: _root_.scala.Boolean = false
    def isVerifyAndCommit: _root_.scala.Boolean = false
    def isCommit: _root_.scala.Boolean = false
    def isReconcileAndCommit: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Action] = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action
    final def asRecognized: _root_.scala.Option[p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action.Recognized])
  }
  
  object Action extends _root_.scalapb.GeneratedEnumCompanion[Action] {
    sealed trait Recognized extends Action
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Action] = this
    
    @SerialVersionUID(0L)
    case object UNSPECIFIED extends Action(0) with Action.Recognized {
      val index = 0
      val name = "UNSPECIFIED"
      override def isUnspecified: _root_.scala.Boolean = true
    }
    
    /** Verify that the target can realize the given config. Do not modify the
      * forwarding state in the target. Returns error if config is not provided
      * of if the provided config cannot be realized.
      */
    @SerialVersionUID(0L)
    case object VERIFY extends Action(1) with Action.Recognized {
      val index = 1
      val name = "VERIFY"
      override def isVerify: _root_.scala.Boolean = true
    }
    
    /** Save the config if the target can realize it. Do not modify the
      * forwarding state in the target. Any subsequent read/write requests must
      * refer to fields in the new config. Returns error if config is not
      * provided of if the provided config cannot be realized.
      */
    @SerialVersionUID(0L)
    case object VERIFY_AND_SAVE extends Action(2) with Action.Recognized {
      val index = 2
      val name = "VERIFY_AND_SAVE"
      override def isVerifyAndSave: _root_.scala.Boolean = true
    }
    
    /** Verify, save and realize the given config. Clear the forwarding state
      * in the target. Returns error if config is not provided of if the
      * provided config cannot be realized.
      */
    @SerialVersionUID(0L)
    case object VERIFY_AND_COMMIT extends Action(3) with Action.Recognized {
      val index = 3
      val name = "VERIFY_AND_COMMIT"
      override def isVerifyAndCommit: _root_.scala.Boolean = true
    }
    
    /** Realize the last saved, but not yet committed, config. Update the
      * forwarding state in the target by replaying the write requests since the
      * last config was saved. Config should not be provided for this action
      * type. Returns an error if no saved config is found or if a config is
      * provided with this message.
      */
    @SerialVersionUID(0L)
    case object COMMIT extends Action(4) with Action.Recognized {
      val index = 4
      val name = "COMMIT"
      override def isCommit: _root_.scala.Boolean = true
    }
    
    /** Verify, save and realize the given config, while preserving the
      * forwarding state in the target. This is an advanced use case to enable
      * changes to the P4 forwarding pipeline configuration with minimal traffic
      * loss. P4Runtime does not impose any constraints on the duration of the
      * traffic loss. The support for this option is not expected to be uniform
      * across all P4Runtime targets. A target that does not support this option
      * may return an UNIMPLEMENTED error. For targets that support this option,
      * an INVALID_ARGUMENT error is returned if no config is provided, or if
      * the existing forwarding state cannot be preserved for the given config
      * by the target.
      */
    @SerialVersionUID(0L)
    case object RECONCILE_AND_COMMIT extends Action(5) with Action.Recognized {
      val index = 5
      val name = "RECONCILE_AND_COMMIT"
      override def isReconcileAndCommit: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Action(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(UNSPECIFIED, VERIFY, VERIFY_AND_SAVE, VERIFY_AND_COMMIT, COMMIT, RECONCILE_AND_COMMIT)
    def fromValue(__value: _root_.scala.Int): Action = __value match {
      case 0 => UNSPECIFIED
      case 1 => VERIFY
      case 2 => VERIFY_AND_SAVE
      case 3 => VERIFY_AND_COMMIT
      case 4 => COMMIT
      case 5 => RECONCILE_AND_COMMIT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = p4.v1.p4runtime.SetForwardingPipelineConfigRequest.scalaDescriptor.enums(0)
  }
  implicit class SetForwardingPipelineConfigRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.SetForwardingPipelineConfigRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.SetForwardingPipelineConfigRequest](_l) {
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def roleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.roleId)((c_, f_) => c_.copy(roleId = f_))
    def role: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def electionId: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Uint128] = field(_.getElectionId)((c_, f_) => c_.copy(electionId = Option(f_)))
    def optionalElectionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.Uint128]] = field(_.electionId)((c_, f_) => c_.copy(electionId = f_))
    def action: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action] = field(_.action)((c_, f_) => c_.copy(action = f_))
    def config: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.ForwardingPipelineConfig] = field(_.getConfig)((c_, f_) => c_.copy(config = Option(f_)))
    def optionalConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.ForwardingPipelineConfig]] = field(_.config)((c_, f_) => c_.copy(config = f_))
  }
  final val DEVICE_ID_FIELD_NUMBER = 1
  final val ROLE_ID_FIELD_NUMBER = 2
  final val ROLE_FIELD_NUMBER = 6
  final val ELECTION_ID_FIELD_NUMBER = 3
  final val ACTION_FIELD_NUMBER = 4
  final val CONFIG_FIELD_NUMBER = 5
  def of(
    deviceId: _root_.scala.Long,
    roleId: _root_.scala.Long,
    role: _root_.scala.Predef.String,
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128],
    action: p4.v1.p4runtime.SetForwardingPipelineConfigRequest.Action,
    config: _root_.scala.Option[p4.v1.p4runtime.ForwardingPipelineConfig]
  ): _root_.p4.v1.p4runtime.SetForwardingPipelineConfigRequest = _root_.p4.v1.p4runtime.SetForwardingPipelineConfigRequest(
    deviceId,
    roleId,
    role,
    electionId,
    action,
    config
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.SetForwardingPipelineConfigRequest])
}
