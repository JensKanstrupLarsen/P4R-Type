// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

@SerialVersionUID(0L)
final case class MeterCounterData(
    green: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None,
    yellow: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None,
    red: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MeterCounterData] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (green.isDefined) {
        val __value = green.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (yellow.isDefined) {
        val __value = yellow.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (red.isDefined) {
        val __value = red.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      green.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      yellow.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      red.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getGreen: p4.v1.p4runtime.CounterData = green.getOrElse(p4.v1.p4runtime.CounterData.defaultInstance)
    def clearGreen: MeterCounterData = copy(green = _root_.scala.None)
    def withGreen(__v: p4.v1.p4runtime.CounterData): MeterCounterData = copy(green = Option(__v))
    def getYellow: p4.v1.p4runtime.CounterData = yellow.getOrElse(p4.v1.p4runtime.CounterData.defaultInstance)
    def clearYellow: MeterCounterData = copy(yellow = _root_.scala.None)
    def withYellow(__v: p4.v1.p4runtime.CounterData): MeterCounterData = copy(yellow = Option(__v))
    def getRed: p4.v1.p4runtime.CounterData = red.getOrElse(p4.v1.p4runtime.CounterData.defaultInstance)
    def clearRed: MeterCounterData = copy(red = _root_.scala.None)
    def withRed(__v: p4.v1.p4runtime.CounterData): MeterCounterData = copy(red = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => green.orNull
        case 2 => yellow.orNull
        case 3 => red.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => green.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => yellow.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => red.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.MeterCounterData.type = p4.v1.p4runtime.MeterCounterData
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.MeterCounterData])
}

object MeterCounterData extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MeterCounterData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MeterCounterData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.MeterCounterData = {
    var __green: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None
    var __yellow: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None
    var __red: _root_.scala.Option[p4.v1.p4runtime.CounterData] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __green = Option(__green.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.CounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __yellow = Option(__yellow.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.CounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __red = Option(__red.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.CounterData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.MeterCounterData(
        green = __green,
        yellow = __yellow,
        red = __red,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.MeterCounterData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.MeterCounterData(
        green = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.CounterData]]),
        yellow = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.CounterData]]),
        red = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.CounterData]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.v1.p4runtime.CounterData
      case 2 => __out = p4.v1.p4runtime.CounterData
      case 3 => __out = p4.v1.p4runtime.CounterData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.MeterCounterData(
    green = _root_.scala.None,
    yellow = _root_.scala.None,
    red = _root_.scala.None
  )
  implicit class MeterCounterDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MeterCounterData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.MeterCounterData](_l) {
    def green: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.CounterData] = field(_.getGreen)((c_, f_) => c_.copy(green = Option(f_)))
    def optionalGreen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.CounterData]] = field(_.green)((c_, f_) => c_.copy(green = f_))
    def yellow: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.CounterData] = field(_.getYellow)((c_, f_) => c_.copy(yellow = Option(f_)))
    def optionalYellow: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.CounterData]] = field(_.yellow)((c_, f_) => c_.copy(yellow = f_))
    def red: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.CounterData] = field(_.getRed)((c_, f_) => c_.copy(red = Option(f_)))
    def optionalRed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.CounterData]] = field(_.red)((c_, f_) => c_.copy(red = f_))
  }
  final val GREEN_FIELD_NUMBER = 1
  final val YELLOW_FIELD_NUMBER = 2
  final val RED_FIELD_NUMBER = 3
  def of(
    green: _root_.scala.Option[p4.v1.p4runtime.CounterData],
    yellow: _root_.scala.Option[p4.v1.p4runtime.CounterData],
    red: _root_.scala.Option[p4.v1.p4runtime.CounterData]
  ): _root_.p4.v1.p4runtime.MeterCounterData = _root_.p4.v1.p4runtime.MeterCounterData(
    green,
    yellow,
    red
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.MeterCounterData])
}
