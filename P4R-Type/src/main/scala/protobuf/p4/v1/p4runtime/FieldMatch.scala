// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** field_match_type ::= exact | ternary | lpm | range | optional
  */
@SerialVersionUID(0L)
final case class FieldMatch(
    fieldId: _root_.scala.Int = 0,
    fieldMatchType: p4.v1.p4runtime.FieldMatch.FieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FieldMatch] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = fieldId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (fieldMatchType.exact.isDefined) {
        val __value = fieldMatchType.exact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (fieldMatchType.ternary.isDefined) {
        val __value = fieldMatchType.ternary.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (fieldMatchType.lpm.isDefined) {
        val __value = fieldMatchType.lpm.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (fieldMatchType.range.isDefined) {
        val __value = fieldMatchType.range.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (fieldMatchType.optional.isDefined) {
        val __value = fieldMatchType.optional.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (fieldMatchType.other.isDefined) {
        val __value = fieldMatchType.other.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = fieldId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      fieldMatchType.exact.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldMatchType.ternary.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldMatchType.lpm.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldMatchType.range.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldMatchType.optional.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      fieldMatchType.other.foreach { __v =>
        val __m = __v
        _output__.writeTag(100, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withFieldId(__v: _root_.scala.Int): FieldMatch = copy(fieldId = __v)
    def getExact: p4.v1.p4runtime.FieldMatch.Exact = fieldMatchType.exact.getOrElse(p4.v1.p4runtime.FieldMatch.Exact.defaultInstance)
    def withExact(__v: p4.v1.p4runtime.FieldMatch.Exact): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Exact(__v))
    def getTernary: p4.v1.p4runtime.FieldMatch.Ternary = fieldMatchType.ternary.getOrElse(p4.v1.p4runtime.FieldMatch.Ternary.defaultInstance)
    def withTernary(__v: p4.v1.p4runtime.FieldMatch.Ternary): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Ternary(__v))
    def getLpm: p4.v1.p4runtime.FieldMatch.LPM = fieldMatchType.lpm.getOrElse(p4.v1.p4runtime.FieldMatch.LPM.defaultInstance)
    def withLpm(__v: p4.v1.p4runtime.FieldMatch.LPM): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Lpm(__v))
    def getRange: p4.v1.p4runtime.FieldMatch.Range = fieldMatchType.range.getOrElse(p4.v1.p4runtime.FieldMatch.Range.defaultInstance)
    def withRange(__v: p4.v1.p4runtime.FieldMatch.Range): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Range(__v))
    def getOptional: p4.v1.p4runtime.FieldMatch.Optional = fieldMatchType.optional.getOrElse(p4.v1.p4runtime.FieldMatch.Optional.defaultInstance)
    def withOptional(__v: p4.v1.p4runtime.FieldMatch.Optional): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Optional(__v))
    def getOther: com.google.protobuf.any.Any = fieldMatchType.other.getOrElse(com.google.protobuf.any.Any.defaultInstance)
    def withOther(__v: com.google.protobuf.any.Any): FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Other(__v))
    def clearFieldMatchType: FieldMatch = copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Empty)
    def withFieldMatchType(__v: p4.v1.p4runtime.FieldMatch.FieldMatchType): FieldMatch = copy(fieldMatchType = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = fieldId
          if (__t != 0) __t else null
        }
        case 2 => fieldMatchType.exact.orNull
        case 3 => fieldMatchType.ternary.orNull
        case 4 => fieldMatchType.lpm.orNull
        case 6 => fieldMatchType.range.orNull
        case 7 => fieldMatchType.optional.orNull
        case 100 => fieldMatchType.other.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(fieldId)
        case 2 => fieldMatchType.exact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => fieldMatchType.ternary.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => fieldMatchType.lpm.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => fieldMatchType.range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => fieldMatchType.optional.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 100 => fieldMatchType.other.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.FieldMatch.type = p4.v1.p4runtime.FieldMatch
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch])
}

object FieldMatch extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch = {
    var __fieldId: _root_.scala.Int = 0
    var __fieldMatchType: p4.v1.p4runtime.FieldMatch.FieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __fieldId = _input__.readUInt32()
        case 18 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Exact(__fieldMatchType.exact.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch.Exact](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Ternary(__fieldMatchType.ternary.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch.Ternary](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Lpm(__fieldMatchType.lpm.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch.LPM](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Range(__fieldMatchType.range.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Optional(__fieldMatchType.optional.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.FieldMatch.Optional](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 802 =>
          __fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Other(__fieldMatchType.other.fold(_root_.scalapb.LiteParser.readMessage[com.google.protobuf.any.Any](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.FieldMatch(
        fieldId = __fieldId,
        fieldMatchType = __fieldMatchType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.FieldMatch(
        fieldId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        fieldMatchType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.FieldMatch.Exact]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Exact(_))
            .orElse[p4.v1.p4runtime.FieldMatch.FieldMatchType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.FieldMatch.Ternary]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Ternary(_)))
            .orElse[p4.v1.p4runtime.FieldMatch.FieldMatchType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.FieldMatch.LPM]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Lpm(_)))
            .orElse[p4.v1.p4runtime.FieldMatch.FieldMatchType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.FieldMatch.Range]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Range(_)))
            .orElse[p4.v1.p4runtime.FieldMatch.FieldMatchType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.FieldMatch.Optional]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Optional(_)))
            .orElse[p4.v1.p4runtime.FieldMatch.FieldMatchType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(100).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]]).map(p4.v1.p4runtime.FieldMatch.FieldMatchType.Other(_)))
            .getOrElse(p4.v1.p4runtime.FieldMatch.FieldMatchType.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.FieldMatch.Exact
      case 3 => __out = p4.v1.p4runtime.FieldMatch.Ternary
      case 4 => __out = p4.v1.p4runtime.FieldMatch.LPM
      case 6 => __out = p4.v1.p4runtime.FieldMatch.Range
      case 7 => __out = p4.v1.p4runtime.FieldMatch.Optional
      case 100 => __out = com.google.protobuf.any.Any
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.p4.v1.p4runtime.FieldMatch.Exact,
      _root_.p4.v1.p4runtime.FieldMatch.Ternary,
      _root_.p4.v1.p4runtime.FieldMatch.LPM,
      _root_.p4.v1.p4runtime.FieldMatch.Range,
      _root_.p4.v1.p4runtime.FieldMatch.Optional
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.FieldMatch(
    fieldId = 0,
    fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Empty
  )
  sealed trait FieldMatchType extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isExact: _root_.scala.Boolean = false
    def isTernary: _root_.scala.Boolean = false
    def isLpm: _root_.scala.Boolean = false
    def isRange: _root_.scala.Boolean = false
    def isOptional: _root_.scala.Boolean = false
    def isOther: _root_.scala.Boolean = false
    def exact: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Exact] = _root_.scala.None
    def ternary: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Ternary] = _root_.scala.None
    def lpm: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.LPM] = _root_.scala.None
    def range: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Range] = _root_.scala.None
    def optional: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Optional] = _root_.scala.None
    def other: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
  }
  object FieldMatchType {
    @SerialVersionUID(0L)
    case object Empty extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Exact(value: p4.v1.p4runtime.FieldMatch.Exact) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = p4.v1.p4runtime.FieldMatch.Exact
      override def isExact: _root_.scala.Boolean = true
      override def exact: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Exact] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Ternary(value: p4.v1.p4runtime.FieldMatch.Ternary) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = p4.v1.p4runtime.FieldMatch.Ternary
      override def isTernary: _root_.scala.Boolean = true
      override def ternary: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Ternary] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Lpm(value: p4.v1.p4runtime.FieldMatch.LPM) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = p4.v1.p4runtime.FieldMatch.LPM
      override def isLpm: _root_.scala.Boolean = true
      override def lpm: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.LPM] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Range(value: p4.v1.p4runtime.FieldMatch.Range) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = p4.v1.p4runtime.FieldMatch.Range
      override def isRange: _root_.scala.Boolean = true
      override def range: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Range] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Optional(value: p4.v1.p4runtime.FieldMatch.Optional) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = p4.v1.p4runtime.FieldMatch.Optional
      override def isOptional: _root_.scala.Boolean = true
      override def optional: _root_.scala.Option[p4.v1.p4runtime.FieldMatch.Optional] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Other(value: com.google.protobuf.any.Any) extends p4.v1.p4runtime.FieldMatch.FieldMatchType {
      type ValueType = com.google.protobuf.any.Any
      override def isOther: _root_.scala.Boolean = true
      override def other: _root_.scala.Option[com.google.protobuf.any.Any] = Some(value)
      override def number: _root_.scala.Int = 100
    }
  }
  /** Matches can be performed on arbitrarily-large inputs; the protobuf type
    * 'bytes' is used to model arbitrarily-large values.
    */
  @SerialVersionUID(0L)
  final case class Exact(
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Exact] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withValue(__v: _root_.com.google.protobuf.ByteString): Exact = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.FieldMatch.Exact.type = p4.v1.p4runtime.FieldMatch.Exact
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch.Exact])
  }
  
  object Exact extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Exact] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Exact] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch.Exact = {
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.FieldMatch.Exact(
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch.Exact] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.FieldMatch.Exact(
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.FieldMatch.Exact(
      value = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class ExactLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Exact]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch.Exact](_l) {
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val VALUE_FIELD_NUMBER = 1
    def of(
      value: _root_.com.google.protobuf.ByteString
    ): _root_.p4.v1.p4runtime.FieldMatch.Exact = _root_.p4.v1.p4runtime.FieldMatch.Exact(
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch.Exact])
  }
  
  @SerialVersionUID(0L)
  final case class Ternary(
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      mask: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Ternary] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = mask
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = mask
          if (!__v.isEmpty) {
            _output__.writeBytes(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withValue(__v: _root_.com.google.protobuf.ByteString): Ternary = copy(value = __v)
      def withMask(__v: _root_.com.google.protobuf.ByteString): Ternary = copy(mask = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = mask
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(value)
          case 2 => _root_.scalapb.descriptors.PByteString(mask)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.FieldMatch.Ternary.type = p4.v1.p4runtime.FieldMatch.Ternary
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch.Ternary])
  }
  
  object Ternary extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Ternary] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Ternary] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch.Ternary = {
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var __mask: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readBytes()
          case 18 =>
            __mask = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.FieldMatch.Ternary(
          value = __value,
          mask = __mask,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch.Ternary] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.FieldMatch.Ternary(
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          mask = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.FieldMatch.Ternary(
      value = _root_.com.google.protobuf.ByteString.EMPTY,
      mask = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class TernaryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Ternary]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch.Ternary](_l) {
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
      def mask: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.mask)((c_, f_) => c_.copy(mask = f_))
    }
    final val VALUE_FIELD_NUMBER = 1
    final val MASK_FIELD_NUMBER = 2
    def of(
      value: _root_.com.google.protobuf.ByteString,
      mask: _root_.com.google.protobuf.ByteString
    ): _root_.p4.v1.p4runtime.FieldMatch.Ternary = _root_.p4.v1.p4runtime.FieldMatch.Ternary(
      value,
      mask
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch.Ternary])
  }
  
  /** @param prefixLen
    *   in bits
    */
  @SerialVersionUID(0L)
  final case class LPM(
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      prefixLen: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LPM] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = prefixLen
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = prefixLen
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withValue(__v: _root_.com.google.protobuf.ByteString): LPM = copy(value = __v)
      def withPrefixLen(__v: _root_.scala.Int): LPM = copy(prefixLen = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = prefixLen
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(value)
          case 2 => _root_.scalapb.descriptors.PInt(prefixLen)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.FieldMatch.LPM.type = p4.v1.p4runtime.FieldMatch.LPM
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch.LPM])
  }
  
  object LPM extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.LPM] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.LPM] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch.LPM = {
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var __prefixLen: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readBytes()
          case 16 =>
            __prefixLen = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.FieldMatch.LPM(
          value = __value,
          prefixLen = __prefixLen,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch.LPM] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.FieldMatch.LPM(
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          prefixLen = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.FieldMatch.LPM(
      value = _root_.com.google.protobuf.ByteString.EMPTY,
      prefixLen = 0
    )
    implicit class LPMLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.LPM]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch.LPM](_l) {
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
      def prefixLen: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.prefixLen)((c_, f_) => c_.copy(prefixLen = f_))
    }
    final val VALUE_FIELD_NUMBER = 1
    final val PREFIX_LEN_FIELD_NUMBER = 2
    def of(
      value: _root_.com.google.protobuf.ByteString,
      prefixLen: _root_.scala.Int
    ): _root_.p4.v1.p4runtime.FieldMatch.LPM = _root_.p4.v1.p4runtime.FieldMatch.LPM(
      value,
      prefixLen
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch.LPM])
  }
  
  /** A Range is logically a set that contains all values numerically between
    * 'low' and 'high' inclusively.
    */
  @SerialVersionUID(0L)
  final case class Range(
      low: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      high: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Range] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = low
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = high
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = low
          if (!__v.isEmpty) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = high
          if (!__v.isEmpty) {
            _output__.writeBytes(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withLow(__v: _root_.com.google.protobuf.ByteString): Range = copy(low = __v)
      def withHigh(__v: _root_.com.google.protobuf.ByteString): Range = copy(high = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = low
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = high
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(low)
          case 2 => _root_.scalapb.descriptors.PByteString(high)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.FieldMatch.Range.type = p4.v1.p4runtime.FieldMatch.Range
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch.Range])
  }
  
  object Range extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Range] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Range] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch.Range = {
      var __low: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var __high: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __low = _input__.readBytes()
          case 18 =>
            __high = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.FieldMatch.Range(
          low = __low,
          high = __high,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch.Range] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.FieldMatch.Range(
          low = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          high = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.FieldMatch.Range(
      low = _root_.com.google.protobuf.ByteString.EMPTY,
      high = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class RangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Range]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch.Range](_l) {
      def low: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.low)((c_, f_) => c_.copy(low = f_))
      def high: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.high)((c_, f_) => c_.copy(high = f_))
    }
    final val LOW_FIELD_NUMBER = 1
    final val HIGH_FIELD_NUMBER = 2
    def of(
      low: _root_.com.google.protobuf.ByteString,
      high: _root_.com.google.protobuf.ByteString
    ): _root_.p4.v1.p4runtime.FieldMatch.Range = _root_.p4.v1.p4runtime.FieldMatch.Range(
      low,
      high
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch.Range])
  }
  
  /** If the Optional match should be a wildcard, the FieldMatch must be omitted.
    * Otherwise, this behaves like an exact match.
    */
  @SerialVersionUID(0L)
  final case class Optional(
      value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Optional] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = value
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = value
          if (!__v.isEmpty) {
            _output__.writeBytes(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withValue(__v: _root_.com.google.protobuf.ByteString): Optional = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = value
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.FieldMatch.Optional.type = p4.v1.p4runtime.FieldMatch.Optional
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.FieldMatch.Optional])
  }
  
  object Optional extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Optional] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.FieldMatch.Optional] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.FieldMatch.Optional = {
      var __value: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = _input__.readBytes()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.FieldMatch.Optional(
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.FieldMatch.Optional] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.FieldMatch.Optional(
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.FieldMatch.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.FieldMatch.Optional(
      value = _root_.com.google.protobuf.ByteString.EMPTY
    )
    implicit class OptionalLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Optional]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch.Optional](_l) {
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val VALUE_FIELD_NUMBER = 1
    def of(
      value: _root_.com.google.protobuf.ByteString
    ): _root_.p4.v1.p4runtime.FieldMatch.Optional = _root_.p4.v1.p4runtime.FieldMatch.Optional(
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch.Optional])
  }
  
  implicit class FieldMatchLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.FieldMatch](_l) {
    def fieldId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.fieldId)((c_, f_) => c_.copy(fieldId = f_))
    def exact: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Exact] = field(_.getExact)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Exact(f_)))
    def ternary: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Ternary] = field(_.getTernary)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Ternary(f_)))
    def lpm: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.LPM] = field(_.getLpm)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Lpm(f_)))
    def range: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Range] = field(_.getRange)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Range(f_)))
    def optional: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.Optional] = field(_.getOptional)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Optional(f_)))
    def other: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getOther)((c_, f_) => c_.copy(fieldMatchType = p4.v1.p4runtime.FieldMatch.FieldMatchType.Other(f_)))
    def fieldMatchType: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.FieldMatch.FieldMatchType] = field(_.fieldMatchType)((c_, f_) => c_.copy(fieldMatchType = f_))
  }
  final val FIELD_ID_FIELD_NUMBER = 1
  final val EXACT_FIELD_NUMBER = 2
  final val TERNARY_FIELD_NUMBER = 3
  final val LPM_FIELD_NUMBER = 4
  final val RANGE_FIELD_NUMBER = 6
  final val OPTIONAL_FIELD_NUMBER = 7
  final val OTHER_FIELD_NUMBER = 100
  def of(
    fieldId: _root_.scala.Int,
    fieldMatchType: p4.v1.p4runtime.FieldMatch.FieldMatchType
  ): _root_.p4.v1.p4runtime.FieldMatch = _root_.p4.v1.p4runtime.FieldMatch(
    fieldId,
    fieldMatchType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.FieldMatch])
}
