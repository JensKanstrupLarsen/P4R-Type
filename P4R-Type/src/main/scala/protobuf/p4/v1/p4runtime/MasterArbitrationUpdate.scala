// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** @param role
  *   The role for which the primary client is being arbitrated. For use-cases
  *   where multiple roles are not needed, the controller can leave this unset,
  *   implying default role and full pipeline access.
  * @param electionId
  *   The stream RPC with the highest election_id is the primary. The 'primary'
  *   controller instance populates this with its latest election_id. Switch
  *   populates with the highest election ID it has received from all connected
  *   controllers.
  * @param status
  *   Switch populates this with OK for the client that is the primary, and
  *   with an error status for all other connected clients (at every primary
  *   client change). The controller does not populate this field.
  */
@SerialVersionUID(0L)
final case class MasterArbitrationUpdate(
    deviceId: _root_.scala.Long = 0L,
    role: _root_.scala.Option[p4.v1.p4runtime.Role] = _root_.scala.None,
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None,
    status: _root_.scala.Option[com.google.rpc.status.Status] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MasterArbitrationUpdate] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = deviceId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(1, __value)
        }
      };
      if (role.isDefined) {
        val __value = role.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (electionId.isDefined) {
        val __value = electionId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (status.isDefined) {
        val __value = status.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = deviceId
        if (__v != 0L) {
          _output__.writeUInt64(1, __v)
        }
      };
      role.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      electionId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      status.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDeviceId(__v: _root_.scala.Long): MasterArbitrationUpdate = copy(deviceId = __v)
    def getRole: p4.v1.p4runtime.Role = role.getOrElse(p4.v1.p4runtime.Role.defaultInstance)
    def clearRole: MasterArbitrationUpdate = copy(role = _root_.scala.None)
    def withRole(__v: p4.v1.p4runtime.Role): MasterArbitrationUpdate = copy(role = Option(__v))
    def getElectionId: p4.v1.p4runtime.Uint128 = electionId.getOrElse(p4.v1.p4runtime.Uint128.defaultInstance)
    def clearElectionId: MasterArbitrationUpdate = copy(electionId = _root_.scala.None)
    def withElectionId(__v: p4.v1.p4runtime.Uint128): MasterArbitrationUpdate = copy(electionId = Option(__v))
    def getStatus: com.google.rpc.status.Status = status.getOrElse(com.google.rpc.status.Status.defaultInstance)
    def clearStatus: MasterArbitrationUpdate = copy(status = _root_.scala.None)
    def withStatus(__v: com.google.rpc.status.Status): MasterArbitrationUpdate = copy(status = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = deviceId
          if (__t != 0L) __t else null
        }
        case 2 => role.orNull
        case 3 => electionId.orNull
        case 4 => status.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(deviceId)
        case 2 => role.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => electionId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => status.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.MasterArbitrationUpdate.type = p4.v1.p4runtime.MasterArbitrationUpdate
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.MasterArbitrationUpdate])
}

object MasterArbitrationUpdate extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MasterArbitrationUpdate] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.MasterArbitrationUpdate] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.MasterArbitrationUpdate = {
    var __deviceId: _root_.scala.Long = 0L
    var __role: _root_.scala.Option[p4.v1.p4runtime.Role] = _root_.scala.None
    var __electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128] = _root_.scala.None
    var __status: _root_.scala.Option[com.google.rpc.status.Status] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __deviceId = _input__.readUInt64()
        case 18 =>
          __role = Option(__role.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Role](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __electionId = Option(__electionId.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Uint128](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __status = Option(__status.fold(_root_.scalapb.LiteParser.readMessage[com.google.rpc.status.Status](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.MasterArbitrationUpdate(
        deviceId = __deviceId,
        role = __role,
        electionId = __electionId,
        status = __status,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.MasterArbitrationUpdate] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.MasterArbitrationUpdate(
        deviceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        role = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.Role]]),
        electionId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.Uint128]]),
        status = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.google.rpc.status.Status]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(38)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(38)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.Role
      case 3 => __out = p4.v1.p4runtime.Uint128
      case 4 => __out = com.google.rpc.status.Status
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.MasterArbitrationUpdate(
    deviceId = 0L,
    role = _root_.scala.None,
    electionId = _root_.scala.None,
    status = _root_.scala.None
  )
  implicit class MasterArbitrationUpdateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.MasterArbitrationUpdate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.MasterArbitrationUpdate](_l) {
    def deviceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.deviceId)((c_, f_) => c_.copy(deviceId = f_))
    def role: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Role] = field(_.getRole)((c_, f_) => c_.copy(role = Option(f_)))
    def optionalRole: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.Role]] = field(_.role)((c_, f_) => c_.copy(role = f_))
    def electionId: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Uint128] = field(_.getElectionId)((c_, f_) => c_.copy(electionId = Option(f_)))
    def optionalElectionId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.Uint128]] = field(_.electionId)((c_, f_) => c_.copy(electionId = f_))
    def status: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.status.Status] = field(_.getStatus)((c_, f_) => c_.copy(status = Option(f_)))
    def optionalStatus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.rpc.status.Status]] = field(_.status)((c_, f_) => c_.copy(status = f_))
  }
  final val DEVICE_ID_FIELD_NUMBER = 1
  final val ROLE_FIELD_NUMBER = 2
  final val ELECTION_ID_FIELD_NUMBER = 3
  final val STATUS_FIELD_NUMBER = 4
  def of(
    deviceId: _root_.scala.Long,
    role: _root_.scala.Option[p4.v1.p4runtime.Role],
    electionId: _root_.scala.Option[p4.v1.p4runtime.Uint128],
    status: _root_.scala.Option[com.google.rpc.status.Status]
  ): _root_.p4.v1.p4runtime.MasterArbitrationUpdate = _root_.p4.v1.p4runtime.MasterArbitrationUpdate(
    deviceId,
    role,
    electionId,
    status
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.MasterArbitrationUpdate])
}
