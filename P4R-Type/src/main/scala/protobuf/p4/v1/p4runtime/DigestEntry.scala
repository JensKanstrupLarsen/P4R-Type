// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  * Used to configure the digest extern only, not to stream digests or acks
  */
@SerialVersionUID(0L)
final case class DigestEntry(
    digestId: _root_.scala.Int = 0,
    config: _root_.scala.Option[p4.v1.p4runtime.DigestEntry.Config] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DigestEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = digestId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (config.isDefined) {
        val __value = config.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = digestId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      config.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withDigestId(__v: _root_.scala.Int): DigestEntry = copy(digestId = __v)
    def getConfig: p4.v1.p4runtime.DigestEntry.Config = config.getOrElse(p4.v1.p4runtime.DigestEntry.Config.defaultInstance)
    def clearConfig: DigestEntry = copy(config = _root_.scala.None)
    def withConfig(__v: p4.v1.p4runtime.DigestEntry.Config): DigestEntry = copy(config = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = digestId
          if (__t != 0) __t else null
        }
        case 2 => config.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(digestId)
        case 2 => config.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.DigestEntry.type = p4.v1.p4runtime.DigestEntry
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.DigestEntry])
}

object DigestEntry extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.DigestEntry = {
    var __digestId: _root_.scala.Int = 0
    var __config: _root_.scala.Option[p4.v1.p4runtime.DigestEntry.Config] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __digestId = _input__.readUInt32()
        case 18 =>
          __config = Option(__config.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.DigestEntry.Config](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.DigestEntry(
        digestId = __digestId,
        config = __config,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.DigestEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.DigestEntry(
        digestId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        config = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.DigestEntry.Config]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(30)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(30)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.DigestEntry.Config
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.p4.v1.p4runtime.DigestEntry.Config
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.DigestEntry(
    digestId = 0,
    config = _root_.scala.None
  )
  /** a DigestList message is streamed when the following conditions are met:
    *   - there is at least one digest ready
    *   - the oldest digest in the list has been waiting for at least
    *     max_timeout_ns nanoseconds or we have gathered max_list_size digests
    *     already
    *
    * @param maxTimeoutNs
    *   max timeout for outstanding digest data
    * @param maxListSize
    *   max size for a digest list
    * @param ackTimeoutNs
    *   timeout for DigestListAck message
    */
  @SerialVersionUID(0L)
  final case class Config(
      maxTimeoutNs: _root_.scala.Long = 0L,
      maxListSize: _root_.scala.Int = 0,
      ackTimeoutNs: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Config] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = maxTimeoutNs
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
          }
        };
        
        {
          val __value = maxListSize
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        
        {
          val __value = ackTimeoutNs
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = maxTimeoutNs
          if (__v != 0L) {
            _output__.writeInt64(1, __v)
          }
        };
        {
          val __v = maxListSize
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        {
          val __v = ackTimeoutNs
          if (__v != 0L) {
            _output__.writeInt64(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withMaxTimeoutNs(__v: _root_.scala.Long): Config = copy(maxTimeoutNs = __v)
      def withMaxListSize(__v: _root_.scala.Int): Config = copy(maxListSize = __v)
      def withAckTimeoutNs(__v: _root_.scala.Long): Config = copy(ackTimeoutNs = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = maxTimeoutNs
            if (__t != 0L) __t else null
          }
          case 2 => {
            val __t = maxListSize
            if (__t != 0) __t else null
          }
          case 3 => {
            val __t = ackTimeoutNs
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PLong(maxTimeoutNs)
          case 2 => _root_.scalapb.descriptors.PInt(maxListSize)
          case 3 => _root_.scalapb.descriptors.PLong(ackTimeoutNs)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: p4.v1.p4runtime.DigestEntry.Config.type = p4.v1.p4runtime.DigestEntry.Config
      // @@protoc_insertion_point(GeneratedMessage[p4.v1.DigestEntry.Config])
  }
  
  object Config extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestEntry.Config] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestEntry.Config] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.DigestEntry.Config = {
      var __maxTimeoutNs: _root_.scala.Long = 0L
      var __maxListSize: _root_.scala.Int = 0
      var __ackTimeoutNs: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __maxTimeoutNs = _input__.readInt64()
          case 16 =>
            __maxListSize = _input__.readInt32()
          case 24 =>
            __ackTimeoutNs = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      p4.v1.p4runtime.DigestEntry.Config(
          maxTimeoutNs = __maxTimeoutNs,
          maxListSize = __maxListSize,
          ackTimeoutNs = __ackTimeoutNs,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.DigestEntry.Config] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        p4.v1.p4runtime.DigestEntry.Config(
          maxTimeoutNs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
          maxListSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          ackTimeoutNs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = p4.v1.p4runtime.DigestEntry.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = p4.v1.p4runtime.DigestEntry.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = p4.v1.p4runtime.DigestEntry.Config(
      maxTimeoutNs = 0L,
      maxListSize = 0,
      ackTimeoutNs = 0L
    )
    implicit class ConfigLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DigestEntry.Config]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.DigestEntry.Config](_l) {
      def maxTimeoutNs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.maxTimeoutNs)((c_, f_) => c_.copy(maxTimeoutNs = f_))
      def maxListSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.maxListSize)((c_, f_) => c_.copy(maxListSize = f_))
      def ackTimeoutNs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.ackTimeoutNs)((c_, f_) => c_.copy(ackTimeoutNs = f_))
    }
    final val MAX_TIMEOUT_NS_FIELD_NUMBER = 1
    final val MAX_LIST_SIZE_FIELD_NUMBER = 2
    final val ACK_TIMEOUT_NS_FIELD_NUMBER = 3
    def of(
      maxTimeoutNs: _root_.scala.Long,
      maxListSize: _root_.scala.Int,
      ackTimeoutNs: _root_.scala.Long
    ): _root_.p4.v1.p4runtime.DigestEntry.Config = _root_.p4.v1.p4runtime.DigestEntry.Config(
      maxTimeoutNs,
      maxListSize,
      ackTimeoutNs
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.DigestEntry.Config])
  }
  
  implicit class DigestEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DigestEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.DigestEntry](_l) {
    def digestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.digestId)((c_, f_) => c_.copy(digestId = f_))
    def config: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DigestEntry.Config] = field(_.getConfig)((c_, f_) => c_.copy(config = Option(f_)))
    def optionalConfig: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.DigestEntry.Config]] = field(_.config)((c_, f_) => c_.copy(config = f_))
  }
  final val DIGEST_ID_FIELD_NUMBER = 1
  final val CONFIG_FIELD_NUMBER = 2
  def of(
    digestId: _root_.scala.Int,
    config: _root_.scala.Option[p4.v1.p4runtime.DigestEntry.Config]
  ): _root_.p4.v1.p4runtime.DigestEntry = _root_.p4.v1.p4runtime.DigestEntry(
    digestId,
    config
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.DigestEntry])
}
