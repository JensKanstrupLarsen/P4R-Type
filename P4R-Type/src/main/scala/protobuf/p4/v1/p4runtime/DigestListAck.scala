// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** Used by the controller to ack a DigestList message. To avoid flooding the
  * controller, the switch must not generate digest notifications for the same
  * data until a DigestListAck message with the same list_id is received or the
  * ack timeout (ack_timeout_ns field in DigestEntry.Config) expires.
  */
@SerialVersionUID(0L)
final case class DigestListAck(
    digestId: _root_.scala.Int = 0,
    listId: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DigestListAck] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = digestId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      
      {
        val __value = listId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = digestId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = listId
        if (__v != 0L) {
          _output__.writeUInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withDigestId(__v: _root_.scala.Int): DigestListAck = copy(digestId = __v)
    def withListId(__v: _root_.scala.Long): DigestListAck = copy(listId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = digestId
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = listId
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(digestId)
        case 2 => _root_.scalapb.descriptors.PLong(listId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.DigestListAck.type = p4.v1.p4runtime.DigestListAck
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.DigestListAck])
}

object DigestListAck extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestListAck] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.DigestListAck] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.DigestListAck = {
    var __digestId: _root_.scala.Int = 0
    var __listId: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __digestId = _input__.readUInt32()
        case 16 =>
          __listId = _input__.readUInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.DigestListAck(
        digestId = __digestId,
        listId = __listId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.DigestListAck] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.DigestListAck(
        digestId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        listId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.DigestListAck(
    digestId = 0,
    listId = 0L
  )
  implicit class DigestListAckLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.DigestListAck]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.DigestListAck](_l) {
    def digestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.digestId)((c_, f_) => c_.copy(digestId = f_))
    def listId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.listId)((c_, f_) => c_.copy(listId = f_))
  }
  final val DIGEST_ID_FIELD_NUMBER = 1
  final val LIST_ID_FIELD_NUMBER = 2
  def of(
    digestId: _root_.scala.Int,
    listId: _root_.scala.Long
  ): _root_.p4.v1.p4runtime.DigestListAck = _root_.p4.v1.p4runtime.DigestListAck(
    digestId,
    listId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.DigestListAck])
}
