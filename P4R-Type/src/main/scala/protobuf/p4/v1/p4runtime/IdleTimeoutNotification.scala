// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** @param tableEntry
  *   The only fields that are required to be set in each TableEntry are the
  *   "key" fields (table_id, match and priority) along with controller_metadata,
  *   metadata and idle_timeout_ns.
  * @param timestamp
  *   Timestamp at which the server generated the message (in nanoseconds since
  *   Epoch)
  */
@SerialVersionUID(0L)
final case class IdleTimeoutNotification(
    tableEntry: _root_.scala.Seq[p4.v1.p4runtime.TableEntry] = _root_.scala.Seq.empty,
    timestamp: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[IdleTimeoutNotification] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      tableEntry.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = timestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      tableEntry.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def clearTableEntry = copy(tableEntry = _root_.scala.Seq.empty)
    def addTableEntry(__vs: p4.v1.p4runtime.TableEntry *): IdleTimeoutNotification = addAllTableEntry(__vs)
    def addAllTableEntry(__vs: Iterable[p4.v1.p4runtime.TableEntry]): IdleTimeoutNotification = copy(tableEntry = tableEntry ++ __vs)
    def withTableEntry(__v: _root_.scala.Seq[p4.v1.p4runtime.TableEntry]): IdleTimeoutNotification = copy(tableEntry = __v)
    def withTimestamp(__v: _root_.scala.Long): IdleTimeoutNotification = copy(timestamp = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => tableEntry
        case 2 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(tableEntry.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PLong(timestamp)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.IdleTimeoutNotification.type = p4.v1.p4runtime.IdleTimeoutNotification
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.IdleTimeoutNotification])
}

object IdleTimeoutNotification extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.IdleTimeoutNotification] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.IdleTimeoutNotification] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.IdleTimeoutNotification = {
    val __tableEntry: _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.TableEntry] = new _root_.scala.collection.immutable.VectorBuilder[p4.v1.p4runtime.TableEntry]
    var __timestamp: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __tableEntry += _root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.TableEntry](_input__)
        case 16 =>
          __timestamp = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.IdleTimeoutNotification(
        tableEntry = __tableEntry.result(),
        timestamp = __timestamp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.IdleTimeoutNotification] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.IdleTimeoutNotification(
        tableEntry = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[p4.v1.p4runtime.TableEntry]]).getOrElse(_root_.scala.Seq.empty),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(40)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(40)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = p4.v1.p4runtime.TableEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.IdleTimeoutNotification(
    tableEntry = _root_.scala.Seq.empty,
    timestamp = 0L
  )
  implicit class IdleTimeoutNotificationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.IdleTimeoutNotification]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.IdleTimeoutNotification](_l) {
    def tableEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[p4.v1.p4runtime.TableEntry]] = field(_.tableEntry)((c_, f_) => c_.copy(tableEntry = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
  }
  final val TABLE_ENTRY_FIELD_NUMBER = 1
  final val TIMESTAMP_FIELD_NUMBER = 2
  def of(
    tableEntry: _root_.scala.Seq[p4.v1.p4runtime.TableEntry],
    timestamp: _root_.scala.Long
  ): _root_.p4.v1.p4runtime.IdleTimeoutNotification = _root_.p4.v1.p4runtime.IdleTimeoutNotification(
    tableEntry,
    timestamp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.IdleTimeoutNotification])
}
