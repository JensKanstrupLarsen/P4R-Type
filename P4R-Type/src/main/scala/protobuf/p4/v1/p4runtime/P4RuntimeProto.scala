// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

object P4RuntimeProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.any.AnyProto,
    com.google.rpc.status.StatusProto,
    p4.config.v1.p4info.P4InfoProto,
    p4.v1.p4data.P4DataProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      p4.v1.p4runtime.WriteRequest,
      p4.v1.p4runtime.WriteResponse,
      p4.v1.p4runtime.ReadRequest,
      p4.v1.p4runtime.ReadResponse,
      p4.v1.p4runtime.Update,
      p4.v1.p4runtime.Entity,
      p4.v1.p4runtime.ExternEntry,
      p4.v1.p4runtime.TableEntry,
      p4.v1.p4runtime.FieldMatch,
      p4.v1.p4runtime.TableAction,
      p4.v1.p4runtime.Action,
      p4.v1.p4runtime.ActionProfileActionSet,
      p4.v1.p4runtime.ActionProfileAction,
      p4.v1.p4runtime.ActionProfileMember,
      p4.v1.p4runtime.ActionProfileGroup,
      p4.v1.p4runtime.Index,
      p4.v1.p4runtime.MeterEntry,
      p4.v1.p4runtime.DirectMeterEntry,
      p4.v1.p4runtime.MeterConfig,
      p4.v1.p4runtime.CounterEntry,
      p4.v1.p4runtime.DirectCounterEntry,
      p4.v1.p4runtime.CounterData,
      p4.v1.p4runtime.MeterCounterData,
      p4.v1.p4runtime.PacketReplicationEngineEntry,
      p4.v1.p4runtime.Replica,
      p4.v1.p4runtime.MulticastGroupEntry,
      p4.v1.p4runtime.CloneSessionEntry,
      p4.v1.p4runtime.ValueSetMember,
      p4.v1.p4runtime.ValueSetEntry,
      p4.v1.p4runtime.RegisterEntry,
      p4.v1.p4runtime.DigestEntry,
      p4.v1.p4runtime.StreamMessageRequest,
      p4.v1.p4runtime.PacketOut,
      p4.v1.p4runtime.DigestListAck,
      p4.v1.p4runtime.StreamMessageResponse,
      p4.v1.p4runtime.PacketIn,
      p4.v1.p4runtime.DigestList,
      p4.v1.p4runtime.PacketMetadata,
      p4.v1.p4runtime.MasterArbitrationUpdate,
      p4.v1.p4runtime.Role,
      p4.v1.p4runtime.IdleTimeoutNotification,
      p4.v1.p4runtime.StreamError,
      p4.v1.p4runtime.PacketOutError,
      p4.v1.p4runtime.DigestListAckError,
      p4.v1.p4runtime.StreamOtherError,
      p4.v1.p4runtime.Uint128,
      p4.v1.p4runtime.SetForwardingPipelineConfigRequest,
      p4.v1.p4runtime.SetForwardingPipelineConfigResponse,
      p4.v1.p4runtime.ForwardingPipelineConfig,
      p4.v1.p4runtime.GetForwardingPipelineConfigRequest,
      p4.v1.p4runtime.GetForwardingPipelineConfigResponse,
      p4.v1.p4runtime.Error,
      p4.v1.p4runtime.CapabilitiesRequest,
      p4.v1.p4runtime.CapabilitiesResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVwNC92MS9wNHJ1bnRpbWUucHJvdG8SBXA0LnYxGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGhdnb29nbGUvcnBjL3N0Y
  XR1cy5wcm90bxoZcDQvY29uZmlnL3YxL3A0aW5mby5wcm90bxoScDQvdjEvcDRkYXRhLnByb3RvIuADCgxXcml0ZVJlcXVlc3QSK
  goJZGV2aWNlX2lkGAEgASgEQg3iPwoSCGRldmljZUlkUghkZXZpY2VJZBImCgdyb2xlX2lkGAIgASgEQg0YAeI/CBIGcm9sZUlkU
  gZyb2xlSWQSHQoEcm9sZRgGIAEoCUIJ4j8GEgRyb2xlUgRyb2xlEkAKC2VsZWN0aW9uX2lkGAMgASgLMg4ucDQudjEuVWludDEyO
  EIP4j8MEgplbGVjdGlvbklkUgplbGVjdGlvbklkEjUKB3VwZGF0ZXMYBCADKAsyDS5wNC52MS5VcGRhdGVCDOI/CRIHdXBkYXRlc
  1IHdXBkYXRlcxJLCglhdG9taWNpdHkYBSABKA4yHS5wNC52MS5Xcml0ZVJlcXVlc3QuQXRvbWljaXR5Qg7iPwsSCWF0b21pY2l0e
  VIJYXRvbWljaXR5IpYBCglBdG9taWNpdHkSLQoRQ09OVElOVUVfT05fRVJST1IQABoW4j8TEhFDT05USU5VRV9PTl9FUlJPUhItC
  hFST0xMQkFDS19PTl9FUlJPUhABGhbiPxMSEVJPTExCQUNLX09OX0VSUk9SEisKEERBVEFQTEFORV9BVE9NSUMQAhoV4j8SEhBEQ
  VRBUExBTkVfQVRPTUlDIg8KDVdyaXRlUmVzcG9uc2UikgEKC1JlYWRSZXF1ZXN0EioKCWRldmljZV9pZBgBIAEoBEIN4j8KEghkZ
  XZpY2VJZFIIZGV2aWNlSWQSHQoEcm9sZRgDIAEoCUIJ4j8GEgRyb2xlUgRyb2xlEjgKCGVudGl0aWVzGAIgAygLMg0ucDQudjEuR
  W50aXR5Qg3iPwoSCGVudGl0aWVzUghlbnRpdGllcyJICgxSZWFkUmVzcG9uc2USOAoIZW50aXRpZXMYASADKAsyDS5wNC52MS5Fb
  nRpdHlCDeI/ChIIZW50aXRpZXNSCGVudGl0aWVzIuUBCgZVcGRhdGUSMQoEdHlwZRgBIAEoDjISLnA0LnYxLlVwZGF0ZS5UeXBlQ
  gniPwYSBHR5cGVSBHR5cGUSMgoGZW50aXR5GAIgASgLMg0ucDQudjEuRW50aXR5QgviPwgSBmVudGl0eVIGZW50aXR5InQKBFR5c
  GUSIQoLVU5TUEVDSUZJRUQQABoQ4j8NEgtVTlNQRUNJRklFRBIXCgZJTlNFUlQQARoL4j8IEgZJTlNFUlQSFwoGTU9ESUZZEAIaC
  +I/CBIGTU9ESUZZEhcKBkRFTEVURRADGgviPwgSBkRFTEVURSLaCAoGRW50aXR5EkkKDGV4dGVybl9lbnRyeRgBIAEoCzISLnA0L
  nYxLkV4dGVybkVudHJ5QhDiPw0SC2V4dGVybkVudHJ5SABSC2V4dGVybkVudHJ5EkUKC3RhYmxlX2VudHJ5GAIgASgLMhEucDQud
  jEuVGFibGVFbnRyeUIP4j8MEgp0YWJsZUVudHJ5SABSCnRhYmxlRW50cnkSagoVYWN0aW9uX3Byb2ZpbGVfbWVtYmVyGAMgASgLM
  houcDQudjEuQWN0aW9uUHJvZmlsZU1lbWJlckIY4j8VEhNhY3Rpb25Qcm9maWxlTWVtYmVySABSE2FjdGlvblByb2ZpbGVNZW1iZ
  XISZgoUYWN0aW9uX3Byb2ZpbGVfZ3JvdXAYBCABKAsyGS5wNC52MS5BY3Rpb25Qcm9maWxlR3JvdXBCF+I/FBISYWN0aW9uUHJvZ
  mlsZUdyb3VwSABSEmFjdGlvblByb2ZpbGVHcm91cBJFCgttZXRlcl9lbnRyeRgFIAEoCzIRLnA0LnYxLk1ldGVyRW50cnlCD+I/D
  BIKbWV0ZXJFbnRyeUgAUgptZXRlckVudHJ5El4KEmRpcmVjdF9tZXRlcl9lbnRyeRgGIAEoCzIXLnA0LnYxLkRpcmVjdE1ldGVyR
  W50cnlCFeI/EhIQZGlyZWN0TWV0ZXJFbnRyeUgAUhBkaXJlY3RNZXRlckVudHJ5Ek0KDWNvdW50ZXJfZW50cnkYByABKAsyEy5wN
  C52MS5Db3VudGVyRW50cnlCEeI/DhIMY291bnRlckVudHJ5SABSDGNvdW50ZXJFbnRyeRJmChRkaXJlY3RfY291bnRlcl9lbnRye
  RgIIAEoCzIZLnA0LnYxLkRpcmVjdENvdW50ZXJFbnRyeUIX4j8UEhJkaXJlY3RDb3VudGVyRW50cnlIAFISZGlyZWN0Q291bnRlc
  kVudHJ5Eo8BCh9wYWNrZXRfcmVwbGljYXRpb25fZW5naW5lX2VudHJ5GAkgASgLMiMucDQudjEuUGFja2V0UmVwbGljYXRpb25Fb
  mdpbmVFbnRyeUIh4j8eEhxwYWNrZXRSZXBsaWNhdGlvbkVuZ2luZUVudHJ5SABSHHBhY2tldFJlcGxpY2F0aW9uRW5naW5lRW50c
  nkSUgoPdmFsdWVfc2V0X2VudHJ5GAogASgLMhQucDQudjEuVmFsdWVTZXRFbnRyeUIS4j8PEg12YWx1ZVNldEVudHJ5SABSDXZhb
  HVlU2V0RW50cnkSUQoOcmVnaXN0ZXJfZW50cnkYCyABKAsyFC5wNC52MS5SZWdpc3RlckVudHJ5QhLiPw8SDXJlZ2lzdGVyRW50c
  nlIAFINcmVnaXN0ZXJFbnRyeRJJCgxkaWdlc3RfZW50cnkYDCABKAsyEi5wNC52MS5EaWdlc3RFbnRyeUIQ4j8NEgtkaWdlc3RFb
  nRyeUgAUgtkaWdlc3RFbnRyeUIICgZlbnRpdHkiqgEKC0V4dGVybkVudHJ5EjcKDmV4dGVybl90eXBlX2lkGAEgASgNQhHiPw4SD
  GV4dGVyblR5cGVJZFIMZXh0ZXJuVHlwZUlkEioKCWV4dGVybl9pZBgCIAEoDUIN4j8KEghleHRlcm5JZFIIZXh0ZXJuSWQSNgoFZ
  W50cnkYAyABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QgriPwcSBWVudHJ5UgVlbnRyeSLWBgoKVGFibGVFbnRyeRInCgh0YWJsZ
  V9pZBgBIAEoDUIM4j8JEgd0YWJsZUlkUgd0YWJsZUlkEjMKBW1hdGNoGAIgAygLMhEucDQudjEuRmllbGRNYXRjaEIK4j8HEgVtY
  XRjaFIFbWF0Y2gSNwoGYWN0aW9uGAMgASgLMhIucDQudjEuVGFibGVBY3Rpb25CC+I/CBIGYWN0aW9uUgZhY3Rpb24SKQoIcHJpb
  3JpdHkYBCABKAVCDeI/ChIIcHJpb3JpdHlSCHByaW9yaXR5EkoKE2NvbnRyb2xsZXJfbWV0YWRhdGEYBSABKARCGRgB4j8UEhJjb
  250cm9sbGVyTWV0YWRhdGFSEmNvbnRyb2xsZXJNZXRhZGF0YRJHCgxtZXRlcl9jb25maWcYBiABKAsyEi5wNC52MS5NZXRlckNvb
  mZpZ0IQ4j8NEgttZXRlckNvbmZpZ1ILbWV0ZXJDb25maWcSRwoMY291bnRlcl9kYXRhGAcgASgLMhIucDQudjEuQ291bnRlckRhd
  GFCEOI/DRILY291bnRlckRhdGFSC2NvdW50ZXJEYXRhElwKEm1ldGVyX2NvdW50ZXJfZGF0YRgMIAEoCzIXLnA0LnYxLk1ldGVyQ
  291bnRlckRhdGFCFeI/EhIQbWV0ZXJDb3VudGVyRGF0YVIQbWV0ZXJDb3VudGVyRGF0YRJAChFpc19kZWZhdWx0X2FjdGlvbhgII
  AEoCEIU4j8REg9pc0RlZmF1bHRBY3Rpb25SD2lzRGVmYXVsdEFjdGlvbhI6Cg9pZGxlX3RpbWVvdXRfbnMYCSABKANCEuI/DxINa
  WRsZVRpbWVvdXROc1INaWRsZVRpbWVvdXROcxJjChN0aW1lX3NpbmNlX2xhc3RfaGl0GAogASgLMh0ucDQudjEuVGFibGVFbnRye
  S5JZGxlVGltZW91dEIV4j8SEhB0aW1lU2luY2VMYXN0SGl0UhB0aW1lU2luY2VMYXN0SGl0EikKCG1ldGFkYXRhGAsgASgMQg3iP
  woSCG1ldGFkYXRhUghtZXRhZGF0YRo8CgtJZGxlVGltZW91dBItCgplbGFwc2VkX25zGAEgASgDQg7iPwsSCWVsYXBzZWROc1IJZ
  WxhcHNlZE5zIoEGCgpGaWVsZE1hdGNoEicKCGZpZWxkX2lkGAEgASgNQgziPwkSB2ZpZWxkSWRSB2ZpZWxkSWQSOwoFZXhhY3QYA
  iABKAsyFy5wNC52MS5GaWVsZE1hdGNoLkV4YWN0QgriPwcSBWV4YWN0SABSBWV4YWN0EkMKB3Rlcm5hcnkYAyABKAsyGS5wNC52M
  S5GaWVsZE1hdGNoLlRlcm5hcnlCDOI/CRIHdGVybmFyeUgAUgd0ZXJuYXJ5EjMKA2xwbRgEIAEoCzIVLnA0LnYxLkZpZWxkTWF0Y
  2guTFBNQgjiPwUSA2xwbUgAUgNscG0SOwoFcmFuZ2UYBiABKAsyFy5wNC52MS5GaWVsZE1hdGNoLlJhbmdlQgriPwcSBXJhbmdlS
  ABSBXJhbmdlEkcKCG9wdGlvbmFsGAcgASgLMhoucDQudjEuRmllbGRNYXRjaC5PcHRpb25hbEIN4j8KEghvcHRpb25hbEgAUghvc
  HRpb25hbBI4CgVvdGhlchhkIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCCuI/BxIFb3RoZXJIAFIFb3RoZXIaKQoFRXhhY3QSI
  AoFdmFsdWUYASABKAxCCuI/BxIFdmFsdWVSBXZhbHVlGkoKB1Rlcm5hcnkSIAoFdmFsdWUYASABKAxCCuI/BxIFdmFsdWVSBXZhb
  HVlEh0KBG1hc2sYAiABKAxCCeI/BhIEbWFza1IEbWFzaxpWCgNMUE0SIAoFdmFsdWUYASABKAxCCuI/BxIFdmFsdWVSBXZhbHVlE
  i0KCnByZWZpeF9sZW4YAiABKAVCDuI/CxIJcHJlZml4TGVuUglwcmVmaXhMZW4aQgoFUmFuZ2USGgoDbG93GAEgASgMQgjiPwUSA
  2xvd1IDbG93Eh0KBGhpZ2gYAiABKAxCCeI/BhIEaGlnaFIEaGlnaBosCghPcHRpb25hbBIgCgV2YWx1ZRgBIAEoDEIK4j8HEgV2Y
  Wx1ZVIFdmFsdWVCEgoQZmllbGRfbWF0Y2hfdHlwZSLvAgoLVGFibGVBY3Rpb24SNAoGYWN0aW9uGAEgASgLMg0ucDQudjEuQWN0a
  W9uQgviPwgSBmFjdGlvbkgAUgZhY3Rpb24SVQoYYWN0aW9uX3Byb2ZpbGVfbWVtYmVyX2lkGAIgASgNQhriPxcSFWFjdGlvblByb
  2ZpbGVNZW1iZXJJZEgAUhVhY3Rpb25Qcm9maWxlTWVtYmVySWQSUgoXYWN0aW9uX3Byb2ZpbGVfZ3JvdXBfaWQYAyABKA1CGeI/F
  hIUYWN0aW9uUHJvZmlsZUdyb3VwSWRIAFIUYWN0aW9uUHJvZmlsZUdyb3VwSWQSdwoZYWN0aW9uX3Byb2ZpbGVfYWN0aW9uX3Nld
  BgEIAEoCzIdLnA0LnYxLkFjdGlvblByb2ZpbGVBY3Rpb25TZXRCG+I/GBIWYWN0aW9uUHJvZmlsZUFjdGlvblNldEgAUhZhY3Rpb
  25Qcm9maWxlQWN0aW9uU2V0QgYKBHR5cGUiwgEKBkFjdGlvbhIqCglhY3Rpb25faWQYASABKA1CDeI/ChIIYWN0aW9uSWRSCGFjd
  GlvbklkEjgKBnBhcmFtcxgEIAMoCzITLnA0LnYxLkFjdGlvbi5QYXJhbUIL4j8IEgZwYXJhbXNSBnBhcmFtcxpSCgVQYXJhbRInC
  ghwYXJhbV9pZBgCIAEoDUIM4j8JEgdwYXJhbUlkUgdwYXJhbUlkEiAKBXZhbHVlGAMgASgMQgriPwcSBXZhbHVlUgV2YWx1ZSKFA
  QoWQWN0aW9uUHJvZmlsZUFjdGlvblNldBJrChZhY3Rpb25fcHJvZmlsZV9hY3Rpb25zGAEgAygLMhoucDQudjEuQWN0aW9uUHJvZ
  mlsZUFjdGlvbkIZ4j8WEhRhY3Rpb25Qcm9maWxlQWN0aW9uc1IUYWN0aW9uUHJvZmlsZUFjdGlvbnMi0wEKE0FjdGlvblByb2Zpb
  GVBY3Rpb24SMgoGYWN0aW9uGAEgASgLMg0ucDQudjEuQWN0aW9uQgviPwgSBmFjdGlvblIGYWN0aW9uEiMKBndlaWdodBgCIAEoB
  UIL4j8IEgZ3ZWlnaHRSBndlaWdodBIkCgV3YXRjaBgDIAEoBUIMGAHiPwcSBXdhdGNoSABSBXdhdGNoEi8KCndhdGNoX3BvcnQYB
  CABKAxCDuI/CxIJd2F0Y2hQb3J0SABSCXdhdGNoUG9ydEIMCgp3YXRjaF9raW5kIrcBChNBY3Rpb25Qcm9maWxlTWVtYmVyEkAKE
  WFjdGlvbl9wcm9maWxlX2lkGAEgASgNQhTiPxESD2FjdGlvblByb2ZpbGVJZFIPYWN0aW9uUHJvZmlsZUlkEioKCW1lbWJlcl9pZ
  BgCIAEoDUIN4j8KEghtZW1iZXJJZFIIbWVtYmVySWQSMgoGYWN0aW9uGAMgASgLMg0ucDQudjEuQWN0aW9uQgviPwgSBmFjdGlvb
  lIGYWN0aW9uIrMDChJBY3Rpb25Qcm9maWxlR3JvdXASQAoRYWN0aW9uX3Byb2ZpbGVfaWQYASABKA1CFOI/ERIPYWN0aW9uUHJvZ
  mlsZUlkUg9hY3Rpb25Qcm9maWxlSWQSJwoIZ3JvdXBfaWQYAiABKA1CDOI/CRIHZ3JvdXBJZFIHZ3JvdXBJZBJICgdtZW1iZXJzG
  AMgAygLMiAucDQudjEuQWN0aW9uUHJvZmlsZUdyb3VwLk1lbWJlckIM4j8JEgdtZW1iZXJzUgdtZW1iZXJzEicKCG1heF9zaXplG
  AQgASgFQgziPwkSB21heFNpemVSB21heFNpemUavgEKBk1lbWJlchIqCgltZW1iZXJfaWQYASABKA1CDeI/ChIIbWVtYmVySWRSC
  G1lbWJlcklkEiMKBndlaWdodBgCIAEoBUIL4j8IEgZ3ZWlnaHRSBndlaWdodBIkCgV3YXRjaBgDIAEoBUIMGAHiPwcSBXdhdGNoS
  ABSBXdhdGNoEi8KCndhdGNoX3BvcnQYBCABKAxCDuI/CxIJd2F0Y2hQb3J0SABSCXdhdGNoUG9ydEIMCgp3YXRjaF9raW5kIikKB
  UluZGV4EiAKBWluZGV4GAEgASgDQgriPwcSBWluZGV4UgVpbmRleCLsAQoKTWV0ZXJFbnRyeRInCghtZXRlcl9pZBgBIAEoDUIM4
  j8JEgdtZXRlcklkUgdtZXRlcklkEi4KBWluZGV4GAIgASgLMgwucDQudjEuSW5kZXhCCuI/BxIFaW5kZXhSBWluZGV4EjcKBmNvb
  mZpZxgDIAEoCzISLnA0LnYxLk1ldGVyQ29uZmlnQgviPwgSBmNvbmZpZ1IGY29uZmlnEkwKDGNvdW50ZXJfZGF0YRgEIAEoCzIXL
  nA0LnYxLk1ldGVyQ291bnRlckRhdGFCEOI/DRILY291bnRlckRhdGFSC2NvdW50ZXJEYXRhIt4BChBEaXJlY3RNZXRlckVudHJ5E
  kMKC3RhYmxlX2VudHJ5GAEgASgLMhEucDQudjEuVGFibGVFbnRyeUIP4j8MEgp0YWJsZUVudHJ5Ugp0YWJsZUVudHJ5EjcKBmNvb
  mZpZxgCIAEoCzISLnA0LnYxLk1ldGVyQ29uZmlnQgviPwgSBmNvbmZpZ1IGY29uZmlnEkwKDGNvdW50ZXJfZGF0YRgDIAEoCzIXL
  nA0LnYxLk1ldGVyQ291bnRlckRhdGFCEOI/DRILY291bnRlckRhdGFSC2NvdW50ZXJEYXRhIo8BCgtNZXRlckNvbmZpZxIaCgNja
  XIYASABKANCCOI/BRIDY2lyUgNjaXISIwoGY2J1cnN0GAIgASgDQgviPwgSBmNidXJzdFIGY2J1cnN0EhoKA3BpchgDIAEoA0II4
  j8FEgNwaXJSA3BpchIjCgZwYnVyc3QYBCABKANCC+I/CBIGcGJ1cnN0UgZwYnVyc3QioAEKDENvdW50ZXJFbnRyeRItCgpjb3Vud
  GVyX2lkGAEgASgNQg7iPwsSCWNvdW50ZXJJZFIJY291bnRlcklkEi4KBWluZGV4GAIgASgLMgwucDQudjEuSW5kZXhCCuI/BxIFa
  W5kZXhSBWluZGV4EjEKBGRhdGEYAyABKAsyEi5wNC52MS5Db3VudGVyRGF0YUIJ4j8GEgRkYXRhUgRkYXRhIowBChJEaXJlY3RDb
  3VudGVyRW50cnkSQwoLdGFibGVfZW50cnkYASABKAsyES5wNC52MS5UYWJsZUVudHJ5Qg/iPwwSCnRhYmxlRW50cnlSCnRhYmxlR
  W50cnkSMQoEZGF0YRgCIAEoCzISLnA0LnYxLkNvdW50ZXJEYXRhQgniPwYSBGRhdGFSBGRhdGEicQoLQ291bnRlckRhdGESLQoKY
  nl0ZV9jb3VudBgBIAEoA0IO4j8LEglieXRlQ291bnRSCWJ5dGVDb3VudBIzCgxwYWNrZXRfY291bnQYAiABKANCEOI/DRILcGFja
  2V0Q291bnRSC3BhY2tldENvdW50IrEBChBNZXRlckNvdW50ZXJEYXRhEjQKBWdyZWVuGAEgASgLMhIucDQudjEuQ291bnRlckRhd
  GFCCuI/BxIFZ3JlZW5SBWdyZWVuEjcKBnllbGxvdxgCIAEoCzISLnA0LnYxLkNvdW50ZXJEYXRhQgviPwgSBnllbGxvd1IGeWVsb
  G93Ei4KA3JlZBgDIAEoCzISLnA0LnYxLkNvdW50ZXJEYXRhQgjiPwUSA3JlZFIDcmVkIvYBChxQYWNrZXRSZXBsaWNhdGlvbkVuZ
  2luZUVudHJ5EmoKFW11bHRpY2FzdF9ncm91cF9lbnRyeRgBIAEoCzIaLnA0LnYxLk11bHRpY2FzdEdyb3VwRW50cnlCGOI/FRITb
  XVsdGljYXN0R3JvdXBFbnRyeUgAUhNtdWx0aWNhc3RHcm91cEVudHJ5EmIKE2Nsb25lX3Nlc3Npb25fZW50cnkYAiABKAsyGC5wN
  C52MS5DbG9uZVNlc3Npb25FbnRyeUIW4j8TEhFjbG9uZVNlc3Npb25FbnRyeUgAUhFjbG9uZVNlc3Npb25FbnRyeUIGCgR0eXBlI
  mYKB1JlcGxpY2ESMAoLZWdyZXNzX3BvcnQYASABKA1CD+I/DBIKZWdyZXNzUG9ydFIKZWdyZXNzUG9ydBIpCghpbnN0YW5jZRgCI
  AEoDUIN4j8KEghpbnN0YW5jZVIIaW5zdGFuY2UilQEKE011bHRpY2FzdEdyb3VwRW50cnkSQwoSbXVsdGljYXN0X2dyb3VwX2lkG
  AEgASgNQhXiPxISEG11bHRpY2FzdEdyb3VwSWRSEG11bHRpY2FzdEdyb3VwSWQSOQoIcmVwbGljYXMYAiADKAsyDi5wNC52MS5SZ
  XBsaWNhQg3iPwoSCHJlcGxpY2FzUghyZXBsaWNhcyKEAgoRQ2xvbmVTZXNzaW9uRW50cnkSLQoKc2Vzc2lvbl9pZBgBIAEoDUIO4
  j8LEglzZXNzaW9uSWRSCXNlc3Npb25JZBI5CghyZXBsaWNhcxgCIAMoCzIOLnA0LnYxLlJlcGxpY2FCDeI/ChIIcmVwbGljYXNSC
  HJlcGxpY2FzEj0KEGNsYXNzX29mX3NlcnZpY2UYAyABKA1CE+I/EBIOY2xhc3NPZlNlcnZpY2VSDmNsYXNzT2ZTZXJ2aWNlEkYKE
  3BhY2tldF9sZW5ndGhfYnl0ZXMYBCABKAVCFuI/ExIRcGFja2V0TGVuZ3RoQnl0ZXNSEXBhY2tldExlbmd0aEJ5dGVzIkUKDlZhb
  HVlU2V0TWVtYmVyEjMKBW1hdGNoGAEgAygLMhEucDQudjEuRmllbGRNYXRjaEIK4j8HEgVtYXRjaFIFbWF0Y2gigQEKDVZhbHVlU
  2V0RW50cnkSMQoMdmFsdWVfc2V0X2lkGAEgASgNQg/iPwwSCnZhbHVlU2V0SWRSCnZhbHVlU2V0SWQSPQoHbWVtYmVycxgCIAMoC
  zIVLnA0LnYxLlZhbHVlU2V0TWVtYmVyQgziPwkSB21lbWJlcnNSB21lbWJlcnMinwEKDVJlZ2lzdGVyRW50cnkSMAoLcmVnaXN0Z
  XJfaWQYASABKA1CD+I/DBIKcmVnaXN0ZXJJZFIKcmVnaXN0ZXJJZBIuCgVpbmRleBgCIAEoCzIMLnA0LnYxLkluZGV4QgriPwcSB
  WluZGV4UgVpbmRleBIsCgRkYXRhGAMgASgLMg0ucDQudjEuUDREYXRhQgniPwYSBGRhdGFSBGRhdGEirAIKC0RpZ2VzdEVudHJ5E
  ioKCWRpZ2VzdF9pZBgBIAEoDUIN4j8KEghkaWdlc3RJZFIIZGlnZXN0SWQSPgoGY29uZmlnGAIgASgLMhkucDQudjEuRGlnZXN0R
  W50cnkuQ29uZmlnQgviPwgSBmNvbmZpZ1IGY29uZmlnGrABCgZDb25maWcSNwoObWF4X3RpbWVvdXRfbnMYASABKANCEeI/DhIMb
  WF4VGltZW91dE5zUgxtYXhUaW1lb3V0TnMSNAoNbWF4X2xpc3Rfc2l6ZRgCIAEoBUIQ4j8NEgttYXhMaXN0U2l6ZVILbWF4TGlzd
  FNpemUSNwoOYWNrX3RpbWVvdXRfbnMYAyABKANCEeI/DhIMYWNrVGltZW91dE5zUgxhY2tUaW1lb3V0TnMisAIKFFN0cmVhbU1lc
  3NhZ2VSZXF1ZXN0ElQKC2FyYml0cmF0aW9uGAEgASgLMh4ucDQudjEuTWFzdGVyQXJiaXRyYXRpb25VcGRhdGVCEOI/DRILYXJia
  XRyYXRpb25IAFILYXJiaXRyYXRpb24SNwoGcGFja2V0GAIgASgLMhAucDQudjEuUGFja2V0T3V0QgviPwgSBnBhY2tldEgAUgZwY
  WNrZXQSRQoKZGlnZXN0X2FjaxgDIAEoCzIULnA0LnYxLkRpZ2VzdExpc3RBY2tCDuI/CxIJZGlnZXN0QWNrSABSCWRpZ2VzdEFja
  xI4CgVvdGhlchgEIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCCuI/BxIFb3RoZXJIAFIFb3RoZXJCCAoGdXBkYXRlInUKCVBhY
  2tldE91dBImCgdwYXlsb2FkGAEgASgMQgziPwkSB3BheWxvYWRSB3BheWxvYWQSQAoIbWV0YWRhdGEYAiADKAsyFS5wNC52MS5QY
  WNrZXRNZXRhZGF0YUIN4j8KEghtZXRhZGF0YVIIbWV0YWRhdGEiYQoNRGlnZXN0TGlzdEFjaxIqCglkaWdlc3RfaWQYASABKA1CD
  eI/ChIIZGlnZXN0SWRSCGRpZ2VzdElkEiQKB2xpc3RfaWQYAiABKARCC+I/CBIGbGlzdElkUgZsaXN0SWQi1wMKFVN0cmVhbU1lc
  3NhZ2VSZXNwb25zZRJUCgthcmJpdHJhdGlvbhgBIAEoCzIeLnA0LnYxLk1hc3RlckFyYml0cmF0aW9uVXBkYXRlQhDiPw0SC2FyY
  ml0cmF0aW9uSABSC2FyYml0cmF0aW9uEjYKBnBhY2tldBgCIAEoCzIPLnA0LnYxLlBhY2tldEluQgviPwgSBnBhY2tldEgAUgZwY
  WNrZXQSOAoGZGlnZXN0GAMgASgLMhEucDQudjEuRGlnZXN0TGlzdEIL4j8IEgZkaWdlc3RIAFIGZGlnZXN0EnoKGWlkbGVfdGltZ
  W91dF9ub3RpZmljYXRpb24YBCABKAsyHi5wNC52MS5JZGxlVGltZW91dE5vdGlmaWNhdGlvbkIc4j8ZEhdpZGxlVGltZW91dE5vd
  GlmaWNhdGlvbkgAUhdpZGxlVGltZW91dE5vdGlmaWNhdGlvbhI4CgVvdGhlchgFIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCC
  uI/BxIFb3RoZXJIAFIFb3RoZXISNgoFZXJyb3IYBiABKAsyEi5wNC52MS5TdHJlYW1FcnJvckIK4j8HEgVlcnJvckgAUgVlcnJvc
  kIICgZ1cGRhdGUidAoIUGFja2V0SW4SJgoHcGF5bG9hZBgBIAEoDEIM4j8JEgdwYXlsb2FkUgdwYXlsb2FkEkAKCG1ldGFkYXRhG
  AIgAygLMhUucDQudjEuUGFja2V0TWV0YWRhdGFCDeI/ChIIbWV0YWRhdGFSCG1ldGFkYXRhIroBCgpEaWdlc3RMaXN0EioKCWRpZ
  2VzdF9pZBgBIAEoDUIN4j8KEghkaWdlc3RJZFIIZGlnZXN0SWQSJAoHbGlzdF9pZBgCIAEoBEIL4j8IEgZsaXN0SWRSBmxpc3RJZ
  BIsCgRkYXRhGAMgAygLMg0ucDQudjEuUDREYXRhQgniPwYSBGRhdGFSBGRhdGESLAoJdGltZXN0YW1wGAQgASgDQg7iPwsSCXRpb
  WVzdGFtcFIJdGltZXN0YW1wImQKDlBhY2tldE1ldGFkYXRhEjAKC21ldGFkYXRhX2lkGAEgASgNQg/iPwwSCm1ldGFkYXRhSWRSC
  m1ldGFkYXRhSWQSIAoFdmFsdWUYAiABKAxCCuI/BxIFdmFsdWVSBXZhbHVlIuwBChdNYXN0ZXJBcmJpdHJhdGlvblVwZGF0ZRIqC
  glkZXZpY2VfaWQYASABKARCDeI/ChIIZGV2aWNlSWRSCGRldmljZUlkEioKBHJvbGUYAiABKAsyCy5wNC52MS5Sb2xlQgniPwYSB
  HJvbGVSBHJvbGUSQAoLZWxlY3Rpb25faWQYAyABKAsyDi5wNC52MS5VaW50MTI4Qg/iPwwSCmVsZWN0aW9uSWRSCmVsZWN0aW9uS
  WQSNwoGc3RhdHVzGAQgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMiewoEUm9sZRIZCgJpZBgBI
  AEoBEIJGAHiPwQSAmlkUgJpZBIdCgRuYW1lGAMgASgJQgniPwYSBG5hbWVSBG5hbWUSOQoGY29uZmlnGAIgASgLMhQuZ29vZ2xlL
  nByb3RvYnVmLkFueUIL4j8IEgZjb25maWdSBmNvbmZpZyKMAQoXSWRsZVRpbWVvdXROb3RpZmljYXRpb24SQwoLdGFibGVfZW50c
  nkYASADKAsyES5wNC52MS5UYWJsZUVudHJ5Qg/iPwwSCnRhYmxlRW50cnlSCnRhYmxlRW50cnkSLAoJdGltZXN0YW1wGAIgASgDQ
  g7iPwsSCXRpbWVzdGFtcFIJdGltZXN0YW1wIpoDCgtTdHJlYW1FcnJvchI5Cg5jYW5vbmljYWxfY29kZRgBIAEoBUIS4j8PEg1jY
  W5vbmljYWxDb2RlUg1jYW5vbmljYWxDb2RlEiYKB21lc3NhZ2UYAiABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZRIgCgVzcGFjZ
  RgDIAEoCUIK4j8HEgVzcGFjZVIFc3BhY2USHQoEY29kZRgEIAEoBUIJ4j8GEgRjb2RlUgRjb2RlEkYKCnBhY2tldF9vdXQYBSABK
  AsyFS5wNC52MS5QYWNrZXRPdXRFcnJvckIO4j8LEglwYWNrZXRPdXRIAFIJcGFja2V0T3V0ElcKD2RpZ2VzdF9saXN0X2FjaxgGI
  AEoCzIZLnA0LnYxLkRpZ2VzdExpc3RBY2tFcnJvckIS4j8PEg1kaWdlc3RMaXN0QWNrSABSDWRpZ2VzdExpc3RBY2sSOwoFb3RoZ
  XIYByABKAsyFy5wNC52MS5TdHJlYW1PdGhlckVycm9yQgriPwcSBW90aGVySABSBW90aGVyQgkKB2RldGFpbHMiUQoOUGFja2V0T
  3V0RXJyb3ISPwoKcGFja2V0X291dBgBIAEoCzIQLnA0LnYxLlBhY2tldE91dEIO4j8LEglwYWNrZXRPdXRSCXBhY2tldE91dCJmC
  hJEaWdlc3RMaXN0QWNrRXJyb3ISUAoPZGlnZXN0X2xpc3RfYWNrGAEgASgLMhQucDQudjEuRGlnZXN0TGlzdEFja0IS4j8PEg1ka
  Wdlc3RMaXN0QWNrUg1kaWdlc3RMaXN0QWNrIkoKEFN0cmVhbU90aGVyRXJyb3ISNgoFb3RoZXIYASABKAsyFC5nb29nbGUucHJvd
  G9idWYuQW55QgriPwcSBW90aGVyUgVvdGhlciJECgdVaW50MTI4Eh0KBGhpZ2gYASABKARCCeI/BhIEaGlnaFIEaGlnaBIaCgNsb
  3cYAiABKARCCOI/BRIDbG93UgNsb3ci5QQKIlNldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZ1JlcXVlc3QSKgoJZGV2aWNlX2lkG
  AEgASgEQg3iPwoSCGRldmljZUlkUghkZXZpY2VJZBImCgdyb2xlX2lkGAIgASgEQg0YAeI/CBIGcm9sZUlkUgZyb2xlSWQSHQoEc
  m9sZRgGIAEoCUIJ4j8GEgRyb2xlUgRyb2xlEkAKC2VsZWN0aW9uX2lkGAMgASgLMg4ucDQudjEuVWludDEyOEIP4j8MEgplbGVjd
  GlvbklkUgplbGVjdGlvbklkElUKBmFjdGlvbhgEIAEoDjIwLnA0LnYxLlNldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZ1JlcXVlc
  3QuQWN0aW9uQgviPwgSBmFjdGlvblIGYWN0aW9uEkQKBmNvbmZpZxgFIAEoCzIfLnA0LnYxLkZvcndhcmRpbmdQaXBlbGluZUNvb
  mZpZ0IL4j8IEgZjb25maWdSBmNvbmZpZyLsAQoGQWN0aW9uEiEKC1VOU1BFQ0lGSUVEEAAaEOI/DRILVU5TUEVDSUZJRUQSFwoGV
  kVSSUZZEAEaC+I/CBIGVkVSSUZZEikKD1ZFUklGWV9BTkRfU0FWRRACGhTiPxESD1ZFUklGWV9BTkRfU0FWRRItChFWRVJJRllfQ
  U5EX0NPTU1JVBADGhbiPxMSEVZFUklGWV9BTkRfQ09NTUlUEhcKBkNPTU1JVBAEGgviPwgSBkNPTU1JVBIzChRSRUNPTkNJTEVfQ
  U5EX0NPTU1JVBAFGhniPxYSFFJFQ09OQ0lMRV9BTkRfQ09NTUlUIiUKI1NldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZ1Jlc3Bvb
  nNlIpACChhGb3J3YXJkaW5nUGlwZWxpbmVDb25maWcSOQoGcDRpbmZvGAEgASgLMhQucDQuY29uZmlnLnYxLlA0SW5mb0IL4j8IE
  gZwNEluZm9SBnA0aW5mbxI9ChBwNF9kZXZpY2VfY29uZmlnGAIgASgMQhPiPxASDnA0RGV2aWNlQ29uZmlnUg5wNERldmljZUNvb
  mZpZxJLCgZjb29raWUYAyABKAsyJi5wNC52MS5Gb3J3YXJkaW5nUGlwZWxpbmVDb25maWcuQ29va2llQgviPwgSBmNvb2tpZVIGY
  29va2llGi0KBkNvb2tpZRIjCgZjb29raWUYASABKARCC+I/CBIGY29va2llUgZjb29raWUi8wIKIkdldEZvcndhcmRpbmdQaXBlb
  GluZUNvbmZpZ1JlcXVlc3QSKgoJZGV2aWNlX2lkGAEgASgEQg3iPwoSCGRldmljZUlkUghkZXZpY2VJZBJuCg1yZXNwb25zZV90e
  XBlGAIgASgOMjYucDQudjEuR2V0Rm9yd2FyZGluZ1BpcGVsaW5lQ29uZmlnUmVxdWVzdC5SZXNwb25zZVR5cGVCEeI/DhIMcmVzc
  G9uc2VUeXBlUgxyZXNwb25zZVR5cGUisAEKDFJlc3BvbnNlVHlwZRIRCgNBTEwQABoI4j8FEgNBTEwSIQoLQ09PS0lFX09OTFkQA
  RoQ4j8NEgtDT09LSUVfT05MWRItChFQNElORk9fQU5EX0NPT0tJRRACGhbiPxMSEVA0SU5GT19BTkRfQ09PS0lFEjsKGERFVklDR
  V9DT05GSUdfQU5EX0NPT0tJRRADGh3iPxoSGERFVklDRV9DT05GSUdfQU5EX0NPT0tJRSJrCiNHZXRGb3J3YXJkaW5nUGlwZWxpb
  mVDb25maWdSZXNwb25zZRJECgZjb25maWcYASABKAsyHy5wNC52MS5Gb3J3YXJkaW5nUGlwZWxpbmVDb25maWdCC+I/CBIGY29uZ
  mlnUgZjb25maWci6QEKBUVycm9yEjkKDmNhbm9uaWNhbF9jb2RlGAEgASgFQhLiPw8SDWNhbm9uaWNhbENvZGVSDWNhbm9uaWNhb
  ENvZGUSJgoHbWVzc2FnZRgCIAEoCUIM4j8JEgdtZXNzYWdlUgdtZXNzYWdlEiAKBXNwYWNlGAMgASgJQgriPwcSBXNwYWNlUgVzc
  GFjZRIdCgRjb2RlGAQgASgFQgniPwYSBGNvZGVSBGNvZGUSPAoHZGV0YWlscxgFIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCD
  OI/CRIHZGV0YWlsc1IHZGV0YWlscyIVChNDYXBhYmlsaXRpZXNSZXF1ZXN0ImQKFENhcGFiaWxpdGllc1Jlc3BvbnNlEkwKFXA0c
  nVudGltZV9hcGlfdmVyc2lvbhgBIAEoCUIY4j8VEhNwNFJ1bnRpbWVBcGlWZXJzaW9uUhNwNHJ1bnRpbWVBcGlWZXJzaW9uKvUBC
  gdTZG5Qb3J0EisKEFNETl9QT1JUX1VOS05PV04QABoV4j8SEhBTRE5fUE9SVF9VTktOT1dOEiMKDFNETl9QT1JUX01JThABGhHiP
  w4SDFNETl9QT1JUX01JThIsCgxTRE5fUE9SVF9NQVgQ//3/////////ARoR4j8OEgxTRE5fUE9SVF9NQVgSPAoUU0ROX1BPUlRfU
  kVDSVJDVUxBVEUQ+v//////////ARoZ4j8WEhRTRE5fUE9SVF9SRUNJUkNVTEFURRIsCgxTRE5fUE9SVF9DUFUQ/f//////////A
  RoR4j8OEgxTRE5fUE9SVF9DUFUygwQKCVA0UnVudGltZRI0CgVXcml0ZRITLnA0LnYxLldyaXRlUmVxdWVzdBoULnA0LnYxLldya
  XRlUmVzcG9uc2UiABIzCgRSZWFkEhIucDQudjEuUmVhZFJlcXVlc3QaEy5wNC52MS5SZWFkUmVzcG9uc2UiADABEnYKG1NldEZvc
  ndhcmRpbmdQaXBlbGluZUNvbmZpZxIpLnA0LnYxLlNldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZ1JlcXVlc3QaKi5wNC52MS5TZ
  XRGb3J3YXJkaW5nUGlwZWxpbmVDb25maWdSZXNwb25zZSIAEnYKG0dldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZxIpLnA0LnYxL
  kdldEZvcndhcmRpbmdQaXBlbGluZUNvbmZpZ1JlcXVlc3QaKi5wNC52MS5HZXRGb3J3YXJkaW5nUGlwZWxpbmVDb25maWdSZXNwb
  25zZSIAElAKDVN0cmVhbUNoYW5uZWwSGy5wNC52MS5TdHJlYW1NZXNzYWdlUmVxdWVzdBocLnA0LnYxLlN0cmVhbU1lc3NhZ2VSZ
  XNwb25zZSIAKAEwARJJCgxDYXBhYmlsaXRpZXMSGi5wNC52MS5DYXBhYmlsaXRpZXNSZXF1ZXN0GhsucDQudjEuQ2FwYWJpbGl0a
  WVzUmVzcG9uc2UiAEIpWiRnaXRodWIuY29tL3A0bGFuZy9wNHJ1bnRpbWUvZ28vcDQvdjH4AQFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.any.AnyProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor,
      p4.config.v1.p4info.P4InfoProto.javaDescriptor,
      p4.v1.p4data.P4DataProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}