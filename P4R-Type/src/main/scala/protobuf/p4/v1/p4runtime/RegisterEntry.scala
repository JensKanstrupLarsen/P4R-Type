// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package p4.v1.p4runtime

/** ------------------------------------------------------------------------------
  */
@SerialVersionUID(0L)
final case class RegisterEntry(
    registerId: _root_.scala.Int = 0,
    index: _root_.scala.Option[p4.v1.p4runtime.Index] = _root_.scala.None,
    data: _root_.scala.Option[p4.v1.p4data.P4Data] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RegisterEntry] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = registerId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, __value)
        }
      };
      if (index.isDefined) {
        val __value = index.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isDefined) {
        val __value = data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = registerId
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      index.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withRegisterId(__v: _root_.scala.Int): RegisterEntry = copy(registerId = __v)
    def getIndex: p4.v1.p4runtime.Index = index.getOrElse(p4.v1.p4runtime.Index.defaultInstance)
    def clearIndex: RegisterEntry = copy(index = _root_.scala.None)
    def withIndex(__v: p4.v1.p4runtime.Index): RegisterEntry = copy(index = Option(__v))
    def getData: p4.v1.p4data.P4Data = data.getOrElse(p4.v1.p4data.P4Data.defaultInstance)
    def clearData: RegisterEntry = copy(data = _root_.scala.None)
    def withData(__v: p4.v1.p4data.P4Data): RegisterEntry = copy(data = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = registerId
          if (__t != 0) __t else null
        }
        case 2 => index.orNull
        case 3 => data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(registerId)
        case 2 => index.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: p4.v1.p4runtime.RegisterEntry.type = p4.v1.p4runtime.RegisterEntry
    // @@protoc_insertion_point(GeneratedMessage[p4.v1.RegisterEntry])
}

object RegisterEntry extends scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.RegisterEntry] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[p4.v1.p4runtime.RegisterEntry] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): p4.v1.p4runtime.RegisterEntry = {
    var __registerId: _root_.scala.Int = 0
    var __index: _root_.scala.Option[p4.v1.p4runtime.Index] = _root_.scala.None
    var __data: _root_.scala.Option[p4.v1.p4data.P4Data] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __registerId = _input__.readUInt32()
        case 18 =>
          __index = Option(__index.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4runtime.Index](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __data = Option(__data.fold(_root_.scalapb.LiteParser.readMessage[p4.v1.p4data.P4Data](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    p4.v1.p4runtime.RegisterEntry(
        registerId = __registerId,
        index = __index,
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[p4.v1.p4runtime.RegisterEntry] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      p4.v1.p4runtime.RegisterEntry(
        registerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        index = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4runtime.Index]]),
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[p4.v1.p4data.P4Data]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = P4RuntimeProto.javaDescriptor.getMessageTypes().get(29)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = P4RuntimeProto.scalaDescriptor.messages(29)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = p4.v1.p4runtime.Index
      case 3 => __out = p4.v1.p4data.P4Data
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = p4.v1.p4runtime.RegisterEntry(
    registerId = 0,
    index = _root_.scala.None,
    data = _root_.scala.None
  )
  implicit class RegisterEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.RegisterEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, p4.v1.p4runtime.RegisterEntry](_l) {
    def registerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.registerId)((c_, f_) => c_.copy(registerId = f_))
    def index: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4runtime.Index] = field(_.getIndex)((c_, f_) => c_.copy(index = Option(f_)))
    def optionalIndex: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4runtime.Index]] = field(_.index)((c_, f_) => c_.copy(index = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, p4.v1.p4data.P4Data] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[p4.v1.p4data.P4Data]] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val REGISTER_ID_FIELD_NUMBER = 1
  final val INDEX_FIELD_NUMBER = 2
  final val DATA_FIELD_NUMBER = 3
  def of(
    registerId: _root_.scala.Int,
    index: _root_.scala.Option[p4.v1.p4runtime.Index],
    data: _root_.scala.Option[p4.v1.p4data.P4Data]
  ): _root_.p4.v1.p4runtime.RegisterEntry = _root_.p4.v1.p4runtime.RegisterEntry(
    registerId,
    index,
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[p4.v1.RegisterEntry])
}
