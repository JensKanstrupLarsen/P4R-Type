# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-20.04"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 50051, host: 50051, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 50052, host: 50052, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 50053, host: 50053, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 50054, host: 50054, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 50055, host: 50055, host_ip: "127.0.0.1"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.hostname = "p4"
  config.vm.provision "file", source: "p4-logo.png",   destination: "/home/vagrant/p4-logo.png"
  config.vm.provision "file", source: "p4_16-mode.el", destination: "/home/vagrant/p4_16-mode.el"
  config.vm.provision "file", source: "p4.vim",        destination: "/home/vagrant/p4.vim"

  config.vm.define "release", primary: true do |release|
    release.vm.provider "virtualbox" do |v|
      v.name = "P4R-Type Demo VM"# + Time.now.strftime(" %Y-%m-%d")
    end
    release.vm.provision "file", source: "patches/mininet-dont-install-python2-2022-apr.patch", destination: "/home/vagrant/patches/mininet-dont-install-python2-2022-apr.patch"
    release.vm.provision "file", source: "files", destination: "/home/vagrant/files"
    release.vm.provision "shell", path: "root-release-bootstrap.sh"
    release.vm.provision "shell", path: "root-common-bootstrap.sh"
    release.vm.provision "shell", privileged: false, path: "user-common-bootstrap.sh"
  end

  config.vm.provider "virtualbox" do |vb|
    vb.gui = true
    vb.memory = 2048
    vb.cpus = 2
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    vb.customize [
      "storageattach", :id,
      "--storagectl", "IDE Controller",
      "--port", "0",
      "--device", "0",
      "--type", "dvddrive",
      "--medium", "emptydrive"
    ]
    vb.customize ["modifyvm", :id, "--vram", "32"]
  end
end
